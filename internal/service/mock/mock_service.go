// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/IgorNikiforov/swordfish-emulator-go/internal/service (interfaces: ResourceService)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination mock/mock_service.go . ResourceService
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	dto "gitlab.com/IgorNikiforov/swordfish-emulator-go/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceService is a mock of ResourceService interface.
type MockResourceService struct {
	ctrl     *gomock.Controller
	recorder *MockResourceServiceMockRecorder
	isgomock struct{}
}

// MockResourceServiceMockRecorder is the mock recorder for MockResourceService.
type MockResourceServiceMockRecorder struct {
	mock *MockResourceService
}

// NewMockResourceService creates a new mock instance.
func NewMockResourceService(ctrl *gomock.Controller) *MockResourceService {
	mock := &MockResourceService{ctrl: ctrl}
	mock.recorder = &MockResourceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceService) EXPECT() *MockResourceServiceMockRecorder {
	return m.recorder
}

// AddResourceToCollection mocks base method.
func (m *MockResourceService) AddResourceToCollection(ctx context.Context, resourceDto dto.ResourceRequestDto) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResourceToCollection", ctx, resourceDto)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddResourceToCollection indicates an expected call of AddResourceToCollection.
func (mr *MockResourceServiceMockRecorder) AddResourceToCollection(ctx, resourceDto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResourceToCollection", reflect.TypeOf((*MockResourceService)(nil).AddResourceToCollection), ctx, resourceDto)
}

// Create mocks base method.
func (m *MockResourceService) Create(ctx context.Context, resourceId string, resource any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, resourceId, resource)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResourceServiceMockRecorder) Create(ctx, resourceId, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResourceService)(nil).Create), ctx, resourceId, resource)
}

// CreateCollection mocks base method.
func (m *MockResourceService) CreateCollection(ctx context.Context, collectionDto dto.CollectionDto) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollection", ctx, collectionDto)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollection indicates an expected call of CreateCollection.
func (mr *MockResourceServiceMockRecorder) CreateCollection(ctx, collectionDto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockResourceService)(nil).CreateCollection), ctx, collectionDto)
}

// Delete mocks base method.
func (m *MockResourceService) Delete(ctx context.Context, resourceId string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceId)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockResourceServiceMockRecorder) Delete(ctx, resourceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResourceService)(nil).Delete), ctx, resourceId)
}

// DeleteResourceFromCollection mocks base method.
func (m *MockResourceService) DeleteResourceFromCollection(ctx context.Context, collectionId, resourceId string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceFromCollection", ctx, collectionId, resourceId)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourceFromCollection indicates an expected call of DeleteResourceFromCollection.
func (mr *MockResourceServiceMockRecorder) DeleteResourceFromCollection(ctx, collectionId, resourceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceFromCollection", reflect.TypeOf((*MockResourceService)(nil).DeleteResourceFromCollection), ctx, collectionId, resourceId)
}

// Get mocks base method.
func (m *MockResourceService) Get(ctx context.Context, resourceId string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceId)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockResourceServiceMockRecorder) Get(ctx, resourceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResourceService)(nil).Get), ctx, resourceId)
}

// Replace mocks base method.
func (m *MockResourceService) Replace(ctx context.Context, resourceId string, resource any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", ctx, resourceId, resource)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replace indicates an expected call of Replace.
func (mr *MockResourceServiceMockRecorder) Replace(ctx, resourceId, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockResourceService)(nil).Replace), ctx, resourceId, resource)
}

// Update mocks base method.
func (m *MockResourceService) Update(ctx context.Context, resourceId string, patchData []byte) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceId, patchData)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockResourceServiceMockRecorder) Update(ctx, resourceId, patchData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResourceService)(nil).Update), ctx, resourceId, patchData)
}
