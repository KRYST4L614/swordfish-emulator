// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/IgorNikiforov/swordfish-emulator-go/internal/service (interfaces: ResourceService)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination mock/mock_service.go . ResourceService
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	dto "gitlab.com/IgorNikiforov/swordfish-emulator-go/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceService is a mock of ResourceService interface.
type MockResourceService struct {
	ctrl     *gomock.Controller
	recorder *MockResourceServiceMockRecorder
}

// MockResourceServiceMockRecorder is the mock recorder for MockResourceService.
type MockResourceServiceMockRecorder struct {
	mock *MockResourceService
}

// NewMockResourceService creates a new mock instance.
func NewMockResourceService(ctrl *gomock.Controller) *MockResourceService {
	mock := &MockResourceService{ctrl: ctrl}
	mock.recorder = &MockResourceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceService) EXPECT() *MockResourceServiceMockRecorder {
	return m.recorder
}

// AddResourceToCollection mocks base method.
func (m *MockResourceService) AddResourceToCollection(arg0 context.Context, arg1, arg2 string, arg3 any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResourceToCollection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddResourceToCollection indicates an expected call of AddResourceToCollection.
func (mr *MockResourceServiceMockRecorder) AddResourceToCollection(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResourceToCollection", reflect.TypeOf((*MockResourceService)(nil).AddResourceToCollection), arg0, arg1, arg2, arg3)
}

// Create mocks base method.
func (m *MockResourceService) Create(arg0 context.Context, arg1 string, arg2 any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResourceServiceMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResourceService)(nil).Create), arg0, arg1, arg2)
}

// CreateCollection mocks base method.
func (m *MockResourceService) CreateCollection(arg0 context.Context, arg1 dto.CollectionDto) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollection", arg0, arg1)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollection indicates an expected call of CreateCollection.
func (mr *MockResourceServiceMockRecorder) CreateCollection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockResourceService)(nil).CreateCollection), arg0, arg1)
}

// Delete mocks base method.
func (m *MockResourceService) Delete(arg0 context.Context, arg1 string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockResourceServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResourceService)(nil).Delete), arg0, arg1)
}

// DeleteResourceFromCollection mocks base method.
func (m *MockResourceService) DeleteResourceFromCollection(arg0 context.Context, arg1, arg2 string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceFromCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourceFromCollection indicates an expected call of DeleteResourceFromCollection.
func (mr *MockResourceServiceMockRecorder) DeleteResourceFromCollection(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceFromCollection", reflect.TypeOf((*MockResourceService)(nil).DeleteResourceFromCollection), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockResourceService) Get(arg0 context.Context, arg1 string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockResourceServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResourceService)(nil).Get), arg0, arg1)
}

// Replace mocks base method.
func (m *MockResourceService) Replace(arg0 context.Context, arg1 string, arg2 any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0, arg1, arg2)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replace indicates an expected call of Replace.
func (mr *MockResourceServiceMockRecorder) Replace(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockResourceService)(nil).Replace), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockResourceService) Update(arg0 context.Context, arg1 string, arg2 []byte) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockResourceServiceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResourceService)(nil).Update), arg0, arg1, arg2)
}
