// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/IgorNikiforov/swordfish-emulator-go/internal/repository (interfaces: ResourceRepository)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination mock/mock_repository.go . ResourceRepository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	dto "gitlab.com/IgorNikiforov/swordfish-emulator-go/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceRepository is a mock of ResourceRepository interface.
type MockResourceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResourceRepositoryMockRecorder
	isgomock struct{}
}

// MockResourceRepositoryMockRecorder is the mock recorder for MockResourceRepository.
type MockResourceRepositoryMockRecorder struct {
	mock *MockResourceRepository
}

// NewMockResourceRepository creates a new mock instance.
func NewMockResourceRepository(ctrl *gomock.Controller) *MockResourceRepository {
	mock := &MockResourceRepository{ctrl: ctrl}
	mock.recorder = &MockResourceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceRepository) EXPECT() *MockResourceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockResourceRepository) Create(ctx context.Context, resource *dto.ResourceDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockResourceRepositoryMockRecorder) Create(ctx, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResourceRepository)(nil).Create), ctx, resource)
}

// DeleteAll mocks base method.
func (m *MockResourceRepository) DeleteAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockResourceRepositoryMockRecorder) DeleteAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockResourceRepository)(nil).DeleteAll), ctx)
}

// DeleteById mocks base method.
func (m *MockResourceRepository) DeleteById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockResourceRepositoryMockRecorder) DeleteById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockResourceRepository)(nil).DeleteById), ctx, id)
}

// DeleteStartsWith mocks base method.
func (m *MockResourceRepository) DeleteStartsWith(ctx context.Context, prefix string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStartsWith", ctx, prefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStartsWith indicates an expected call of DeleteStartsWith.
func (mr *MockResourceRepositoryMockRecorder) DeleteStartsWith(ctx, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStartsWith", reflect.TypeOf((*MockResourceRepository)(nil).DeleteStartsWith), ctx, prefix)
}

// Get mocks base method.
func (m *MockResourceRepository) Get(ctx context.Context, id string) (*dto.ResourceDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*dto.ResourceDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockResourceRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResourceRepository)(nil).Get), ctx, id)
}

// Update mocks base method.
func (m *MockResourceRepository) Update(ctx context.Context, resource *dto.ResourceDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockResourceRepositoryMockRecorder) Update(ctx, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResourceRepository)(nil).Update), ctx, resource)
}
