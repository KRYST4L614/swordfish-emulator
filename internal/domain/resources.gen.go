// Package domain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package domain

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ActionInfoV142ParameterTypes.
const (
	ActionInfoV142ParameterTypesBoolean     ActionInfoV142ParameterTypes = "Boolean"
	ActionInfoV142ParameterTypesNumber      ActionInfoV142ParameterTypes = "Number"
	ActionInfoV142ParameterTypesNumberArray ActionInfoV142ParameterTypes = "NumberArray"
	ActionInfoV142ParameterTypesObject      ActionInfoV142ParameterTypes = "Object"
	ActionInfoV142ParameterTypesObjectArray ActionInfoV142ParameterTypes = "ObjectArray"
	ActionInfoV142ParameterTypesString      ActionInfoV142ParameterTypes = "String"
	ActionInfoV142ParameterTypesStringArray ActionInfoV142ParameterTypes = "StringArray"
)

// Defines values for ChassisV1250ChassisType.
const (
	Blade            ChassisV1250ChassisType = "Blade"
	Card             ChassisV1250ChassisType = "Card"
	Cartridge        ChassisV1250ChassisType = "Cartridge"
	Component        ChassisV1250ChassisType = "Component"
	Drawer           ChassisV1250ChassisType = "Drawer"
	Enclosure        ChassisV1250ChassisType = "Enclosure"
	Expansion        ChassisV1250ChassisType = "Expansion"
	HeatExchanger    ChassisV1250ChassisType = "HeatExchanger"
	IPBasedDrive     ChassisV1250ChassisType = "IPBasedDrive"
	ImmersionTank    ChassisV1250ChassisType = "ImmersionTank"
	Module           ChassisV1250ChassisType = "Module"
	Other            ChassisV1250ChassisType = "Other"
	Pod              ChassisV1250ChassisType = "Pod"
	PowerStrip       ChassisV1250ChassisType = "PowerStrip"
	Rack             ChassisV1250ChassisType = "Rack"
	RackGroup        ChassisV1250ChassisType = "RackGroup"
	RackMount        ChassisV1250ChassisType = "RackMount"
	Row              ChassisV1250ChassisType = "Row"
	Shelf            ChassisV1250ChassisType = "Shelf"
	Sidecar          ChassisV1250ChassisType = "Sidecar"
	Sled             ChassisV1250ChassisType = "Sled"
	StandAlone       ChassisV1250ChassisType = "StandAlone"
	StorageEnclosure ChassisV1250ChassisType = "StorageEnclosure"
	Zone             ChassisV1250ChassisType = "Zone"
)

// Defines values for ChassisV1250DoorState.
const (
	Closed        ChassisV1250DoorState = "Closed"
	Locked        ChassisV1250DoorState = "Locked"
	LockedAndOpen ChassisV1250DoorState = "LockedAndOpen"
	Open          ChassisV1250DoorState = "Open"
)

// Defines values for ChassisV1250EnvironmentalClass.
const (
	A1 ChassisV1250EnvironmentalClass = "A1"
	A2 ChassisV1250EnvironmentalClass = "A2"
	A3 ChassisV1250EnvironmentalClass = "A3"
	A4 ChassisV1250EnvironmentalClass = "A4"
)

// Defines values for ChassisV1250IndicatorLED.
const (
	ChassisV1250IndicatorLEDBlinking ChassisV1250IndicatorLED = "Blinking"
	ChassisV1250IndicatorLEDLit      ChassisV1250IndicatorLED = "Lit"
	ChassisV1250IndicatorLEDOff      ChassisV1250IndicatorLED = "Off"
	ChassisV1250IndicatorLEDUnknown  ChassisV1250IndicatorLED = "Unknown"
)

// Defines values for ChassisV1250IntrusionSensor.
const (
	HardwareIntrusion ChassisV1250IntrusionSensor = "HardwareIntrusion"
	Normal            ChassisV1250IntrusionSensor = "Normal"
	TamperingDetected ChassisV1250IntrusionSensor = "TamperingDetected"
)

// Defines values for ChassisV1250IntrusionSensorReArm.
const (
	ChassisV1250IntrusionSensorReArmAutomatic ChassisV1250IntrusionSensorReArm = "Automatic"
	ChassisV1250IntrusionSensorReArmManual    ChassisV1250IntrusionSensorReArm = "Manual"
)

// Defines values for ChassisV1250ThermalDirection.
const (
	ChassisV1250ThermalDirectionBackToFront ChassisV1250ThermalDirection = "BackToFront"
	ChassisV1250ThermalDirectionFrontToBack ChassisV1250ThermalDirection = "FrontToBack"
	ChassisV1250ThermalDirectionSealed      ChassisV1250ThermalDirection = "Sealed"
	ChassisV1250ThermalDirectionTopExhaust  ChassisV1250ThermalDirection = "TopExhaust"
)

// Defines values for ComputerSystemBootSource.
const (
	ComputerSystemBootSourceBiosSetup    ComputerSystemBootSource = "BiosSetup"
	ComputerSystemBootSourceCd           ComputerSystemBootSource = "Cd"
	ComputerSystemBootSourceDiags        ComputerSystemBootSource = "Diags"
	ComputerSystemBootSourceFloppy       ComputerSystemBootSource = "Floppy"
	ComputerSystemBootSourceHdd          ComputerSystemBootSource = "Hdd"
	ComputerSystemBootSourceNone         ComputerSystemBootSource = "None"
	ComputerSystemBootSourcePxe          ComputerSystemBootSource = "Pxe"
	ComputerSystemBootSourceRecovery     ComputerSystemBootSource = "Recovery"
	ComputerSystemBootSourceRemoteDrive  ComputerSystemBootSource = "RemoteDrive"
	ComputerSystemBootSourceSDCard       ComputerSystemBootSource = "SDCard"
	ComputerSystemBootSourceUefiBootNext ComputerSystemBootSource = "UefiBootNext"
	ComputerSystemBootSourceUefiHttp     ComputerSystemBootSource = "UefiHttp"
	ComputerSystemBootSourceUefiShell    ComputerSystemBootSource = "UefiShell"
	ComputerSystemBootSourceUefiTarget   ComputerSystemBootSource = "UefiTarget"
	ComputerSystemBootSourceUsb          ComputerSystemBootSource = "Usb"
	ComputerSystemBootSourceUtilities    ComputerSystemBootSource = "Utilities"
)

// Defines values for ComputerSystemV1230AutomaticRetryConfig.
const (
	ComputerSystemV1230AutomaticRetryConfigDisabled      ComputerSystemV1230AutomaticRetryConfig = "Disabled"
	ComputerSystemV1230AutomaticRetryConfigRetryAlways   ComputerSystemV1230AutomaticRetryConfig = "RetryAlways"
	ComputerSystemV1230AutomaticRetryConfigRetryAttempts ComputerSystemV1230AutomaticRetryConfig = "RetryAttempts"
)

// Defines values for ComputerSystemV1230BootOrderTypes.
const (
	AliasBootOrder ComputerSystemV1230BootOrderTypes = "AliasBootOrder"
	BootOrder      ComputerSystemV1230BootOrderTypes = "BootOrder"
)

// Defines values for ComputerSystemV1230BootProgressTypes.
const (
	ComputerSystemV1230BootProgressTypesBusInitializationStarted                ComputerSystemV1230BootProgressTypes = "BusInitializationStarted"
	ComputerSystemV1230BootProgressTypesMemoryInitializationStarted             ComputerSystemV1230BootProgressTypes = "MemoryInitializationStarted"
	ComputerSystemV1230BootProgressTypesNone                                    ComputerSystemV1230BootProgressTypes = "None"
	ComputerSystemV1230BootProgressTypesOEM                                     ComputerSystemV1230BootProgressTypes = "OEM"
	ComputerSystemV1230BootProgressTypesOSBootStarted                           ComputerSystemV1230BootProgressTypes = "OSBootStarted"
	ComputerSystemV1230BootProgressTypesOSRunning                               ComputerSystemV1230BootProgressTypes = "OSRunning"
	ComputerSystemV1230BootProgressTypesPCIResourceConfigStarted                ComputerSystemV1230BootProgressTypes = "PCIResourceConfigStarted"
	ComputerSystemV1230BootProgressTypesPrimaryProcessorInitializationStarted   ComputerSystemV1230BootProgressTypes = "PrimaryProcessorInitializationStarted"
	ComputerSystemV1230BootProgressTypesSecondaryProcessorInitializationStarted ComputerSystemV1230BootProgressTypes = "SecondaryProcessorInitializationStarted"
	ComputerSystemV1230BootProgressTypesSetupEntered                            ComputerSystemV1230BootProgressTypes = "SetupEntered"
	ComputerSystemV1230BootProgressTypesSystemHardwareInitializationComplete    ComputerSystemV1230BootProgressTypes = "SystemHardwareInitializationComplete"
)

// Defines values for ComputerSystemV1230BootSourceOverrideEnabled.
const (
	ComputerSystemV1230BootSourceOverrideEnabledContinuous ComputerSystemV1230BootSourceOverrideEnabled = "Continuous"
	ComputerSystemV1230BootSourceOverrideEnabledDisabled   ComputerSystemV1230BootSourceOverrideEnabled = "Disabled"
	ComputerSystemV1230BootSourceOverrideEnabledOnce       ComputerSystemV1230BootSourceOverrideEnabled = "Once"
)

// Defines values for ComputerSystemV1230BootSourceOverrideMode.
const (
	Legacy ComputerSystemV1230BootSourceOverrideMode = "Legacy"
	UEFI   ComputerSystemV1230BootSourceOverrideMode = "UEFI"
)

// Defines values for ComputerSystemV1230CompositionUseCase.
const (
	ExpandableSystem     ComputerSystemV1230CompositionUseCase = "ExpandableSystem"
	ResourceBlockCapable ComputerSystemV1230CompositionUseCase = "ResourceBlockCapable"
)

// Defines values for ComputerSystemV1230GraphicalConnectTypesSupported.
const (
	ComputerSystemV1230GraphicalConnectTypesSupportedKVMIP ComputerSystemV1230GraphicalConnectTypesSupported = "KVMIP"
	ComputerSystemV1230GraphicalConnectTypesSupportedOEM   ComputerSystemV1230GraphicalConnectTypesSupported = "OEM"
)

// Defines values for ComputerSystemV1230HostingRole.
const (
	Appliance            ComputerSystemV1230HostingRole = "Appliance"
	ApplicationServer    ComputerSystemV1230HostingRole = "ApplicationServer"
	BareMetalServer      ComputerSystemV1230HostingRole = "BareMetalServer"
	ContainerServer      ComputerSystemV1230HostingRole = "ContainerServer"
	StorageServer        ComputerSystemV1230HostingRole = "StorageServer"
	Switch               ComputerSystemV1230HostingRole = "Switch"
	VirtualMachineServer ComputerSystemV1230HostingRole = "VirtualMachineServer"
)

// Defines values for ComputerSystemV1230IndicatorLED.
const (
	ComputerSystemV1230IndicatorLEDBlinking ComputerSystemV1230IndicatorLED = "Blinking"
	ComputerSystemV1230IndicatorLEDLit      ComputerSystemV1230IndicatorLED = "Lit"
	ComputerSystemV1230IndicatorLEDOff      ComputerSystemV1230IndicatorLED = "Off"
	ComputerSystemV1230IndicatorLEDUnknown  ComputerSystemV1230IndicatorLED = "Unknown"
)

// Defines values for ComputerSystemV1230InterfaceType.
const (
	TCM10 ComputerSystemV1230InterfaceType = "TCM1_0"
	TPM12 ComputerSystemV1230InterfaceType = "TPM1_2"
	TPM20 ComputerSystemV1230InterfaceType = "TPM2_0"
)

// Defines values for ComputerSystemV1230InterfaceTypeSelection.
const (
	ComputerSystemV1230InterfaceTypeSelectionBiosSetting    ComputerSystemV1230InterfaceTypeSelection = "BiosSetting"
	ComputerSystemV1230InterfaceTypeSelectionFirmwareUpdate ComputerSystemV1230InterfaceTypeSelection = "FirmwareUpdate"
	ComputerSystemV1230InterfaceTypeSelectionNone           ComputerSystemV1230InterfaceTypeSelection = "None"
	ComputerSystemV1230InterfaceTypeSelectionOemMethod      ComputerSystemV1230InterfaceTypeSelection = "OemMethod"
)

// Defines values for ComputerSystemV1230KMIPCachePolicy.
const (
	ComputerSystemV1230KMIPCachePolicyAfterFirstUse ComputerSystemV1230KMIPCachePolicy = "AfterFirstUse"
	ComputerSystemV1230KMIPCachePolicyNone          ComputerSystemV1230KMIPCachePolicy = "None"
)

// Defines values for ComputerSystemV1230LastResetCauses.
const (
	ManagementCommand  ComputerSystemV1230LastResetCauses = "ManagementCommand"
	OSSoftRestart      ComputerSystemV1230LastResetCauses = "OSSoftRestart"
	PowerButtonPress   ComputerSystemV1230LastResetCauses = "PowerButtonPress"
	PowerEvent         ComputerSystemV1230LastResetCauses = "PowerEvent"
	PowerRestorePolicy ComputerSystemV1230LastResetCauses = "PowerRestorePolicy"
	RTCWakeup          ComputerSystemV1230LastResetCauses = "RTCWakeup"
	SystemCrash        ComputerSystemV1230LastResetCauses = "SystemCrash"
	ThermalEvent       ComputerSystemV1230LastResetCauses = "ThermalEvent"
	Unknown            ComputerSystemV1230LastResetCauses = "Unknown"
	WatchdogExpiration ComputerSystemV1230LastResetCauses = "WatchdogExpiration"
)

// Defines values for ComputerSystemV1230MemoryMirroring.
const (
	ComputerSystemV1230MemoryMirroringDIMM   ComputerSystemV1230MemoryMirroring = "DIMM"
	ComputerSystemV1230MemoryMirroringHybrid ComputerSystemV1230MemoryMirroring = "Hybrid"
	ComputerSystemV1230MemoryMirroringNone   ComputerSystemV1230MemoryMirroring = "None"
	ComputerSystemV1230MemoryMirroringSystem ComputerSystemV1230MemoryMirroring = "System"
)

// Defines values for ComputerSystemV1230PowerMode.
const (
	ComputerSystemV1230PowerModeBalancedPerformance        ComputerSystemV1230PowerMode = "BalancedPerformance"
	ComputerSystemV1230PowerModeEfficiencyFavorPerformance ComputerSystemV1230PowerMode = "EfficiencyFavorPerformance"
	ComputerSystemV1230PowerModeEfficiencyFavorPower       ComputerSystemV1230PowerMode = "EfficiencyFavorPower"
	ComputerSystemV1230PowerModeMaximumPerformance         ComputerSystemV1230PowerMode = "MaximumPerformance"
	ComputerSystemV1230PowerModeOEM                        ComputerSystemV1230PowerMode = "OEM"
	ComputerSystemV1230PowerModeOSControlled               ComputerSystemV1230PowerMode = "OSControlled"
	ComputerSystemV1230PowerModePowerSaving                ComputerSystemV1230PowerMode = "PowerSaving"
	ComputerSystemV1230PowerModeStatic                     ComputerSystemV1230PowerMode = "Static"
)

// Defines values for ComputerSystemV1230PowerRestorePolicyTypes.
const (
	AlwaysOff ComputerSystemV1230PowerRestorePolicyTypes = "AlwaysOff"
	AlwaysOn  ComputerSystemV1230PowerRestorePolicyTypes = "AlwaysOn"
	LastState ComputerSystemV1230PowerRestorePolicyTypes = "LastState"
)

// Defines values for ComputerSystemV1230StopBootOnFault.
const (
	AnyFault ComputerSystemV1230StopBootOnFault = "AnyFault"
	Never    ComputerSystemV1230StopBootOnFault = "Never"
)

// Defines values for ComputerSystemV1230SystemType.
const (
	ComputerSystemV1230SystemTypeComposed              ComputerSystemV1230SystemType = "Composed"
	ComputerSystemV1230SystemTypeDPU                   ComputerSystemV1230SystemType = "DPU"
	ComputerSystemV1230SystemTypeOS                    ComputerSystemV1230SystemType = "OS"
	ComputerSystemV1230SystemTypePhysical              ComputerSystemV1230SystemType = "Physical"
	ComputerSystemV1230SystemTypePhysicallyPartitioned ComputerSystemV1230SystemType = "PhysicallyPartitioned"
	ComputerSystemV1230SystemTypeVirtual               ComputerSystemV1230SystemType = "Virtual"
	ComputerSystemV1230SystemTypeVirtuallyPartitioned  ComputerSystemV1230SystemType = "VirtuallyPartitioned"
)

// Defines values for ComputerSystemV1230TrustedModuleRequiredToBoot.
const (
	ComputerSystemV1230TrustedModuleRequiredToBootDisabled ComputerSystemV1230TrustedModuleRequiredToBoot = "Disabled"
	ComputerSystemV1230TrustedModuleRequiredToBootRequired ComputerSystemV1230TrustedModuleRequiredToBoot = "Required"
)

// Defines values for ComputerSystemV1230WatchdogTimeoutActions.
const (
	ComputerSystemV1230WatchdogTimeoutActionsNone        ComputerSystemV1230WatchdogTimeoutActions = "None"
	ComputerSystemV1230WatchdogTimeoutActionsOEM         ComputerSystemV1230WatchdogTimeoutActions = "OEM"
	ComputerSystemV1230WatchdogTimeoutActionsPowerCycle  ComputerSystemV1230WatchdogTimeoutActions = "PowerCycle"
	ComputerSystemV1230WatchdogTimeoutActionsPowerDown   ComputerSystemV1230WatchdogTimeoutActions = "PowerDown"
	ComputerSystemV1230WatchdogTimeoutActionsResetSystem ComputerSystemV1230WatchdogTimeoutActions = "ResetSystem"
)

// Defines values for ComputerSystemV1230WatchdogWarningActions.
const (
	ComputerSystemV1230WatchdogWarningActionsDiagnosticInterrupt ComputerSystemV1230WatchdogWarningActions = "DiagnosticInterrupt"
	ComputerSystemV1230WatchdogWarningActionsMessagingInterrupt  ComputerSystemV1230WatchdogWarningActions = "MessagingInterrupt"
	ComputerSystemV1230WatchdogWarningActionsNone                ComputerSystemV1230WatchdogWarningActions = "None"
	ComputerSystemV1230WatchdogWarningActionsOEM                 ComputerSystemV1230WatchdogWarningActions = "OEM"
	ComputerSystemV1230WatchdogWarningActionsSCI                 ComputerSystemV1230WatchdogWarningActions = "SCI"
	ComputerSystemV1230WatchdogWarningActionsSMI                 ComputerSystemV1230WatchdogWarningActions = "SMI"
)

// Defines values for DataStorageLoSCapabilitiesProvisioningPolicy.
const (
	Fixed DataStorageLoSCapabilitiesProvisioningPolicy = "Fixed"
	Thin  DataStorageLoSCapabilitiesProvisioningPolicy = "Thin"
)

// Defines values for DataStorageLoSCapabilitiesStorageAccessCapability.
const (
	Append    DataStorageLoSCapabilitiesStorageAccessCapability = "Append"
	Execute   DataStorageLoSCapabilitiesStorageAccessCapability = "Execute"
	Read      DataStorageLoSCapabilitiesStorageAccessCapability = "Read"
	Streaming DataStorageLoSCapabilitiesStorageAccessCapability = "Streaming"
	Write     DataStorageLoSCapabilitiesStorageAccessCapability = "Write"
	WriteOnce DataStorageLoSCapabilitiesStorageAccessCapability = "WriteOnce"
)

// Defines values for EthernetInterfaceV1122DHCPFallback.
const (
	EthernetInterfaceV1122DHCPFallbackAutoConfig EthernetInterfaceV1122DHCPFallback = "AutoConfig"
	EthernetInterfaceV1122DHCPFallbackNone       EthernetInterfaceV1122DHCPFallback = "None"
	EthernetInterfaceV1122DHCPFallbackStatic     EthernetInterfaceV1122DHCPFallback = "Static"
)

// Defines values for EthernetInterfaceV1122DHCPv6OperatingMode.
const (
	EthernetInterfaceV1122DHCPv6OperatingModeDisabled  EthernetInterfaceV1122DHCPv6OperatingMode = "Disabled"
	EthernetInterfaceV1122DHCPv6OperatingModeEnabled   EthernetInterfaceV1122DHCPv6OperatingMode = "Enabled"
	EthernetInterfaceV1122DHCPv6OperatingModeStateful  EthernetInterfaceV1122DHCPv6OperatingMode = "Stateful"
	EthernetInterfaceV1122DHCPv6OperatingModeStateless EthernetInterfaceV1122DHCPv6OperatingMode = "Stateless"
)

// Defines values for EthernetInterfaceV1122EthernetDeviceType.
const (
	EthernetInterfaceV1122EthernetDeviceTypePhysical EthernetInterfaceV1122EthernetDeviceType = "Physical"
	EthernetInterfaceV1122EthernetDeviceTypeVirtual  EthernetInterfaceV1122EthernetDeviceType = "Virtual"
)

// Defines values for EthernetInterfaceV1122LinkStatus.
const (
	LinkDown EthernetInterfaceV1122LinkStatus = "LinkDown"
	LinkUp   EthernetInterfaceV1122LinkStatus = "LinkUp"
	NoLink   EthernetInterfaceV1122LinkStatus = "NoLink"
)

// Defines values for EthernetInterfaceV1122RoutingScope.
const (
	External EthernetInterfaceV1122RoutingScope = "External"
	HostOnly EthernetInterfaceV1122RoutingScope = "HostOnly"
	Internal EthernetInterfaceV1122RoutingScope = "Internal"
	Limited  EthernetInterfaceV1122RoutingScope = "Limited"
)

// Defines values for EthernetInterfaceV1122TeamMode.
const (
	EthernetInterfaceV1122TeamModeActiveBackup                  EthernetInterfaceV1122TeamMode = "ActiveBackup"
	EthernetInterfaceV1122TeamModeAdaptiveLoadBalancing         EthernetInterfaceV1122TeamMode = "AdaptiveLoadBalancing"
	EthernetInterfaceV1122TeamModeAdaptiveTransmitLoadBalancing EthernetInterfaceV1122TeamMode = "AdaptiveTransmitLoadBalancing"
	EthernetInterfaceV1122TeamModeBroadcast                     EthernetInterfaceV1122TeamMode = "Broadcast"
	EthernetInterfaceV1122TeamModeIEEE8023ad                    EthernetInterfaceV1122TeamMode = "IEEE802_3ad"
	EthernetInterfaceV1122TeamModeNone                          EthernetInterfaceV1122TeamMode = "None"
	EthernetInterfaceV1122TeamModeRoundRobin                    EthernetInterfaceV1122TeamMode = "RoundRobin"
	EthernetInterfaceV1122TeamModeXOR                           EthernetInterfaceV1122TeamMode = "XOR"
)

// Defines values for FileShareV130QuotaType.
const (
	Hard FileShareV130QuotaType = "Hard"
	Soft FileShareV130QuotaType = "Soft"
)

// Defines values for FileSystemFileProtocol.
const (
	FileSystemFileProtocolNFSv3   FileSystemFileProtocol = "NFSv3"
	FileSystemFileProtocolNFSv40  FileSystemFileProtocol = "NFSv4_0"
	FileSystemFileProtocolNFSv41  FileSystemFileProtocol = "NFSv4_1"
	FileSystemFileProtocolSMBv20  FileSystemFileProtocol = "SMBv2_0"
	FileSystemFileProtocolSMBv21  FileSystemFileProtocol = "SMBv2_1"
	FileSystemFileProtocolSMBv30  FileSystemFileProtocol = "SMBv3_0"
	FileSystemFileProtocolSMBv302 FileSystemFileProtocol = "SMBv3_0_2"
	FileSystemFileProtocolSMBv311 FileSystemFileProtocol = "SMBv3_1_1"
)

// Defines values for FileSystemV141CharacterCodeSet.
const (
	ASCII            FileSystemV141CharacterCodeSet = "ASCII"
	ExtendedUNIXCode FileSystemV141CharacterCodeSet = "ExtendedUNIXCode"
	ISO2022          FileSystemV141CharacterCodeSet = "ISO2022"
	ISO88591         FileSystemV141CharacterCodeSet = "ISO8859_1"
	UCS2             FileSystemV141CharacterCodeSet = "UCS_2"
	UTF16            FileSystemV141CharacterCodeSet = "UTF_16"
	UTF8             FileSystemV141CharacterCodeSet = "UTF_8"
	Unicode          FileSystemV141CharacterCodeSet = "Unicode"
)

// Defines values for IPAddressesV115AddressState.
const (
	Deprecated IPAddressesV115AddressState = "Deprecated"
	Failed     IPAddressesV115AddressState = "Failed"
	Preferred  IPAddressesV115AddressState = "Preferred"
	Tentative  IPAddressesV115AddressState = "Tentative"
)

// Defines values for IPAddressesV115IPv4AddressOrigin.
const (
	IPAddressesV115IPv4AddressOriginBOOTP         IPAddressesV115IPv4AddressOrigin = "BOOTP"
	IPAddressesV115IPv4AddressOriginDHCP          IPAddressesV115IPv4AddressOrigin = "DHCP"
	IPAddressesV115IPv4AddressOriginIPv4LinkLocal IPAddressesV115IPv4AddressOrigin = "IPv4LinkLocal"
	IPAddressesV115IPv4AddressOriginStatic        IPAddressesV115IPv4AddressOrigin = "Static"
)

// Defines values for IPAddressesV115IPv6AddressOrigin.
const (
	IPAddressesV115IPv6AddressOriginDHCPv6    IPAddressesV115IPv6AddressOrigin = "DHCPv6"
	IPAddressesV115IPv6AddressOriginLinkLocal IPAddressesV115IPv6AddressOrigin = "LinkLocal"
	IPAddressesV115IPv6AddressOriginSLAAC     IPAddressesV115IPv6AddressOrigin = "SLAAC"
	IPAddressesV115IPv6AddressOriginStatic    IPAddressesV115IPv6AddressOrigin = "Static"
)

// Defines values for PCIeDevicePCIeTypes.
const (
	Gen1 PCIeDevicePCIeTypes = "Gen1"
	Gen2 PCIeDevicePCIeTypes = "Gen2"
	Gen3 PCIeDevicePCIeTypes = "Gen3"
	Gen4 PCIeDevicePCIeTypes = "Gen4"
	Gen5 PCIeDevicePCIeTypes = "Gen5"
	Gen6 PCIeDevicePCIeTypes = "Gen6"
)

// Defines values for ProtocolProtocol.
const (
	ProtocolProtocolAHCI            ProtocolProtocol = "AHCI"
	ProtocolProtocolCXL             ProtocolProtocol = "CXL"
	ProtocolProtocolDVI             ProtocolProtocol = "DVI"
	ProtocolProtocolDisplayPort     ProtocolProtocol = "DisplayPort"
	ProtocolProtocolEMMC            ProtocolProtocol = "eMMC"
	ProtocolProtocolEthernet        ProtocolProtocol = "Ethernet"
	ProtocolProtocolFC              ProtocolProtocol = "FC"
	ProtocolProtocolFCP             ProtocolProtocol = "FCP"
	ProtocolProtocolFCoE            ProtocolProtocol = "FCoE"
	ProtocolProtocolFICON           ProtocolProtocol = "FICON"
	ProtocolProtocolFTP             ProtocolProtocol = "FTP"
	ProtocolProtocolGenZ            ProtocolProtocol = "GenZ"
	ProtocolProtocolHDMI            ProtocolProtocol = "HDMI"
	ProtocolProtocolHTTP            ProtocolProtocol = "HTTP"
	ProtocolProtocolHTTPS           ProtocolProtocol = "HTTPS"
	ProtocolProtocolI2C             ProtocolProtocol = "I2C"
	ProtocolProtocolISCSI           ProtocolProtocol = "iSCSI"
	ProtocolProtocolIWARP           ProtocolProtocol = "iWARP"
	ProtocolProtocolInfiniBand      ProtocolProtocol = "InfiniBand"
	ProtocolProtocolMultiProtocol   ProtocolProtocol = "MultiProtocol"
	ProtocolProtocolNFSv3           ProtocolProtocol = "NFSv3"
	ProtocolProtocolNFSv4           ProtocolProtocol = "NFSv4"
	ProtocolProtocolNVLink          ProtocolProtocol = "NVLink"
	ProtocolProtocolNVMe            ProtocolProtocol = "NVMe"
	ProtocolProtocolNVMeOverFabrics ProtocolProtocol = "NVMeOverFabrics"
	ProtocolProtocolOEM             ProtocolProtocol = "OEM"
	ProtocolProtocolPCIe            ProtocolProtocol = "PCIe"
	ProtocolProtocolQPI             ProtocolProtocol = "QPI"
	ProtocolProtocolRoCE            ProtocolProtocol = "RoCE"
	ProtocolProtocolRoCEv2          ProtocolProtocol = "RoCEv2"
	ProtocolProtocolSAS             ProtocolProtocol = "SAS"
	ProtocolProtocolSATA            ProtocolProtocol = "SATA"
	ProtocolProtocolSFTP            ProtocolProtocol = "SFTP"
	ProtocolProtocolSMB             ProtocolProtocol = "SMB"
	ProtocolProtocolTCP             ProtocolProtocol = "TCP"
	ProtocolProtocolTFTP            ProtocolProtocol = "TFTP"
	ProtocolProtocolUDP             ProtocolProtocol = "UDP"
	ProtocolProtocolUHCI            ProtocolProtocol = "UHCI"
	ProtocolProtocolUPI             ProtocolProtocol = "UPI"
	ProtocolProtocolUSB             ProtocolProtocol = "USB"
	ProtocolProtocolVGA             ProtocolProtocol = "VGA"
)

// Defines values for RedundancyV142RedundancyMode.
const (
	Failover     RedundancyV142RedundancyMode = "Failover"
	NM           RedundancyV142RedundancyMode = "N+m"
	NotRedundant RedundancyV142RedundancyMode = "NotRedundant"
	Sharing      RedundancyV142RedundancyMode = "Sharing"
	Sparing      RedundancyV142RedundancyMode = "Sparing"
)

// Defines values for ResolutionStepV101ResolutionType.
const (
	ResolutionStepV101ResolutionTypeCollectDiagnosticData ResolutionStepV101ResolutionType = "CollectDiagnosticData"
	ResolutionStepV101ResolutionTypeContactVendor         ResolutionStepV101ResolutionType = "ContactVendor"
	ResolutionStepV101ResolutionTypeFirmwareUpdate        ResolutionStepV101ResolutionType = "FirmwareUpdate"
	ResolutionStepV101ResolutionTypeOEM                   ResolutionStepV101ResolutionType = "OEM"
	ResolutionStepV101ResolutionTypePowerCycle            ResolutionStepV101ResolutionType = "PowerCycle"
	ResolutionStepV101ResolutionTypeReplaceComponent      ResolutionStepV101ResolutionType = "ReplaceComponent"
	ResolutionStepV101ResolutionTypeReset                 ResolutionStepV101ResolutionType = "Reset"
	ResolutionStepV101ResolutionTypeResetToDefaults       ResolutionStepV101ResolutionType = "ResetToDefaults"
)

// Defines values for ResourceHealth.
const (
	Critical ResourceHealth = "Critical"
	OK       ResourceHealth = "OK"
	Warning  ResourceHealth = "Warning"
)

// Defines values for ResourcePowerState.
const (
	ResourcePowerStateOff         ResourcePowerState = "Off"
	ResourcePowerStateOn          ResourcePowerState = "On"
	ResourcePowerStatePaused      ResourcePowerState = "Paused"
	ResourcePowerStatePoweringOff ResourcePowerState = "PoweringOff"
	ResourcePowerStatePoweringOn  ResourcePowerState = "PoweringOn"
)

// Defines values for ResourceState.
const (
	ResourceStateAbsent             ResourceState = "Absent"
	ResourceStateDeferring          ResourceState = "Deferring"
	ResourceStateDegraded           ResourceState = "Degraded"
	ResourceStateDisabled           ResourceState = "Disabled"
	ResourceStateEnabled            ResourceState = "Enabled"
	ResourceStateInTest             ResourceState = "InTest"
	ResourceStateQualified          ResourceState = "Qualified"
	ResourceStateQuiesced           ResourceState = "Quiesced"
	ResourceStateStandbyOffline     ResourceState = "StandbyOffline"
	ResourceStateStandbySpare       ResourceState = "StandbySpare"
	ResourceStateStarting           ResourceState = "Starting"
	ResourceStateUnavailableOffline ResourceState = "UnavailableOffline"
	ResourceStateUpdating           ResourceState = "Updating"
)

// Defines values for ResourceV1200DurableNameFormat.
const (
	EUI        ResourceV1200DurableNameFormat = "EUI"
	FCWWN      ResourceV1200DurableNameFormat = "FC_WWN"
	GCXLID     ResourceV1200DurableNameFormat = "GCXLID"
	IQN        ResourceV1200DurableNameFormat = "iQN"
	MACAddress ResourceV1200DurableNameFormat = "MACAddress"
	NAA        ResourceV1200DurableNameFormat = "NAA"
	NGUID      ResourceV1200DurableNameFormat = "NGUID"
	NQN        ResourceV1200DurableNameFormat = "NQN"
	NSID       ResourceV1200DurableNameFormat = "NSID"
	UUID       ResourceV1200DurableNameFormat = "UUID"
)

// Defines values for ResourceV1200LocationType.
const (
	Backplane ResourceV1200LocationType = "Backplane"
	Bay       ResourceV1200LocationType = "Bay"
	Connector ResourceV1200LocationType = "Connector"
	Embedded  ResourceV1200LocationType = "Embedded"
	Slot      ResourceV1200LocationType = "Slot"
	Socket    ResourceV1200LocationType = "Socket"
)

// Defines values for ResourceV1200Orientation.
const (
	ResourceV1200OrientationBackToFront ResourceV1200Orientation = "BackToFront"
	ResourceV1200OrientationBottomToTop ResourceV1200Orientation = "BottomToTop"
	ResourceV1200OrientationFrontToBack ResourceV1200Orientation = "FrontToBack"
	ResourceV1200OrientationLeftToRight ResourceV1200Orientation = "LeftToRight"
	ResourceV1200OrientationRightToLeft ResourceV1200Orientation = "RightToLeft"
	ResourceV1200OrientationTopToBottom ResourceV1200Orientation = "TopToBottom"
)

// Defines values for ResourceV1200RackUnits.
const (
	EIA310 ResourceV1200RackUnits = "EIA_310"
	OpenU  ResourceV1200RackUnits = "OpenU"
)

// Defines values for ResourceV1200Reference.
const (
	Bottom ResourceV1200Reference = "Bottom"
	Front  ResourceV1200Reference = "Front"
	Left   ResourceV1200Reference = "Left"
	Middle ResourceV1200Reference = "Middle"
	Rear   ResourceV1200Reference = "Rear"
	Right  ResourceV1200Reference = "Right"
	Top    ResourceV1200Reference = "Top"
)

// Defines values for StoragePoolNVMePoolType.
const (
	EnduranceGroup StoragePoolNVMePoolType = "EnduranceGroup"
	NVMSet         StoragePoolNVMePoolType = "NVMSet"
)

// Defines values for StoragePoolPoolType.
const (
	StoragePoolPoolTypeBlock  StoragePoolPoolType = "Block"
	StoragePoolPoolTypeFile   StoragePoolPoolType = "File"
	StoragePoolPoolTypeObject StoragePoolPoolType = "Object"
	StoragePoolPoolTypePool   StoragePoolPoolType = "Pool"
)

// Defines values for StorageReplicaInfoReplicaFaultDomain.
const (
	Local  StorageReplicaInfoReplicaFaultDomain = "Local"
	Remote StorageReplicaInfoReplicaFaultDomain = "Remote"
)

// Defines values for StorageReplicaInfoReplicaType.
const (
	Clone          StorageReplicaInfoReplicaType = "Clone"
	Mirror         StorageReplicaInfoReplicaType = "Mirror"
	Snapshot       StorageReplicaInfoReplicaType = "Snapshot"
	TokenizedClone StorageReplicaInfoReplicaType = "TokenizedClone"
)

// Defines values for StorageReplicaInfoReplicaUpdateMode.
const (
	Active       StorageReplicaInfoReplicaUpdateMode = "Active"
	Adaptive     StorageReplicaInfoReplicaUpdateMode = "Adaptive"
	Asynchronous StorageReplicaInfoReplicaUpdateMode = "Asynchronous"
	Synchronous  StorageReplicaInfoReplicaUpdateMode = "Synchronous"
)

// Defines values for StorageReplicaInfoV140ConsistencyState.
const (
	Consistent   StorageReplicaInfoV140ConsistencyState = "Consistent"
	Inconsistent StorageReplicaInfoV140ConsistencyState = "Inconsistent"
)

// Defines values for StorageReplicaInfoV140ConsistencyStatus.
const (
	StorageReplicaInfoV140ConsistencyStatusConsistent StorageReplicaInfoV140ConsistencyStatus = "Consistent"
	StorageReplicaInfoV140ConsistencyStatusDisabled   StorageReplicaInfoV140ConsistencyStatus = "Disabled"
	StorageReplicaInfoV140ConsistencyStatusInError    StorageReplicaInfoV140ConsistencyStatus = "InError"
	StorageReplicaInfoV140ConsistencyStatusInProgress StorageReplicaInfoV140ConsistencyStatus = "InProgress"
)

// Defines values for StorageReplicaInfoV140ConsistencyType.
const (
	SequentiallyConsistent StorageReplicaInfoV140ConsistencyType = "SequentiallyConsistent"
)

// Defines values for StorageReplicaInfoV140ReplicaPriority.
const (
	High   StorageReplicaInfoV140ReplicaPriority = "High"
	Low    StorageReplicaInfoV140ReplicaPriority = "Low"
	Same   StorageReplicaInfoV140ReplicaPriority = "Same"
	Urgent StorageReplicaInfoV140ReplicaPriority = "Urgent"
)

// Defines values for StorageReplicaInfoV140ReplicaProgressStatus.
const (
	StorageReplicaInfoV140ReplicaProgressStatusAborting         StorageReplicaInfoV140ReplicaProgressStatus = "Aborting"
	StorageReplicaInfoV140ReplicaProgressStatusCompleted        StorageReplicaInfoV140ReplicaProgressStatus = "Completed"
	StorageReplicaInfoV140ReplicaProgressStatusDetaching        StorageReplicaInfoV140ReplicaProgressStatus = "Detaching"
	StorageReplicaInfoV140ReplicaProgressStatusDormant          StorageReplicaInfoV140ReplicaProgressStatus = "Dormant"
	StorageReplicaInfoV140ReplicaProgressStatusFailingBack      StorageReplicaInfoV140ReplicaProgressStatus = "FailingBack"
	StorageReplicaInfoV140ReplicaProgressStatusFailingOver      StorageReplicaInfoV140ReplicaProgressStatus = "FailingOver"
	StorageReplicaInfoV140ReplicaProgressStatusFracturing       StorageReplicaInfoV140ReplicaProgressStatus = "Fracturing"
	StorageReplicaInfoV140ReplicaProgressStatusInitializing     StorageReplicaInfoV140ReplicaProgressStatus = "Initializing"
	StorageReplicaInfoV140ReplicaProgressStatusMixed            StorageReplicaInfoV140ReplicaProgressStatus = "Mixed"
	StorageReplicaInfoV140ReplicaProgressStatusPending          StorageReplicaInfoV140ReplicaProgressStatus = "Pending"
	StorageReplicaInfoV140ReplicaProgressStatusPreparing        StorageReplicaInfoV140ReplicaProgressStatus = "Preparing"
	StorageReplicaInfoV140ReplicaProgressStatusRequiresActivate StorageReplicaInfoV140ReplicaProgressStatus = "RequiresActivate"
	StorageReplicaInfoV140ReplicaProgressStatusRequiresDetach   StorageReplicaInfoV140ReplicaProgressStatus = "RequiresDetach"
	StorageReplicaInfoV140ReplicaProgressStatusRequiresFracture StorageReplicaInfoV140ReplicaProgressStatus = "RequiresFracture"
	StorageReplicaInfoV140ReplicaProgressStatusRequiresResume   StorageReplicaInfoV140ReplicaProgressStatus = "RequiresResume"
	StorageReplicaInfoV140ReplicaProgressStatusRequiresResync   StorageReplicaInfoV140ReplicaProgressStatus = "RequiresResync"
	StorageReplicaInfoV140ReplicaProgressStatusRequiresSplit    StorageReplicaInfoV140ReplicaProgressStatus = "RequiresSplit"
	StorageReplicaInfoV140ReplicaProgressStatusRestoring        StorageReplicaInfoV140ReplicaProgressStatus = "Restoring"
	StorageReplicaInfoV140ReplicaProgressStatusResyncing        StorageReplicaInfoV140ReplicaProgressStatus = "Resyncing"
	StorageReplicaInfoV140ReplicaProgressStatusSplitting        StorageReplicaInfoV140ReplicaProgressStatus = "Splitting"
	StorageReplicaInfoV140ReplicaProgressStatusSuspending       StorageReplicaInfoV140ReplicaProgressStatus = "Suspending"
	StorageReplicaInfoV140ReplicaProgressStatusSynchronizing    StorageReplicaInfoV140ReplicaProgressStatus = "Synchronizing"
	StorageReplicaInfoV140ReplicaProgressStatusTerminating      StorageReplicaInfoV140ReplicaProgressStatus = "Terminating"
)

// Defines values for StorageReplicaInfoV140ReplicaReadOnlyAccess.
const (
	StorageReplicaInfoV140ReplicaReadOnlyAccessBoth           StorageReplicaInfoV140ReplicaReadOnlyAccess = "Both"
	StorageReplicaInfoV140ReplicaReadOnlyAccessReplicaElement StorageReplicaInfoV140ReplicaReadOnlyAccess = "ReplicaElement"
	StorageReplicaInfoV140ReplicaReadOnlyAccessSourceElement  StorageReplicaInfoV140ReplicaReadOnlyAccess = "SourceElement"
)

// Defines values for StorageReplicaInfoV140ReplicaRecoveryMode.
const (
	StorageReplicaInfoV140ReplicaRecoveryModeAutomatic StorageReplicaInfoV140ReplicaRecoveryMode = "Automatic"
	StorageReplicaInfoV140ReplicaRecoveryModeManual    StorageReplicaInfoV140ReplicaRecoveryMode = "Manual"
)

// Defines values for StorageReplicaInfoV140ReplicaRole.
const (
	Source StorageReplicaInfoV140ReplicaRole = "Source"
	Target StorageReplicaInfoV140ReplicaRole = "Target"
)

// Defines values for StorageReplicaInfoV140ReplicaState.
const (
	StorageReplicaInfoV140ReplicaStateAborted        StorageReplicaInfoV140ReplicaState = "Aborted"
	StorageReplicaInfoV140ReplicaStateBroken         StorageReplicaInfoV140ReplicaState = "Broken"
	StorageReplicaInfoV140ReplicaStateFailedover     StorageReplicaInfoV140ReplicaState = "Failedover"
	StorageReplicaInfoV140ReplicaStateFractured      StorageReplicaInfoV140ReplicaState = "Fractured"
	StorageReplicaInfoV140ReplicaStateInactive       StorageReplicaInfoV140ReplicaState = "Inactive"
	StorageReplicaInfoV140ReplicaStateInitialized    StorageReplicaInfoV140ReplicaState = "Initialized"
	StorageReplicaInfoV140ReplicaStateInvalid        StorageReplicaInfoV140ReplicaState = "Invalid"
	StorageReplicaInfoV140ReplicaStateMixed          StorageReplicaInfoV140ReplicaState = "Mixed"
	StorageReplicaInfoV140ReplicaStatePartitioned    StorageReplicaInfoV140ReplicaState = "Partitioned"
	StorageReplicaInfoV140ReplicaStatePrepared       StorageReplicaInfoV140ReplicaState = "Prepared"
	StorageReplicaInfoV140ReplicaStateRestored       StorageReplicaInfoV140ReplicaState = "Restored"
	StorageReplicaInfoV140ReplicaStateSkewed         StorageReplicaInfoV140ReplicaState = "Skewed"
	StorageReplicaInfoV140ReplicaStateSplit          StorageReplicaInfoV140ReplicaState = "Split"
	StorageReplicaInfoV140ReplicaStateSuspended      StorageReplicaInfoV140ReplicaState = "Suspended"
	StorageReplicaInfoV140ReplicaStateSynchronized   StorageReplicaInfoV140ReplicaState = "Synchronized"
	StorageReplicaInfoV140ReplicaStateUnsynchronized StorageReplicaInfoV140ReplicaState = "Unsynchronized"
)

// Defines values for StorageReplicaInfoV140UndiscoveredElement.
const (
	StorageReplicaInfoV140UndiscoveredElementReplicaElement StorageReplicaInfoV140UndiscoveredElement = "ReplicaElement"
	StorageReplicaInfoV140UndiscoveredElementSourceElement  StorageReplicaInfoV140UndiscoveredElement = "SourceElement"
)

// Defines values for StorageV1151AutoVolumeCreate.
const (
	StorageV1151AutoVolumeCreateDisabled StorageV1151AutoVolumeCreate = "Disabled"
	StorageV1151AutoVolumeCreateNonRAID  StorageV1151AutoVolumeCreate = "NonRAID"
	StorageV1151AutoVolumeCreateRAID0    StorageV1151AutoVolumeCreate = "RAID0"
	StorageV1151AutoVolumeCreateRAID1    StorageV1151AutoVolumeCreate = "RAID1"
)

// Defines values for StorageV1151EncryptionMode.
const (
	StorageV1151EncryptionModeDisabled       StorageV1151EncryptionMode = "Disabled"
	StorageV1151EncryptionModeUseExternalKey StorageV1151EncryptionMode = "UseExternalKey"
	StorageV1151EncryptionModeUseLocalKey    StorageV1151EncryptionMode = "UseLocalKey"
)

// Defines values for StorageV1151HotspareActivationPolicy.
const (
	StorageV1151HotspareActivationPolicyOEM                     StorageV1151HotspareActivationPolicy = "OEM"
	StorageV1151HotspareActivationPolicyOnDriveFailure          StorageV1151HotspareActivationPolicy = "OnDriveFailure"
	StorageV1151HotspareActivationPolicyOnDrivePredictedFailure StorageV1151HotspareActivationPolicy = "OnDrivePredictedFailure"
)

// Defines values for VolumeEncryptionTypes.
const (
	ControllerAssisted    VolumeEncryptionTypes = "ControllerAssisted"
	NativeDriveEncryption VolumeEncryptionTypes = "NativeDriveEncryption"
	SoftwareAssisted      VolumeEncryptionTypes = "SoftwareAssisted"
)

// Defines values for VolumeInitializeMethod.
const (
	Background VolumeInitializeMethod = "Background"
	Foreground VolumeInitializeMethod = "Foreground"
	Skip       VolumeInitializeMethod = "Skip"
)

// Defines values for VolumeLBAFormatType.
const (
	LBAFormat0  VolumeLBAFormatType = "LBAFormat0"
	LBAFormat1  VolumeLBAFormatType = "LBAFormat1"
	LBAFormat10 VolumeLBAFormatType = "LBAFormat10"
	LBAFormat11 VolumeLBAFormatType = "LBAFormat11"
	LBAFormat12 VolumeLBAFormatType = "LBAFormat12"
	LBAFormat13 VolumeLBAFormatType = "LBAFormat13"
	LBAFormat14 VolumeLBAFormatType = "LBAFormat14"
	LBAFormat15 VolumeLBAFormatType = "LBAFormat15"
	LBAFormat2  VolumeLBAFormatType = "LBAFormat2"
	LBAFormat3  VolumeLBAFormatType = "LBAFormat3"
	LBAFormat4  VolumeLBAFormatType = "LBAFormat4"
	LBAFormat5  VolumeLBAFormatType = "LBAFormat5"
	LBAFormat6  VolumeLBAFormatType = "LBAFormat6"
	LBAFormat7  VolumeLBAFormatType = "LBAFormat7"
	LBAFormat8  VolumeLBAFormatType = "LBAFormat8"
	LBAFormat9  VolumeLBAFormatType = "LBAFormat9"
)

// Defines values for VolumeLBARelativePerformanceType.
const (
	VolumeLBARelativePerformanceTypeBest     VolumeLBARelativePerformanceType = "Best"
	VolumeLBARelativePerformanceTypeBetter   VolumeLBARelativePerformanceType = "Better"
	VolumeLBARelativePerformanceTypeDegraded VolumeLBARelativePerformanceType = "Degraded"
	VolumeLBARelativePerformanceTypeGood     VolumeLBARelativePerformanceType = "Good"
)

// Defines values for VolumeNamespaceType.
const (
	Block         VolumeNamespaceType = "Block"
	Computational VolumeNamespaceType = "Computational"
	KeyValue      VolumeNamespaceType = "KeyValue"
	ZNS           VolumeNamespaceType = "ZNS"
)

// Defines values for VolumeOperationType.
const (
	ChangeRAIDType   VolumeOperationType = "ChangeRAIDType"
	ChangeStripSize  VolumeOperationType = "ChangeStripSize"
	CheckConsistency VolumeOperationType = "CheckConsistency"
	Compress         VolumeOperationType = "Compress"
	Decrypt          VolumeOperationType = "Decrypt"
	Deduplicate      VolumeOperationType = "Deduplicate"
	Delete           VolumeOperationType = "Delete"
	Encrypt          VolumeOperationType = "Encrypt"
	Format           VolumeOperationType = "Format"
	Initialize       VolumeOperationType = "Initialize"
	Rebuild          VolumeOperationType = "Rebuild"
	Replicate        VolumeOperationType = "Replicate"
	Resize           VolumeOperationType = "Resize"
	Sanitize         VolumeOperationType = "Sanitize"
)

// Defines values for VolumeRAIDType.
const (
	VolumeRAIDTypeNone         VolumeRAIDType = "None"
	VolumeRAIDTypeRAID0        VolumeRAIDType = "RAID0"
	VolumeRAIDTypeRAID00       VolumeRAIDType = "RAID00"
	VolumeRAIDTypeRAID01       VolumeRAIDType = "RAID01"
	VolumeRAIDTypeRAID1        VolumeRAIDType = "RAID1"
	VolumeRAIDTypeRAID10       VolumeRAIDType = "RAID10"
	VolumeRAIDTypeRAID10E      VolumeRAIDType = "RAID10E"
	VolumeRAIDTypeRAID10Triple VolumeRAIDType = "RAID10Triple"
	VolumeRAIDTypeRAID1E       VolumeRAIDType = "RAID1E"
	VolumeRAIDTypeRAID1Triple  VolumeRAIDType = "RAID1Triple"
	VolumeRAIDTypeRAID3        VolumeRAIDType = "RAID3"
	VolumeRAIDTypeRAID4        VolumeRAIDType = "RAID4"
	VolumeRAIDTypeRAID5        VolumeRAIDType = "RAID5"
	VolumeRAIDTypeRAID50       VolumeRAIDType = "RAID50"
	VolumeRAIDTypeRAID6        VolumeRAIDType = "RAID6"
	VolumeRAIDTypeRAID60       VolumeRAIDType = "RAID60"
	VolumeRAIDTypeRAID6TP      VolumeRAIDType = "RAID6TP"
)

// Defines values for VolumeReadCachePolicyType.
const (
	VolumeReadCachePolicyTypeAdaptiveReadAhead VolumeReadCachePolicyType = "AdaptiveReadAhead"
	VolumeReadCachePolicyTypeOff               VolumeReadCachePolicyType = "Off"
	VolumeReadCachePolicyTypeReadAhead         VolumeReadCachePolicyType = "ReadAhead"
)

// Defines values for VolumeVolumeType.
const (
	Mirrored                 VolumeVolumeType = "Mirrored"
	NonRedundant             VolumeVolumeType = "NonRedundant"
	RawDevice                VolumeVolumeType = "RawDevice"
	SpannedMirrors           VolumeVolumeType = "SpannedMirrors"
	SpannedStripesWithParity VolumeVolumeType = "SpannedStripesWithParity"
	StripedWithParity        VolumeVolumeType = "StripedWithParity"
)

// Defines values for VolumeVolumeUsageType.
const (
	CacheOnly          VolumeVolumeUsageType = "CacheOnly"
	Data               VolumeVolumeUsageType = "Data"
	ReplicationReserve VolumeVolumeUsageType = "ReplicationReserve"
	SystemData         VolumeVolumeUsageType = "SystemData"
	SystemReserve      VolumeVolumeUsageType = "SystemReserve"
)

// Defines values for VolumeWriteCachePolicyType.
const (
	VolumeWriteCachePolicyTypeOff                  VolumeWriteCachePolicyType = "Off"
	VolumeWriteCachePolicyTypeProtectedWriteBack   VolumeWriteCachePolicyType = "ProtectedWriteBack"
	VolumeWriteCachePolicyTypeUnprotectedWriteBack VolumeWriteCachePolicyType = "UnprotectedWriteBack"
	VolumeWriteCachePolicyTypeWriteThrough         VolumeWriteCachePolicyType = "WriteThrough"
)

// Defines values for VolumeWriteCacheStateType.
const (
	VolumeWriteCacheStateTypeDegraded    VolumeWriteCacheStateType = "Degraded"
	VolumeWriteCacheStateTypeProtected   VolumeWriteCacheStateType = "Protected"
	VolumeWriteCacheStateTypeUnprotected VolumeWriteCacheStateType = "Unprotected"
)

// Defines values for VolumeWriteHoleProtectionPolicyType.
const (
	VolumeWriteHoleProtectionPolicyTypeDistributedLog VolumeWriteHoleProtectionPolicyType = "DistributedLog"
	VolumeWriteHoleProtectionPolicyTypeJournaling     VolumeWriteHoleProtectionPolicyType = "Journaling"
	VolumeWriteHoleProtectionPolicyTypeOem            VolumeWriteHoleProtectionPolicyType = "Oem"
	VolumeWriteHoleProtectionPolicyTypeOff            VolumeWriteHoleProtectionPolicyType = "Off"
)

// ActionInfoV142ParameterTypes defines model for ActionInfo_v1_4_2_ParameterTypes.
type ActionInfoV142ParameterTypes string

// ActionInfoV142Parameters The information about a parameter included in a Redfish action for this resource.
type ActionInfoV142Parameters struct {
	// AllowableNumbers The allowable numeric values or duration values, inclusive ranges of values, and incremental step values for this parameter as applied to this action target.
	AllowableNumbers *[]string `json:"AllowableNumbers,omitempty"`

	// AllowablePattern The allowable pattern for this parameter as applied to this action target.
	AllowablePattern *string `json:"AllowablePattern"`

	// AllowableValueDescriptions Descriptions of allowable values for this parameter.
	AllowableValueDescriptions *[]string `json:"AllowableValueDescriptions,omitempty"`

	// AllowableValues The allowable values for this parameter as applied to this action target.
	AllowableValues *[]string `json:"AllowableValues,omitempty"`

	// ArraySizeMaximum The maximum number of array elements allowed for this parameter.
	ArraySizeMaximum *int64 `json:"ArraySizeMaximum"`

	// ArraySizeMinimum The minimum number of array elements required for this parameter.
	ArraySizeMinimum *int64 `json:"ArraySizeMinimum"`

	// DataType The JSON property type for this parameter.
	DataType *ActionInfoV142Parameters_DataType `json:"DataType,omitempty"`

	// MaximumValue The maximum supported value for this parameter.
	MaximumValue *float32 `json:"MaximumValue"`

	// MinimumValue The minimum supported value for this parameter.
	MinimumValue *float32 `json:"MinimumValue"`

	// Name The name of the parameter for this action.
	Name *string `json:"Name,omitempty"`

	// ObjectDataType The data type of an object-based parameter.
	ObjectDataType *string `json:"ObjectDataType"`

	// Required An indication of whether the parameter is required to complete this action.
	Required *bool `json:"Required,omitempty"`
}

// ActionInfoV142ParametersDataType1 defines model for .
type ActionInfoV142ParametersDataType1 = interface{}

// ActionInfoV142Parameters_DataType The JSON property type for this parameter.
type ActionInfoV142Parameters_DataType struct {
	union json.RawMessage
}

// CapacityV100Capacity This is the schema definition for the Capacity of a device. It represents the properties for capacity for any data store.
type CapacityV100Capacity struct {
	// Data The capacity of specific data type in a data store.
	Data *CapacityV100CapacityInfo `json:"Data,omitempty"`

	// IsThinProvisioned Marks that the capacity is not necessarily fully allocated.
	IsThinProvisioned *bool `json:"IsThinProvisioned"`

	// Metadata The capacity of specific data type in a data store.
	Metadata *CapacityV100CapacityInfo `json:"Metadata,omitempty"`

	// Snapshot The capacity of specific data type in a data store.
	Snapshot *CapacityV100CapacityInfo `json:"Snapshot,omitempty"`
}

// CapacityV100CapacityInfo The capacity of specific data type in a data store.
type CapacityV100CapacityInfo struct {
	// AllocatedBytes The number of bytes currently allocated by the storage system in this data store for this data type.
	AllocatedBytes *int64 `json:"AllocatedBytes"`

	// ConsumedBytes The number of bytes consumed in this data store for this data type.
	ConsumedBytes *int64 `json:"ConsumedBytes"`

	// GuaranteedBytes The number of bytes the storage system guarantees can be allocated in this data store for this data type.
	GuaranteedBytes *int64 `json:"GuaranteedBytes"`

	// ProvisionedBytes The maximum number of bytes that can be allocated in this data store for this data type.
	ProvisionedBytes *int64 `json:"ProvisionedBytes"`
}

// CapacityV121Actions The available actions for this resource.
type CapacityV121Actions struct {
	// Oem The available OEM specific actions for this resource.
	Oem *CapacityV121OemActions `json:"Oem,omitempty"`
}

// CapacityV121Capacity This is the schema definition for the Capacity of a device. It represents the properties for capacity for any data store.
type CapacityV121Capacity struct {
	// Data The capacity of specific data type in a data store.
	Data *CapacityV121CapacityInfo `json:"Data,omitempty"`

	// IsThinProvisioned Marks that the capacity is not necessarily fully allocated.
	IsThinProvisioned *bool `json:"IsThinProvisioned"`

	// Metadata The capacity of specific data type in a data store.
	Metadata *CapacityV121CapacityInfo `json:"Metadata,omitempty"`

	// Snapshot The capacity of specific data type in a data store.
	Snapshot *CapacityV121CapacityInfo `json:"Snapshot,omitempty"`
}

// CapacityV121CapacityInfo The capacity of specific data type in a data store.
type CapacityV121CapacityInfo struct {
	// AllocatedBytes The number of bytes currently allocated by the storage system in this data store for this data type.
	AllocatedBytes *int64 `json:"AllocatedBytes"`

	// ConsumedBytes The number of bytes consumed in this data store for this data type.
	ConsumedBytes *int64 `json:"ConsumedBytes"`

	// GuaranteedBytes The number of bytes the storage system guarantees can be allocated in this data store for this data type.
	GuaranteedBytes *int64 `json:"GuaranteedBytes"`

	// ProvisionedBytes The maximum number of bytes that can be allocated in this data store for this data type.
	ProvisionedBytes *int64 `json:"ProvisionedBytes"`
}

// CapacityV121CapacitySource A description of the type and source of storage.
type CapacityV121CapacitySource struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Actions The available actions for this resource.
	Actions     *CapacityV121Actions                    `json:"Actions,omitempty"`
	Description *CapacityV121CapacitySource_Description `json:"Description,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// ProvidedCapacity This is the schema definition for the Capacity of a device. It represents the properties for capacity for any data store.
	ProvidedCapacity *CapacityV121Capacity `json:"ProvidedCapacity,omitempty"`

	// ProvidedClassOfService A reference to a resource.
	ProvidedClassOfService *OdataV4IdRef `json:"ProvidedClassOfService,omitempty"`

	// ProvidingDrives A reference to a resource.
	ProvidingDrives *OdataV4IdRef `json:"ProvidingDrives,omitempty"`

	// ProvidingMemory A reference to a resource.
	ProvidingMemory *OdataV4IdRef `json:"ProvidingMemory,omitempty"`

	// ProvidingMemoryChunks A reference to a resource.
	ProvidingMemoryChunks *OdataV4IdRef `json:"ProvidingMemoryChunks,omitempty"`

	// ProvidingPools A reference to a resource.
	ProvidingPools *OdataV4IdRef `json:"ProvidingPools,omitempty"`

	// ProvidingVolumes A reference to a resource.
	ProvidingVolumes *OdataV4IdRef `json:"ProvidingVolumes,omitempty"`
}

// CapacityV121CapacitySourceDescription1 defines model for .
type CapacityV121CapacitySourceDescription1 = interface{}

// CapacityV121CapacitySource_Description defines model for CapacityV121CapacitySource.Description.
type CapacityV121CapacitySource_Description struct {
	union json.RawMessage
}

// CapacityV121OemActions The available OEM specific actions for this resource.
type CapacityV121OemActions map[string]interface{}

// Chassis The Chassis schema represents the physical components of a system.  This resource represents the sheet-metal confined spaces and logical zones such as racks, enclosures, chassis and all other containers.  Subsystems, such as sensors, that operate outside of a system's data plane are linked either directly or indirectly through this resource.  A subsystem that operates outside of a system's data plane are not accessible to software that runs on the system.  It also describes the location, such as a slot, socket, or bay, where a unit can be installed, by populating a resource instance with an absent state if a unit is not present.
type Chassis = ChassisV1250Chassis

// ChassisV1250Actions The available actions for this resource.
type ChassisV1250Actions struct {
	// HashChassisReset This action resets the chassis.  Additionally, it could reset systems or other contained resources depending on the ResetType used to invoke this action.
	HashChassisReset *ChassisV1250Reset `json:"#Chassis.Reset,omitempty"`

	// Oem The available OEM-specific actions for this resource.
	Oem *ChassisV1250OemActions `json:"Oem,omitempty"`
}

// ChassisV1250Chassis The Chassis schema represents the physical components of a system.  This resource represents the sheet-metal confined spaces and logical zones such as racks, enclosures, chassis and all other containers.  Subsystems, such as sensors, that operate outside of a system's data plane are linked either directly or indirectly through this resource.  A subsystem that operates outside of a system's data plane are not accessible to software that runs on the system.  It also describes the location, such as a slot, socket, or bay, where a unit can be installed, by populating a resource instance with an absent state if a unit is not present.
type ChassisV1250Chassis struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Actions The available actions for this resource.
	Actions *ChassisV1250Actions `json:"Actions,omitempty"`

	// Assembly A reference to a resource.
	Assembly *OdataV4IdRef `json:"Assembly,omitempty"`

	// AssetTag The user-assigned asset tag of this chassis.
	AssetTag *string `json:"AssetTag"`

	// Certificates A reference to a resource.
	Certificates *OdataV4IdRef           `json:"Certificates,omitempty"`
	ChassisType  ChassisV1250ChassisType `json:"ChassisType"`

	// Controls A reference to a resource.
	Controls *OdataV4IdRef `json:"Controls,omitempty"`

	// DepthMm The depth of the chassis.
	DepthMm *float32 `json:"DepthMm"`

	// Description The description of this resource.  Used for commonality in the schema definitions.
	Description *ResourceDescription `json:"Description,omitempty"`

	// Doors The doors or access panels of the chassis.
	Doors *ChassisV1250Doors `json:"Doors,omitempty"`

	// Drives A reference to a resource.
	Drives *OdataV4IdRef `json:"Drives,omitempty"`

	// ElectricalSourceManagerURIs The URIs of the management interfaces for the external electrical source connections for this chassis.
	ElectricalSourceManagerURIs *[]string `json:"ElectricalSourceManagerURIs,omitempty"`

	// ElectricalSourceNames The names of the external electrical sources, such as circuits or outlets, connected to this chassis.
	ElectricalSourceNames *[]string `json:"ElectricalSourceNames,omitempty"`

	// EnvironmentMetrics A reference to a resource.
	EnvironmentMetrics *OdataV4IdRef                   `json:"EnvironmentMetrics,omitempty"`
	EnvironmentalClass *ChassisV1250EnvironmentalClass `json:"EnvironmentalClass,omitempty"`

	// FabricAdapters A reference to a resource.
	FabricAdapters *OdataV4IdRef `json:"FabricAdapters,omitempty"`

	// HeatingCoolingEquipmentNames The names of the external heating or cooling equipment, such as coolant distribution units, connected to this chassis.
	HeatingCoolingEquipmentNames *[]string `json:"HeatingCoolingEquipmentNames,omitempty"`

	// HeatingCoolingManagerURIs The URIs of the management interfaces for the external heating or cooling equipment for this chassis.
	HeatingCoolingManagerURIs *[]string `json:"HeatingCoolingManagerURIs,omitempty"`

	// HeightMm The height of the chassis.
	HeightMm *float32 `json:"HeightMm"`

	// HotPluggable An indication of whether this component can be inserted or removed while the equipment is in operation.
	HotPluggable *bool `json:"HotPluggable"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id           ResourceId                `json:"Id"`
	IndicatorLED *ChassisV1250IndicatorLED `json:"IndicatorLED,omitempty"`

	// Links The links to other resources that are related to this resource.
	Links *ChassisV1250Links `json:"Links,omitempty"`

	// Location The location of a resource.
	Location *ResourceV1200Location `json:"Location,omitempty"`

	// LocationIndicatorActive An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive"`

	// LogServices A reference to a resource.
	LogServices *OdataV4IdRef `json:"LogServices,omitempty"`

	// Manufacturer The manufacturer of this chassis.
	Manufacturer *string `json:"Manufacturer"`

	// MaxPowerWatts The upper bound of the total power consumed by the chassis.
	MaxPowerWatts *float32 `json:"MaxPowerWatts"`

	// Measurements An array of DSP0274-defined measurement blocks.
	// Deprecated:
	Measurements *[]SoftwareInventoryV1102MeasurementBlock `json:"Measurements,omitempty"`

	// MediaControllers A reference to a resource.
	MediaControllers *OdataV4IdRef `json:"MediaControllers,omitempty"`

	// Memory A reference to a resource.
	Memory *OdataV4IdRef `json:"Memory,omitempty"`

	// MemoryDomains A reference to a resource.
	MemoryDomains *OdataV4IdRef `json:"MemoryDomains,omitempty"`

	// MinPowerWatts The lower bound of the total power consumed by the chassis.
	MinPowerWatts *float32 `json:"MinPowerWatts"`

	// Model The model number of the chassis.
	Model *string `json:"Model"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// NetworkAdapters A reference to a resource.
	NetworkAdapters *OdataV4IdRef `json:"NetworkAdapters,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PCIeDevices A reference to a resource.
	PCIeDevices *OdataV4IdRef `json:"PCIeDevices,omitempty"`

	// PCIeSlots A reference to a resource.
	PCIeSlots *OdataV4IdRef `json:"PCIeSlots,omitempty"`

	// PartNumber The part number of the chassis.
	PartNumber *string `json:"PartNumber"`

	// PhysicalSecurity The physical security state of the chassis.
	PhysicalSecurity *ChassisV1250PhysicalSecurity `json:"PhysicalSecurity,omitempty"`

	// Power A reference to a resource.
	Power      *OdataV4IdRef       `json:"Power,omitempty"`
	PowerState *ResourcePowerState `json:"PowerState,omitempty"`

	// PowerSubsystem A reference to a resource.
	PowerSubsystem *OdataV4IdRef `json:"PowerSubsystem,omitempty"`

	// PoweredByParent Indicates that the chassis receives power from the containing chassis.
	PoweredByParent *bool `json:"PoweredByParent"`

	// Processors A reference to a resource.
	Processors *OdataV4IdRef `json:"Processors,omitempty"`

	// Replaceable An indication of whether this component can be independently replaced as allowed by the vendor's replacement policy.
	Replaceable *bool `json:"Replaceable"`

	// SKU The SKU of the chassis.
	SKU *string `json:"SKU"`

	// Sensors A reference to a resource.
	Sensors *OdataV4IdRef `json:"Sensors,omitempty"`

	// SerialNumber The serial number of the chassis.
	SerialNumber *string `json:"SerialNumber"`

	// SparePartNumber The spare part number of the chassis.
	SparePartNumber *string `json:"SparePartNumber"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// Thermal A reference to a resource.
	Thermal          *OdataV4IdRef                 `json:"Thermal,omitempty"`
	ThermalDirection *ChassisV1250ThermalDirection `json:"ThermalDirection,omitempty"`

	// ThermalManagedByParent Indicates that the chassis is thermally managed by the parent chassis.
	ThermalManagedByParent *bool `json:"ThermalManagedByParent"`

	// ThermalSubsystem A reference to a resource.
	ThermalSubsystem *OdataV4IdRef `json:"ThermalSubsystem,omitempty"`

	// TrustedComponents A reference to a resource.
	TrustedComponents *OdataV4IdRef `json:"TrustedComponents,omitempty"`
	UUID              *ResourceUUID `json:"UUID,omitempty"`

	// Version The hardware version of this chassis.
	Version *string `json:"Version"`

	// WeightKg The weight of the chassis.
	WeightKg *float32 `json:"WeightKg"`

	// WidthMm The width of the chassis.
	WidthMm *float32 `json:"WidthMm"`
}

// ChassisV1250ChassisType defines model for Chassis_v1_25_0_ChassisType.
type ChassisV1250ChassisType string

// ChassisV1250Door A door or access panel on the chassis.
type ChassisV1250Door struct {
	DoorState *ChassisV1250DoorState `json:"DoorState,omitempty"`

	// Locked Indicates if the door is locked.
	Locked *bool `json:"Locked"`

	// UserLabel A user-assigned label.
	UserLabel *string `json:"UserLabel,omitempty"`
}

// ChassisV1250DoorState defines model for Chassis_v1_25_0_DoorState.
type ChassisV1250DoorState string

// ChassisV1250Doors The doors or access panels of the chassis.
type ChassisV1250Doors struct {
	// Front A door or access panel on the chassis.
	Front *ChassisV1250Door `json:"Front,omitempty"`

	// Rear A door or access panel on the chassis.
	Rear *ChassisV1250Door `json:"Rear,omitempty"`
}

// ChassisV1250EnvironmentalClass defines model for Chassis_v1_25_0_EnvironmentalClass.
type ChassisV1250EnvironmentalClass string

// ChassisV1250IndicatorLED defines model for Chassis_v1_25_0_IndicatorLED.
type ChassisV1250IndicatorLED string

// ChassisV1250IntrusionSensor defines model for Chassis_v1_25_0_IntrusionSensor.
type ChassisV1250IntrusionSensor string

// ChassisV1250IntrusionSensorReArm defines model for Chassis_v1_25_0_IntrusionSensorReArm.
type ChassisV1250IntrusionSensorReArm string

// ChassisV1250Links The links to other resources that are related to this resource.
type ChassisV1250Links struct {
	// Cables An array of links to the cables connected to this chassis.
	Cables *[]OdataV4IdRef `json:"Cables,omitempty"`

	// CablesOdataCount The number of items in a collection.
	CablesOdataCount *OdataV4Count `json:"Cables@odata.count,omitempty"`

	// ComputerSystems An array of links to the computer systems that this chassis directly and wholly contains.
	ComputerSystems *[]OdataV4IdRef `json:"ComputerSystems,omitempty"`

	// ComputerSystemsOdataCount The number of items in a collection.
	ComputerSystemsOdataCount *OdataV4Count `json:"ComputerSystems@odata.count,omitempty"`

	// ConnectedCoolingLoops An array of links to cooling loops connected to this chassis.
	ConnectedCoolingLoops *[]OdataV4IdRef `json:"ConnectedCoolingLoops,omitempty"`

	// ConnectedCoolingLoopsOdataCount The number of items in a collection.
	ConnectedCoolingLoopsOdataCount *OdataV4Count `json:"ConnectedCoolingLoops@odata.count,omitempty"`

	// ContainedBy A reference to a resource.
	ContainedBy *OdataV4IdRef `json:"ContainedBy,omitempty"`

	// Contains An array of links to any other chassis that this chassis has in it.
	Contains *[]OdataV4IdRef `json:"Contains,omitempty"`

	// ContainsOdataCount The number of items in a collection.
	ContainsOdataCount *OdataV4Count `json:"Contains@odata.count,omitempty"`

	// CooledBy An array of links to resources or objects that cool this chassis.  Normally, the link is for either a chassis or a specific set of fans.
	// Deprecated:
	CooledBy *[]OdataV4IdRef `json:"CooledBy,omitempty"`

	// CooledByOdataCount The number of items in a collection.
	CooledByOdataCount *OdataV4Count `json:"CooledBy@odata.count,omitempty"`

	// CoolingUnits An array of links to cooling unit functionality contained in this chassis.
	CoolingUnits *[]OdataV4IdRef `json:"CoolingUnits,omitempty"`

	// CoolingUnitsOdataCount The number of items in a collection.
	CoolingUnitsOdataCount *OdataV4Count `json:"CoolingUnits@odata.count,omitempty"`

	// Drives An array of links to the drives located in this chassis.
	Drives *[]OdataV4IdRef `json:"Drives,omitempty"`

	// DrivesOdataCount The number of items in a collection.
	DrivesOdataCount *OdataV4Count `json:"Drives@odata.count,omitempty"`

	// Facility A reference to a resource.
	Facility *OdataV4IdRef `json:"Facility,omitempty"`

	// Fans An array of links to the fans that cool this chassis.
	Fans *[]OdataV4IdRef `json:"Fans,omitempty"`

	// FansOdataCount The number of items in a collection.
	FansOdataCount *OdataV4Count `json:"Fans@odata.count,omitempty"`

	// ManagedBy An array of links to the managers responsible for managing this chassis.
	ManagedBy *[]OdataV4IdRef `json:"ManagedBy,omitempty"`

	// ManagedByOdataCount The number of items in a collection.
	ManagedByOdataCount *OdataV4Count `json:"ManagedBy@odata.count,omitempty"`

	// ManagersInChassis An array of links to the managers located in this chassis.
	ManagersInChassis *[]OdataV4IdRef `json:"ManagersInChassis,omitempty"`

	// ManagersInChassisOdataCount The number of items in a collection.
	ManagersInChassisOdataCount *OdataV4Count `json:"ManagersInChassis@odata.count,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PCIeDevices An array of links to the PCIe devices located in this chassis.
	// Deprecated:
	PCIeDevices *[]OdataV4IdRef `json:"PCIeDevices,omitempty"`

	// PCIeDevicesOdataCount The number of items in a collection.
	PCIeDevicesOdataCount *OdataV4Count `json:"PCIeDevices@odata.count,omitempty"`

	// PowerDistribution A reference to a resource.
	PowerDistribution *OdataV4IdRef `json:"PowerDistribution,omitempty"`

	// PowerOutlets An array of links to the outlets that provide power to this chassis.
	PowerOutlets *[]OdataV4IdRef `json:"PowerOutlets,omitempty"`

	// PowerOutletsOdataCount The number of items in a collection.
	PowerOutletsOdataCount *OdataV4Count `json:"PowerOutlets@odata.count,omitempty"`

	// PowerSupplies An array of links to the power supplies that provide power to this chassis.
	PowerSupplies *[]OdataV4IdRef `json:"PowerSupplies,omitempty"`

	// PowerSuppliesOdataCount The number of items in a collection.
	PowerSuppliesOdataCount *OdataV4Count `json:"PowerSupplies@odata.count,omitempty"`

	// PoweredBy An array of links to resources or objects that power this chassis.  Normally, the link is for either a chassis or a specific set of power supplies.
	// Deprecated:
	PoweredBy *[]OdataV4IdRef `json:"PoweredBy,omitempty"`

	// PoweredByOdataCount The number of items in a collection.
	PoweredByOdataCount *OdataV4Count `json:"PoweredBy@odata.count,omitempty"`

	// Processors An array of links to the processors located in this chassis.
	Processors *[]OdataV4IdRef `json:"Processors,omitempty"`

	// ProcessorsOdataCount The number of items in a collection.
	ProcessorsOdataCount *OdataV4Count `json:"Processors@odata.count,omitempty"`

	// ResourceBlocks An array of links to the resource blocks located in this chassis.
	ResourceBlocks *[]OdataV4IdRef `json:"ResourceBlocks,omitempty"`

	// ResourceBlocksOdataCount The number of items in a collection.
	ResourceBlocksOdataCount *OdataV4Count `json:"ResourceBlocks@odata.count,omitempty"`

	// Storage An array of links to the storage subsystems connected to or inside this chassis.
	Storage *[]OdataV4IdRef `json:"Storage,omitempty"`

	// StorageOdataCount The number of items in a collection.
	StorageOdataCount *OdataV4Count `json:"Storage@odata.count,omitempty"`

	// Switches An array of links to the switches located in this chassis.
	Switches *[]OdataV4IdRef `json:"Switches,omitempty"`

	// SwitchesOdataCount The number of items in a collection.
	SwitchesOdataCount *OdataV4Count `json:"Switches@odata.count,omitempty"`
}

// ChassisV1250OemActions The available OEM-specific actions for this resource.
type ChassisV1250OemActions map[string]interface{}

// ChassisV1250PhysicalSecurity The physical security state of the chassis.
type ChassisV1250PhysicalSecurity struct {
	IntrusionSensor *ChassisV1250IntrusionSensor `json:"IntrusionSensor,omitempty"`

	// IntrusionSensorNumber A numerical identifier to represent the physical security sensor.
	// Deprecated:
	IntrusionSensorNumber *int64                            `json:"IntrusionSensorNumber"`
	IntrusionSensorReArm  *ChassisV1250IntrusionSensorReArm `json:"IntrusionSensorReArm,omitempty"`
}

// ChassisV1250Reset This action resets the chassis.  Additionally, it could reset systems or other contained resources depending on the ResetType used to invoke this action.
type ChassisV1250Reset struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// ChassisV1250ThermalDirection defines model for Chassis_v1_25_0_ThermalDirection.
type ChassisV1250ThermalDirection string

// ComputerSystem The `ComputerSystem` schema represents a computer or system instance and the software-visible resources, or items within the data plane, such as memory, CPU, and other devices that it can access.  Details of those resources or subsystems are also linked through this resource.
type ComputerSystem = ComputerSystemV1230ComputerSystem

// ComputerSystemCollection The collection of `ComputerSystem` resource instances.
type ComputerSystemCollection = ComputerSystemCollectionComputerSystemCollection

// ComputerSystemCollectionComputerSystemCollection The collection of `ComputerSystem` resource instances.
type ComputerSystemCollectionComputerSystemCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType   *OdataV4Type                                                  `json:"@odata.type,omitempty"`
	Description *ComputerSystemCollectionComputerSystemCollection_Description `json:"Description,omitempty"`

	// Members The members of this collection.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// ComputerSystemCollectionComputerSystemCollectionDescription1 defines model for .
type ComputerSystemCollectionComputerSystemCollectionDescription1 = interface{}

// ComputerSystemCollectionComputerSystemCollection_Description defines model for ComputerSystemCollectionComputerSystemCollection.Description.
type ComputerSystemCollectionComputerSystemCollection_Description struct {
	union json.RawMessage
}

// ComputerSystemBootSource defines model for ComputerSystem_BootSource.
type ComputerSystemBootSource string

// ComputerSystemV1230Actions The available actions for this resource.
type ComputerSystemV1230Actions struct {
	// HashComputerSystemAddResourceBlock This action adds a resource block to a system.
	HashComputerSystemAddResourceBlock *ComputerSystemV1230AddResourceBlock `json:"#ComputerSystem.AddResourceBlock,omitempty"`

	// HashComputerSystemDecommission This action decommissions a system.
	HashComputerSystemDecommission *ComputerSystemV1230Decommission `json:"#ComputerSystem.Decommission,omitempty"`

	// HashComputerSystemRemoveResourceBlock This action removes a resource block from a system.
	HashComputerSystemRemoveResourceBlock *ComputerSystemV1230RemoveResourceBlock `json:"#ComputerSystem.RemoveResourceBlock,omitempty"`

	// HashComputerSystemReset This action resets the system.
	HashComputerSystemReset *ComputerSystemV1230Reset `json:"#ComputerSystem.Reset,omitempty"`

	// HashComputerSystemSetDefaultBootOrder This action sets the `BootOrder` property to the default settings.
	HashComputerSystemSetDefaultBootOrder *ComputerSystemV1230SetDefaultBootOrder `json:"#ComputerSystem.SetDefaultBootOrder,omitempty"`

	// Oem The available OEM-specific actions for this resource.
	Oem *ComputerSystemV1230OemActions `json:"Oem,omitempty"`
}

// ComputerSystemV1230AddResourceBlock This action adds a resource block to a system.
type ComputerSystemV1230AddResourceBlock struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// ComputerSystemV1230AutomaticRetryConfig defines model for ComputerSystem_v1_23_0_AutomaticRetryConfig.
type ComputerSystemV1230AutomaticRetryConfig string

// ComputerSystemV1230Boot The boot information for this resource.
type ComputerSystemV1230Boot struct {
	// AliasBootOrder Ordered array of boot source aliases representing the persistent boot order associated with this computer system.
	AliasBootOrder *[]ComputerSystemV1230Boot_AliasBootOrder_Item `json:"AliasBootOrder,omitempty"`

	// AutomaticRetryAttempts The number of attempts the system will automatically retry booting.
	AutomaticRetryAttempts *int64 `json:"AutomaticRetryAttempts"`

	// AutomaticRetryConfig The configuration of how the system retries booting automatically.
	AutomaticRetryConfig *ComputerSystemV1230Boot_AutomaticRetryConfig `json:"AutomaticRetryConfig,omitempty"`

	// BootNext The `BootOptionReference` of the Boot Option to perform a one-time boot from when `BootSourceOverrideTarget` is `UefiBootNext`.
	BootNext *string `json:"BootNext"`

	// BootOptions A reference to a resource.
	BootOptions *OdataV4IdRef `json:"BootOptions,omitempty"`

	// BootOrder An array of `BootOptionReference` strings that represent the persistent boot order for with this computer system.  Changes to the boot order typically require a system reset before they take effect.  It is likely that a client finds the `@Redfish.Settings` term in this resource, and if it is found, the client makes requests to change boot order settings by modifying the resource identified by the `@Redfish.Settings` term.
	BootOrder *[]string `json:"BootOrder,omitempty"`

	// BootOrderPropertySelection The name of the boot order property that the system uses for the persistent boot order.
	BootOrderPropertySelection *ComputerSystemV1230Boot_BootOrderPropertySelection `json:"BootOrderPropertySelection,omitempty"`

	// BootSourceOverrideEnabled The state of the boot source override feature.
	BootSourceOverrideEnabled *ComputerSystemV1230Boot_BootSourceOverrideEnabled `json:"BootSourceOverrideEnabled,omitempty"`

	// BootSourceOverrideMode The BIOS boot mode to use when the system boots from the `BootSourceOverrideTarget` boot source.
	BootSourceOverrideMode *ComputerSystemV1230Boot_BootSourceOverrideMode `json:"BootSourceOverrideMode,omitempty"`

	// BootSourceOverrideTarget The current boot source to use at the next boot instead of the normal boot device, if `BootSourceOverrideEnabled` does not contain `Disabled`.
	BootSourceOverrideTarget *ComputerSystemV1230Boot_BootSourceOverrideTarget `json:"BootSourceOverrideTarget,omitempty"`

	// Certificates A reference to a resource.
	Certificates *OdataV4IdRef `json:"Certificates,omitempty"`

	// HttpBootUri The URI to boot from when `BootSourceOverrideTarget` is set to `UefiHttp`.
	HttpBootUri *string `json:"HttpBootUri"`

	// RemainingAutomaticRetryAttempts The number of remaining automatic retry boots.
	RemainingAutomaticRetryAttempts *int64 `json:"RemainingAutomaticRetryAttempts"`

	// StopBootOnFault If the boot should stop on a fault.
	StopBootOnFault *ComputerSystemV1230Boot_StopBootOnFault `json:"StopBootOnFault,omitempty"`

	// TrustedModuleRequiredToBoot The Trusted Module boot requirement.
	TrustedModuleRequiredToBoot *ComputerSystemV1230Boot_TrustedModuleRequiredToBoot `json:"TrustedModuleRequiredToBoot,omitempty"`

	// UefiTargetBootSourceOverride The UEFI device path of the device from which to boot when `BootSourceOverrideTarget` is `UefiTarget`.
	UefiTargetBootSourceOverride *string `json:"UefiTargetBootSourceOverride"`
}

// ComputerSystemV1230BootAliasBootOrder1 defines model for .
type ComputerSystemV1230BootAliasBootOrder1 = interface{}

// ComputerSystemV1230Boot_AliasBootOrder_Item defines model for ComputerSystem_v1_23_0_Boot.AliasBootOrder.Item.
type ComputerSystemV1230Boot_AliasBootOrder_Item struct {
	union json.RawMessage
}

// ComputerSystemV1230BootAutomaticRetryConfig1 defines model for .
type ComputerSystemV1230BootAutomaticRetryConfig1 = interface{}

// ComputerSystemV1230Boot_AutomaticRetryConfig The configuration of how the system retries booting automatically.
type ComputerSystemV1230Boot_AutomaticRetryConfig struct {
	union json.RawMessage
}

// ComputerSystemV1230BootBootOrderPropertySelection1 defines model for .
type ComputerSystemV1230BootBootOrderPropertySelection1 = interface{}

// ComputerSystemV1230Boot_BootOrderPropertySelection The name of the boot order property that the system uses for the persistent boot order.
type ComputerSystemV1230Boot_BootOrderPropertySelection struct {
	union json.RawMessage
}

// ComputerSystemV1230BootBootSourceOverrideEnabled1 defines model for .
type ComputerSystemV1230BootBootSourceOverrideEnabled1 = interface{}

// ComputerSystemV1230Boot_BootSourceOverrideEnabled The state of the boot source override feature.
type ComputerSystemV1230Boot_BootSourceOverrideEnabled struct {
	union json.RawMessage
}

// ComputerSystemV1230BootBootSourceOverrideMode1 defines model for .
type ComputerSystemV1230BootBootSourceOverrideMode1 = interface{}

// ComputerSystemV1230Boot_BootSourceOverrideMode The BIOS boot mode to use when the system boots from the `BootSourceOverrideTarget` boot source.
type ComputerSystemV1230Boot_BootSourceOverrideMode struct {
	union json.RawMessage
}

// ComputerSystemV1230BootBootSourceOverrideTarget1 defines model for .
type ComputerSystemV1230BootBootSourceOverrideTarget1 = interface{}

// ComputerSystemV1230Boot_BootSourceOverrideTarget The current boot source to use at the next boot instead of the normal boot device, if `BootSourceOverrideEnabled` does not contain `Disabled`.
type ComputerSystemV1230Boot_BootSourceOverrideTarget struct {
	union json.RawMessage
}

// ComputerSystemV1230BootStopBootOnFault1 defines model for .
type ComputerSystemV1230BootStopBootOnFault1 = interface{}

// ComputerSystemV1230Boot_StopBootOnFault If the boot should stop on a fault.
type ComputerSystemV1230Boot_StopBootOnFault struct {
	union json.RawMessage
}

// ComputerSystemV1230BootTrustedModuleRequiredToBoot1 defines model for .
type ComputerSystemV1230BootTrustedModuleRequiredToBoot1 = interface{}

// ComputerSystemV1230Boot_TrustedModuleRequiredToBoot The Trusted Module boot requirement.
type ComputerSystemV1230Boot_TrustedModuleRequiredToBoot struct {
	union json.RawMessage
}

// ComputerSystemV1230BootOrderTypes The enumerations of `BootOrderTypes` specify the choice of boot order property to use when controller the persistent boot order for this computer system.
type ComputerSystemV1230BootOrderTypes string

// ComputerSystemV1230BootProgress This object describes the last boot progress state.
type ComputerSystemV1230BootProgress struct {
	// LastBootTimeSeconds The number of seconds the system spent booting to the operating system during the last boot.
	LastBootTimeSeconds *float32 `json:"LastBootTimeSeconds"`

	// LastState The last boot progress state.
	LastState *ComputerSystemV1230BootProgress_LastState `json:"LastState,omitempty"`

	// LastStateTime The date and time when the last boot state was updated.
	LastStateTime *time.Time `json:"LastStateTime"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// OemLastState The OEM-specific last state, if the LastState type is `OEM`.
	OemLastState *string `json:"OemLastState"`
}

// ComputerSystemV1230BootProgressLastState1 defines model for .
type ComputerSystemV1230BootProgressLastState1 = interface{}

// ComputerSystemV1230BootProgress_LastState The last boot progress state.
type ComputerSystemV1230BootProgress_LastState struct {
	union json.RawMessage
}

// ComputerSystemV1230BootProgressTypes defines model for ComputerSystem_v1_23_0_BootProgressTypes.
type ComputerSystemV1230BootProgressTypes string

// ComputerSystemV1230BootSourceOverrideEnabled defines model for ComputerSystem_v1_23_0_BootSourceOverrideEnabled.
type ComputerSystemV1230BootSourceOverrideEnabled string

// ComputerSystemV1230BootSourceOverrideMode defines model for ComputerSystem_v1_23_0_BootSourceOverrideMode.
type ComputerSystemV1230BootSourceOverrideMode string

// ComputerSystemV1230Composition Information about the composition capabilities and state of a computer system.
type ComputerSystemV1230Composition struct {
	// UseCases The composition use cases in which this computer system can participate.
	UseCases *[]ComputerSystemV1230Composition_UseCases_Item `json:"UseCases,omitempty"`
}

// ComputerSystemV1230CompositionUseCases1 defines model for .
type ComputerSystemV1230CompositionUseCases1 = interface{}

// ComputerSystemV1230Composition_UseCases_Item defines model for ComputerSystem_v1_23_0_Composition.UseCases.Item.
type ComputerSystemV1230Composition_UseCases_Item struct {
	union json.RawMessage
}

// ComputerSystemV1230CompositionUseCase defines model for ComputerSystem_v1_23_0_CompositionUseCase.
type ComputerSystemV1230CompositionUseCase string

// ComputerSystemV1230ComputerSystem The `ComputerSystem` schema represents a computer or system instance and the software-visible resources, or items within the data plane, such as memory, CPU, and other devices that it can access.  Details of those resources or subsystems are also linked through this resource.
type ComputerSystemV1230ComputerSystem struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Actions The available actions for this resource.
	Actions *ComputerSystemV1230Actions `json:"Actions,omitempty"`

	// AssetTag The user-definable tag that can track this computer system for inventory or other client purposes.
	AssetTag *string `json:"AssetTag"`

	// Bios A reference to a resource.
	Bios *OdataV4IdRef `json:"Bios,omitempty"`

	// BiosVersion The version of the system BIOS or primary system firmware.
	BiosVersion *string `json:"BiosVersion"`

	// Boot The boot information for this resource.
	Boot *ComputerSystemV1230Boot `json:"Boot,omitempty"`

	// BootProgress This object describes the last boot progress state.
	BootProgress *ComputerSystemV1230ComputerSystem_BootProgress `json:"BootProgress,omitempty"`

	// Certificates A reference to a resource.
	Certificates *OdataV4IdRef `json:"Certificates,omitempty"`

	// Composition Information about the composition capabilities and state of the computer system.
	Composition *ComputerSystemV1230ComputerSystem_Composition `json:"Composition,omitempty"`
	Description *ComputerSystemV1230ComputerSystem_Description `json:"Description,omitempty"`

	// EthernetInterfaces A reference to a resource.
	EthernetInterfaces *OdataV4IdRef `json:"EthernetInterfaces,omitempty"`

	// FabricAdapters A reference to a resource.
	FabricAdapters *OdataV4IdRef `json:"FabricAdapters,omitempty"`

	// GraphicalConsole The information about a graphical console service for this system.
	GraphicalConsole *ComputerSystemV1230HostGraphicalConsole `json:"GraphicalConsole,omitempty"`

	// GraphicsControllers A reference to a resource.
	GraphicsControllers *OdataV4IdRef `json:"GraphicsControllers,omitempty"`

	// HostName The DNS host name, without any domain information.
	HostName *string `json:"HostName"`

	// HostWatchdogTimer This type describes the host watchdog timer functionality for this system.
	HostWatchdogTimer *ComputerSystemV1230WatchdogTimer `json:"HostWatchdogTimer,omitempty"`

	// HostedServices The services that might be running or installed on the system.
	HostedServices *ComputerSystemV1230HostedServices `json:"HostedServices,omitempty"`

	// HostingRoles The hosting roles that this computer system supports.
	HostingRoles *[]ComputerSystemV1230HostingRole `json:"HostingRoles,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// IdlePowerSaver The idle power saver settings of the computer system.
	IdlePowerSaver *ComputerSystemV1230ComputerSystem_IdlePowerSaver `json:"IdlePowerSaver,omitempty"`

	// IndicatorLED The state of the indicator LED, which identifies the system.
	// Deprecated:
	IndicatorLED *ComputerSystemV1230ComputerSystem_IndicatorLED `json:"IndicatorLED,omitempty"`

	// KeyManagement The key management settings of the computer system.
	KeyManagement  *ComputerSystemV1230ComputerSystem_KeyManagement `json:"KeyManagement,omitempty"`
	LastResetCause *ComputerSystemV1230LastResetCauses              `json:"LastResetCause,omitempty"`

	// LastResetTime The date and time when the system was last reset or rebooted.
	LastResetTime *time.Time `json:"LastResetTime,omitempty"`

	// Links The links to other resources that are related to this resource.
	Links *ComputerSystemV1230Links `json:"Links,omitempty"`

	// LocationIndicatorActive An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive"`

	// LogServices A reference to a resource.
	LogServices *OdataV4IdRef `json:"LogServices,omitempty"`

	// Manufacturer The manufacturer or OEM of this system.
	Manufacturer *string `json:"Manufacturer"`

	// ManufacturingMode An indication of whether the system is in manufacturing mode.  Manufacturing mode is a special boot mode, not normally available to end users, that modifies features and settings for use while the system is being manufactured and tested.
	ManufacturingMode *bool `json:"ManufacturingMode"`

	// Measurements An array of DSP0274-defined measurement blocks.
	// Deprecated:
	Measurements *[]SoftwareInventoryV1102MeasurementBlock `json:"Measurements,omitempty"`

	// Memory A reference to a resource.
	Memory *OdataV4IdRef `json:"Memory,omitempty"`

	// MemoryDomains A reference to a resource.
	MemoryDomains *OdataV4IdRef `json:"MemoryDomains,omitempty"`

	// MemorySummary The memory of the system in general detail.
	MemorySummary *ComputerSystemV1230MemorySummary `json:"MemorySummary,omitempty"`

	// Model The product name for this system, without the manufacturer name.
	Model *string `json:"Model"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// NetworkInterfaces A reference to a resource.
	NetworkInterfaces *OdataV4IdRef `json:"NetworkInterfaces,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// OperatingSystem A reference to a resource.
	OperatingSystem *OdataV4IdRef `json:"OperatingSystem,omitempty"`

	// PCIeDevices The link to a collection of PCIe devices that this computer system uses.
	PCIeDevices *[]OdataV4IdRef `json:"PCIeDevices,omitempty"`

	// PCIeDevicesOdataCount The number of items in a collection.
	PCIeDevicesOdataCount *OdataV4Count `json:"PCIeDevices@odata.count,omitempty"`

	// PCIeFunctions The link to a collection of PCIe functions that this computer system uses.
	PCIeFunctions *[]OdataV4IdRef `json:"PCIeFunctions,omitempty"`

	// PCIeFunctionsOdataCount The number of items in a collection.
	PCIeFunctionsOdataCount *OdataV4Count `json:"PCIeFunctions@odata.count,omitempty"`

	// PartNumber The part number for this system.
	PartNumber *string `json:"PartNumber"`

	// PowerCycleDelaySeconds The number of seconds to delay power on after a `Reset` action requesting `PowerCycle`.  Zero seconds indicates no delay.
	PowerCycleDelaySeconds *float32 `json:"PowerCycleDelaySeconds"`

	// PowerMode The power mode setting of the computer system.
	PowerMode *ComputerSystemV1230ComputerSystem_PowerMode `json:"PowerMode,omitempty"`

	// PowerOffDelaySeconds The number of seconds to delay power off during a reset.  Zero seconds indicates no delay to power off.
	PowerOffDelaySeconds *float32 `json:"PowerOffDelaySeconds"`

	// PowerOnDelaySeconds The number of seconds to delay power on after a power cycle or during a reset.  Zero seconds indicates no delay to power up.
	PowerOnDelaySeconds *float32 `json:"PowerOnDelaySeconds"`

	// PowerRestorePolicy The enumerations of `PowerRestorePolicyTypes` specify the choice of power state for the system when power is applied.
	PowerRestorePolicy *ComputerSystemV1230PowerRestorePolicyTypes `json:"PowerRestorePolicy,omitempty"`

	// PowerState The current power state of the system.
	PowerState *ComputerSystemV1230ComputerSystem_PowerState `json:"PowerState,omitempty"`

	// ProcessorSummary The central processors of the system in general detail.
	ProcessorSummary *ComputerSystemV1230ProcessorSummary `json:"ProcessorSummary,omitempty"`

	// Processors A reference to a resource.
	Processors *OdataV4IdRef `json:"Processors,omitempty"`

	// Redundancy The link to a collection of redundancy entities.  Each entity specifies a kind and level of redundancy and a collection, or redundancy set, of other computer systems that provide the specified redundancy to this computer system.
	Redundancy *[]RedundancyV142Redundancy `json:"Redundancy,omitempty"`

	// RedundancyOdataCount The number of items in a collection.
	RedundancyOdataCount *OdataV4Count `json:"Redundancy@odata.count,omitempty"`

	// SKU The manufacturer SKU for this system.
	SKU *string `json:"SKU"`

	// SecureBoot A reference to a resource.
	SecureBoot *OdataV4IdRef `json:"SecureBoot,omitempty"`

	// SerialConsole The information about the serial console services that this system provides.
	SerialConsole *ComputerSystemV1230HostSerialConsole `json:"SerialConsole,omitempty"`

	// SerialNumber The serial number for this system.
	SerialNumber *string `json:"SerialNumber"`

	// SimpleStorage A reference to a resource.
	SimpleStorage *OdataV4IdRef `json:"SimpleStorage,omitempty"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// Storage A reference to a resource.
	Storage *OdataV4IdRef `json:"Storage,omitempty"`

	// SubModel The sub-model for this system.
	SubModel   *string                        `json:"SubModel"`
	SystemType *ComputerSystemV1230SystemType `json:"SystemType,omitempty"`

	// TrustedModules An array of trusted modules in the system.
	// Deprecated:
	TrustedModules *[]ComputerSystemV1230TrustedModules `json:"TrustedModules,omitempty"`

	// USBControllers A reference to a resource.
	USBControllers *OdataV4IdRef `json:"USBControllers,omitempty"`

	// UUID The UUID for this system.
	UUID *ComputerSystemV1230ComputerSystem_UUID `json:"UUID,omitempty"`

	// VirtualMedia A reference to a resource.
	VirtualMedia *OdataV4IdRef `json:"VirtualMedia,omitempty"`

	// VirtualMediaConfig The information about virtual media service for this system.
	VirtualMediaConfig *ComputerSystemV1230VirtualMediaConfig `json:"VirtualMediaConfig,omitempty"`
}

// ComputerSystemV1230ComputerSystemBootProgress1 defines model for .
type ComputerSystemV1230ComputerSystemBootProgress1 = interface{}

// ComputerSystemV1230ComputerSystem_BootProgress This object describes the last boot progress state.
type ComputerSystemV1230ComputerSystem_BootProgress struct {
	union json.RawMessage
}

// ComputerSystemV1230ComputerSystemComposition1 defines model for .
type ComputerSystemV1230ComputerSystemComposition1 = interface{}

// ComputerSystemV1230ComputerSystem_Composition Information about the composition capabilities and state of the computer system.
type ComputerSystemV1230ComputerSystem_Composition struct {
	union json.RawMessage
}

// ComputerSystemV1230ComputerSystemDescription1 defines model for .
type ComputerSystemV1230ComputerSystemDescription1 = interface{}

// ComputerSystemV1230ComputerSystem_Description defines model for ComputerSystemV1230ComputerSystem.Description.
type ComputerSystemV1230ComputerSystem_Description struct {
	union json.RawMessage
}

// ComputerSystemV1230ComputerSystemIdlePowerSaver1 defines model for .
type ComputerSystemV1230ComputerSystemIdlePowerSaver1 = interface{}

// ComputerSystemV1230ComputerSystem_IdlePowerSaver The idle power saver settings of the computer system.
type ComputerSystemV1230ComputerSystem_IdlePowerSaver struct {
	union json.RawMessage
}

// ComputerSystemV1230ComputerSystemIndicatorLED1 defines model for .
type ComputerSystemV1230ComputerSystemIndicatorLED1 = interface{}

// ComputerSystemV1230ComputerSystem_IndicatorLED The state of the indicator LED, which identifies the system.
type ComputerSystemV1230ComputerSystem_IndicatorLED struct {
	union json.RawMessage
}

// ComputerSystemV1230ComputerSystemKeyManagement1 defines model for .
type ComputerSystemV1230ComputerSystemKeyManagement1 = interface{}

// ComputerSystemV1230ComputerSystem_KeyManagement The key management settings of the computer system.
type ComputerSystemV1230ComputerSystem_KeyManagement struct {
	union json.RawMessage
}

// ComputerSystemV1230ComputerSystemPowerMode1 defines model for .
type ComputerSystemV1230ComputerSystemPowerMode1 = interface{}

// ComputerSystemV1230ComputerSystem_PowerMode The power mode setting of the computer system.
type ComputerSystemV1230ComputerSystem_PowerMode struct {
	union json.RawMessage
}

// ComputerSystemV1230ComputerSystemPowerState1 defines model for .
type ComputerSystemV1230ComputerSystemPowerState1 = interface{}

// ComputerSystemV1230ComputerSystem_PowerState The current power state of the system.
type ComputerSystemV1230ComputerSystem_PowerState struct {
	union json.RawMessage
}

// ComputerSystemV1230ComputerSystemUUID1 defines model for .
type ComputerSystemV1230ComputerSystemUUID1 = interface{}

// ComputerSystemV1230ComputerSystem_UUID The UUID for this system.
type ComputerSystemV1230ComputerSystem_UUID struct {
	union json.RawMessage
}

// ComputerSystemV1230Decommission This action decommissions a system.
type ComputerSystemV1230Decommission struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// ComputerSystemV1230GraphicalConnectTypesSupported defines model for ComputerSystem_v1_23_0_GraphicalConnectTypesSupported.
type ComputerSystemV1230GraphicalConnectTypesSupported string

// ComputerSystemV1230HostGraphicalConsole The information about a graphical console service for this system.
type ComputerSystemV1230HostGraphicalConsole struct {
	// ConnectTypesSupported This property enumerates the graphical console connection types that the implementation allows.
	ConnectTypesSupported *[]ComputerSystemV1230GraphicalConnectTypesSupported `json:"ConnectTypesSupported,omitempty"`

	// MaxConcurrentSessions The maximum number of service sessions, regardless of protocol, that this system can support.
	MaxConcurrentSessions *int64 `json:"MaxConcurrentSessions,omitempty"`

	// Port The protocol port.
	Port *int64 `json:"Port"`

	// ServiceEnabled An indication of whether the service is enabled for this system.
	ServiceEnabled *bool `json:"ServiceEnabled,omitempty"`
}

// ComputerSystemV1230HostSerialConsole The information about the serial console services that this system provides.
type ComputerSystemV1230HostSerialConsole struct {
	// IPMI The information about a serial console service that this system provides.
	IPMI *ComputerSystemV1230SerialConsoleProtocol `json:"IPMI,omitempty"`

	// MaxConcurrentSessions The maximum number of service sessions, regardless of protocol, that this system can support.
	MaxConcurrentSessions *int64 `json:"MaxConcurrentSessions,omitempty"`

	// SSH The information about a serial console service that this system provides.
	SSH *ComputerSystemV1230SerialConsoleProtocol `json:"SSH,omitempty"`

	// Telnet The information about a serial console service that this system provides.
	Telnet *ComputerSystemV1230SerialConsoleProtocol `json:"Telnet,omitempty"`
}

// ComputerSystemV1230HostedServices The services that might be running or installed on the system.
type ComputerSystemV1230HostedServices struct {
	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// StorageServices A reference to a resource.
	StorageServices *OdataV4IdRef `json:"StorageServices,omitempty"`
}

// ComputerSystemV1230HostingRole The enumerations of `HostingRole` specify different features that the hosting computer system supports.
type ComputerSystemV1230HostingRole string

// ComputerSystemV1230IdlePowerSaver The idle power saver settings of a computer system.
type ComputerSystemV1230IdlePowerSaver struct {
	// Enabled An indication of whether idle power saver is enabled.
	Enabled *bool `json:"Enabled,omitempty"`

	// EnterDwellTimeSeconds The duration in seconds the computer system is below the `EnterUtilizationPercent` value before the idle power save is activated.
	EnterDwellTimeSeconds *int64 `json:"EnterDwellTimeSeconds"`

	// EnterUtilizationPercent The percentage of utilization when the computer system enters idle power save.  If the computer system's utilization goes below this value, it enters idle power save.
	EnterUtilizationPercent *float32 `json:"EnterUtilizationPercent"`

	// ExitDwellTimeSeconds The duration in seconds the computer system is above the `ExitUtilizationPercent` value before the idle power save is stopped.
	ExitDwellTimeSeconds *int64 `json:"ExitDwellTimeSeconds"`

	// ExitUtilizationPercent The percentage of utilization when the computer system exits idle power save.  If the computer system's utilization goes above this value, it exits idle power save.
	ExitUtilizationPercent *float32 `json:"ExitUtilizationPercent"`
}

// ComputerSystemV1230IndicatorLED defines model for ComputerSystem_v1_23_0_IndicatorLED.
type ComputerSystemV1230IndicatorLED string

// ComputerSystemV1230InterfaceType defines model for ComputerSystem_v1_23_0_InterfaceType.
type ComputerSystemV1230InterfaceType string

// ComputerSystemV1230InterfaceTypeSelection The enumerations of `InterfaceTypeSelection` specify the method for switching the TrustedModule InterfaceType, for instance between TPM1_2 and TPM2_0, if supported.
type ComputerSystemV1230InterfaceTypeSelection string

// ComputerSystemV1230KMIPCachePolicy defines model for ComputerSystem_v1_23_0_KMIPCachePolicy.
type ComputerSystemV1230KMIPCachePolicy string

// ComputerSystemV1230KMIPServer The KMIP server settings for a computer system.
type ComputerSystemV1230KMIPServer struct {
	// Address The KMIP server address.
	Address *string `json:"Address"`

	// CacheDuration The duration the system caches KMIP data.
	CacheDuration *string `json:"CacheDuration"`

	// CachePolicy The cache policy to control how KMIP data is cached.
	CachePolicy *ComputerSystemV1230KMIPServer_CachePolicy `json:"CachePolicy,omitempty"`

	// Password The password to access the KMIP server.  The value is `null` in responses.
	Password *string `json:"Password"`

	// Port The KMIP server port.
	Port *int64 `json:"Port"`

	// Username The username to access the KMIP server.
	Username *string `json:"Username"`
}

// ComputerSystemV1230KMIPServerCachePolicy1 defines model for .
type ComputerSystemV1230KMIPServerCachePolicy1 = interface{}

// ComputerSystemV1230KMIPServer_CachePolicy The cache policy to control how KMIP data is cached.
type ComputerSystemV1230KMIPServer_CachePolicy struct {
	union json.RawMessage
}

// ComputerSystemV1230KeyManagement The key management settings of a computer system.
type ComputerSystemV1230KeyManagement struct {
	// KMIPCertificates A reference to a resource.
	KMIPCertificates *OdataV4IdRef `json:"KMIPCertificates,omitempty"`

	// KMIPServers The KMIP servers to which this computer system is subscribed.
	KMIPServers *[]ComputerSystemV1230KeyManagement_KMIPServers_Item `json:"KMIPServers,omitempty"`
}

// ComputerSystemV1230KeyManagementKMIPServers1 defines model for .
type ComputerSystemV1230KeyManagementKMIPServers1 = interface{}

// ComputerSystemV1230KeyManagement_KMIPServers_Item defines model for ComputerSystem_v1_23_0_KeyManagement.KMIPServers.Item.
type ComputerSystemV1230KeyManagement_KMIPServers_Item struct {
	union json.RawMessage
}

// ComputerSystemV1230LastResetCauses defines model for ComputerSystem_v1_23_0_LastResetCauses.
type ComputerSystemV1230LastResetCauses string

// ComputerSystemV1230Links The links to other resources that are related to this resource.
type ComputerSystemV1230Links struct {
	// Chassis An array of links to the chassis that contains this system.
	Chassis *[]OdataV4IdRef `json:"Chassis,omitempty"`

	// ChassisOdataCount The number of items in a collection.
	ChassisOdataCount *OdataV4Count `json:"Chassis@odata.count,omitempty"`

	// ConsumingComputerSystems An array of links to computer systems that are realized, in whole or in part, from this computer system.
	ConsumingComputerSystems *[]OdataV4IdRef `json:"ConsumingComputerSystems,omitempty"`

	// ConsumingComputerSystemsOdataCount The number of items in a collection.
	ConsumingComputerSystemsOdataCount *OdataV4Count `json:"ConsumingComputerSystems@odata.count,omitempty"`

	// CooledBy An array of links to resources or objects that cool this computer system.  Normally, the link is for either a chassis or a specific set of fans.
	CooledBy *[]OdataV4IdRef `json:"CooledBy,omitempty"`

	// CooledByOdataCount The number of items in a collection.
	CooledByOdataCount *OdataV4Count `json:"CooledBy@odata.count,omitempty"`

	// Endpoints An array of links to the endpoints that connect to this system.
	Endpoints *[]OdataV4IdRef `json:"Endpoints,omitempty"`

	// EndpointsOdataCount The number of items in a collection.
	EndpointsOdataCount *OdataV4Count `json:"Endpoints@odata.count,omitempty"`

	// HostingComputerSystem The link to the system that is hosting this virtual machine.
	HostingComputerSystem *ComputerSystemV1230Links_HostingComputerSystem `json:"HostingComputerSystem,omitempty"`

	// ManagedBy An array of links to the managers responsible for this system.
	ManagedBy *[]OdataV4IdRef `json:"ManagedBy,omitempty"`

	// ManagedByOdataCount The number of items in a collection.
	ManagedByOdataCount *OdataV4Count `json:"ManagedBy@odata.count,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// OffloadedNetworkDeviceFunctions The network device functions to which this system performs offload computation, such as with a SmartNIC.
	OffloadedNetworkDeviceFunctions *[]OdataV4IdRef `json:"OffloadedNetworkDeviceFunctions,omitempty"`

	// OffloadedNetworkDeviceFunctionsOdataCount The number of items in a collection.
	OffloadedNetworkDeviceFunctionsOdataCount *OdataV4Count `json:"OffloadedNetworkDeviceFunctions@odata.count,omitempty"`

	// PoweredBy An array of links to resources or objects that power this computer system.  Normally, the link is for either a chassis or a specific set of power supplies.
	PoweredBy *[]OdataV4IdRef `json:"PoweredBy,omitempty"`

	// PoweredByOdataCount The number of items in a collection.
	PoweredByOdataCount *OdataV4Count `json:"PoweredBy@odata.count,omitempty"`

	// ResourceBlocks An array of links to the resource blocks that are used in this computer system.
	ResourceBlocks *[]OdataV4IdRef `json:"ResourceBlocks,omitempty"`

	// ResourceBlocksOdataCount The number of items in a collection.
	ResourceBlocksOdataCount *OdataV4Count `json:"ResourceBlocks@odata.count,omitempty"`

	// SupplyingComputerSystems An array of links to computer systems that contribute, in whole or in part, to the implementation of this computer system.
	SupplyingComputerSystems *[]OdataV4IdRef `json:"SupplyingComputerSystems,omitempty"`

	// SupplyingComputerSystemsOdataCount The number of items in a collection.
	SupplyingComputerSystemsOdataCount *OdataV4Count `json:"SupplyingComputerSystems@odata.count,omitempty"`

	// TrustedComponents An array of links to the trusted components for this system.
	TrustedComponents *[]OdataV4IdRef `json:"TrustedComponents,omitempty"`

	// TrustedComponentsOdataCount The number of items in a collection.
	TrustedComponentsOdataCount *OdataV4Count `json:"TrustedComponents@odata.count,omitempty"`

	// VirtualMachines An array of links to the virtual machines this system is hosting.
	VirtualMachines *[]OdataV4IdRef `json:"VirtualMachines,omitempty"`

	// VirtualMachinesOdataCount The number of items in a collection.
	VirtualMachinesOdataCount *OdataV4Count `json:"VirtualMachines@odata.count,omitempty"`
}

// ComputerSystemV1230LinksHostingComputerSystem1 defines model for .
type ComputerSystemV1230LinksHostingComputerSystem1 = interface{}

// ComputerSystemV1230Links_HostingComputerSystem The link to the system that is hosting this virtual machine.
type ComputerSystemV1230Links_HostingComputerSystem struct {
	union json.RawMessage
}

// ComputerSystemV1230MemoryMirroring defines model for ComputerSystem_v1_23_0_MemoryMirroring.
type ComputerSystemV1230MemoryMirroring string

// ComputerSystemV1230MemorySummary The memory of the system in general detail.
type ComputerSystemV1230MemorySummary struct {
	// MemoryMirroring The ability and type of memory mirroring that this computer system supports.
	MemoryMirroring *ComputerSystemV1230MemorySummary_MemoryMirroring `json:"MemoryMirroring,omitempty"`

	// Metrics A reference to a resource.
	Metrics *OdataV4IdRef `json:"Metrics,omitempty"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// TotalSystemMemoryGiB The total configured operating system-accessible memory (RAM), measured in GiB.
	TotalSystemMemoryGiB *float32 `json:"TotalSystemMemoryGiB"`

	// TotalSystemPersistentMemoryGiB The total configured, system-accessible persistent memory, measured in GiB.
	TotalSystemPersistentMemoryGiB *float32 `json:"TotalSystemPersistentMemoryGiB"`
}

// ComputerSystemV1230MemorySummaryMemoryMirroring1 defines model for .
type ComputerSystemV1230MemorySummaryMemoryMirroring1 = interface{}

// ComputerSystemV1230MemorySummary_MemoryMirroring The ability and type of memory mirroring that this computer system supports.
type ComputerSystemV1230MemorySummary_MemoryMirroring struct {
	union json.RawMessage
}

// ComputerSystemV1230OemActions The available OEM-specific actions for this resource.
type ComputerSystemV1230OemActions map[string]interface{}

// ComputerSystemV1230PowerMode defines model for ComputerSystem_v1_23_0_PowerMode.
type ComputerSystemV1230PowerMode string

// ComputerSystemV1230PowerRestorePolicyTypes The enumerations of `PowerRestorePolicyTypes` specify the choice of power state for the system when power is applied.
type ComputerSystemV1230PowerRestorePolicyTypes string

// ComputerSystemV1230ProcessorSummary The central processors of the system in general detail.
type ComputerSystemV1230ProcessorSummary struct {
	// CoreCount The number of processor cores in the system.
	CoreCount *int64 `json:"CoreCount"`

	// Count The number of physical processors in the system.
	Count *int64 `json:"Count"`

	// LogicalProcessorCount The number of logical processors in the system.
	LogicalProcessorCount *int64 `json:"LogicalProcessorCount"`

	// Metrics A reference to a resource.
	Metrics *OdataV4IdRef `json:"Metrics,omitempty"`

	// Model The processor model for the primary or majority of processors in this system.
	Model *string `json:"Model"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// ThreadingEnabled An indication of whether threading is enabled on all processors in this system.
	ThreadingEnabled *bool `json:"ThreadingEnabled,omitempty"`
}

// ComputerSystemV1230RemoveResourceBlock This action removes a resource block from a system.
type ComputerSystemV1230RemoveResourceBlock struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// ComputerSystemV1230Reset This action resets the system.
type ComputerSystemV1230Reset struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// ComputerSystemV1230SerialConsoleProtocol The information about a serial console service that this system provides.
type ComputerSystemV1230SerialConsoleProtocol struct {
	// ConsoleEntryCommand The command string passed to the service to select or enter the system's serial console.
	ConsoleEntryCommand *string `json:"ConsoleEntryCommand"`

	// HotKeySequenceDisplay The hotkey sequence available for the user to exit the serial console session.
	HotKeySequenceDisplay *string `json:"HotKeySequenceDisplay"`

	// Port The protocol port.
	Port *int64 `json:"Port"`

	// ServiceEnabled An indication of whether the service is enabled for this system.
	ServiceEnabled *bool `json:"ServiceEnabled,omitempty"`

	// SharedWithManagerCLI Indicates whether the serial console service is shared with access to the manager's command-line interface (CLI).
	SharedWithManagerCLI *bool `json:"SharedWithManagerCLI,omitempty"`
}

// ComputerSystemV1230SetDefaultBootOrder This action sets the `BootOrder` property to the default settings.
type ComputerSystemV1230SetDefaultBootOrder struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// ComputerSystemV1230StopBootOnFault defines model for ComputerSystem_v1_23_0_StopBootOnFault.
type ComputerSystemV1230StopBootOnFault string

// ComputerSystemV1230SystemType defines model for ComputerSystem_v1_23_0_SystemType.
type ComputerSystemV1230SystemType string

// ComputerSystemV1230TrustedModuleRequiredToBoot defines model for ComputerSystem_v1_23_0_TrustedModuleRequiredToBoot.
type ComputerSystemV1230TrustedModuleRequiredToBoot string

// ComputerSystemV1230TrustedModules The Trusted Module installed in the system.
type ComputerSystemV1230TrustedModules struct {
	// FirmwareVersion The firmware version of this Trusted Module.
	FirmwareVersion *string `json:"FirmwareVersion"`

	// FirmwareVersion2 The second firmware version of this Trusted Module, if applicable.
	FirmwareVersion2 *string `json:"FirmwareVersion2"`

	// InterfaceType The interface type of the Trusted Module.
	InterfaceType *ComputerSystemV1230TrustedModules_InterfaceType `json:"InterfaceType,omitempty"`

	// InterfaceTypeSelection The interface type selection supported by this Trusted Module.
	InterfaceTypeSelection *ComputerSystemV1230TrustedModules_InterfaceTypeSelection `json:"InterfaceTypeSelection,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`
}

// ComputerSystemV1230TrustedModulesInterfaceType1 defines model for .
type ComputerSystemV1230TrustedModulesInterfaceType1 = interface{}

// ComputerSystemV1230TrustedModules_InterfaceType The interface type of the Trusted Module.
type ComputerSystemV1230TrustedModules_InterfaceType struct {
	union json.RawMessage
}

// ComputerSystemV1230TrustedModulesInterfaceTypeSelection1 defines model for .
type ComputerSystemV1230TrustedModulesInterfaceTypeSelection1 = interface{}

// ComputerSystemV1230TrustedModules_InterfaceTypeSelection The interface type selection supported by this Trusted Module.
type ComputerSystemV1230TrustedModules_InterfaceTypeSelection struct {
	union json.RawMessage
}

// ComputerSystemV1230VirtualMediaConfig The information about virtual media service for this system.
type ComputerSystemV1230VirtualMediaConfig struct {
	// Port The protocol port.
	Port *int64 `json:"Port"`

	// ServiceEnabled An indication of whether the service is enabled for this system.
	ServiceEnabled *bool `json:"ServiceEnabled,omitempty"`
}

// ComputerSystemV1230WatchdogTimeoutActions The enumerations of `WatchdogTimeoutActions` specify the choice of action to take when the host watchdog timer reaches its timeout value.
type ComputerSystemV1230WatchdogTimeoutActions string

// ComputerSystemV1230WatchdogTimer This type describes the host watchdog timer functionality for this system.
type ComputerSystemV1230WatchdogTimer struct {
	// FunctionEnabled An indication of whether a user has enabled the host watchdog timer functionality.  This property indicates only that a user has enabled the timer.  To activate the timer, installation of additional host-based software is necessary; an update to this property does not initiate the timer.
	FunctionEnabled *bool `json:"FunctionEnabled"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// TimeoutAction The action to perform when the watchdog timer reaches its timeout value.
	TimeoutAction ComputerSystemV1230WatchdogTimer_TimeoutAction `json:"TimeoutAction"`

	// WarningAction The action to perform when the watchdog timer is close to reaching its timeout value.  This action typically occurs from three to ten seconds before to the timeout value, but the exact timing is dependent on the implementation.
	WarningAction *ComputerSystemV1230WatchdogTimer_WarningAction `json:"WarningAction,omitempty"`
}

// ComputerSystemV1230WatchdogTimerTimeoutAction1 defines model for .
type ComputerSystemV1230WatchdogTimerTimeoutAction1 = interface{}

// ComputerSystemV1230WatchdogTimer_TimeoutAction The action to perform when the watchdog timer reaches its timeout value.
type ComputerSystemV1230WatchdogTimer_TimeoutAction struct {
	union json.RawMessage
}

// ComputerSystemV1230WatchdogTimerWarningAction1 defines model for .
type ComputerSystemV1230WatchdogTimerWarningAction1 = interface{}

// ComputerSystemV1230WatchdogTimer_WarningAction The action to perform when the watchdog timer is close to reaching its timeout value.  This action typically occurs from three to ten seconds before to the timeout value, but the exact timing is dependent on the implementation.
type ComputerSystemV1230WatchdogTimer_WarningAction struct {
	union json.RawMessage
}

// ComputerSystemV1230WatchdogWarningActions The enumerations of `WatchdogWarningActions` specify the choice of action to take when the host watchdog timer is close (typically 3-10 seconds) to reaching its timeout value.
type ComputerSystemV1230WatchdogWarningActions string

// DataStorageLoSCapabilitiesProvisioningPolicy Space provisioning policy.
type DataStorageLoSCapabilitiesProvisioningPolicy string

// DataStorageLoSCapabilitiesStorageAccessCapability Values of StorageAccessCapability describe abilities to read or write storage.
type DataStorageLoSCapabilitiesStorageAccessCapability string

// EthernetInterface The `EthernetInterface` schema represents a single, logical Ethernet interface or network interface controller (NIC).
type EthernetInterface = EthernetInterfaceV1122EthernetInterface

// EthernetInterfaceCollection The collection of `EthernetInterface` resource instances.
type EthernetInterfaceCollection = EthernetInterfaceCollectionEthernetInterfaceCollection

// EthernetInterfaceCollectionEthernetInterfaceCollection The collection of `EthernetInterface` resource instances.
type EthernetInterfaceCollectionEthernetInterfaceCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType   *OdataV4Type                                                        `json:"@odata.type,omitempty"`
	Description *EthernetInterfaceCollectionEthernetInterfaceCollection_Description `json:"Description,omitempty"`

	// Members The members of this collection.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// EthernetInterfaceCollectionEthernetInterfaceCollectionDescription1 defines model for .
type EthernetInterfaceCollectionEthernetInterfaceCollectionDescription1 = interface{}

// EthernetInterfaceCollectionEthernetInterfaceCollection_Description defines model for EthernetInterfaceCollectionEthernetInterfaceCollection.Description.
type EthernetInterfaceCollectionEthernetInterfaceCollection_Description struct {
	union json.RawMessage
}

// EthernetInterfaceV1122Actions The available actions for this resource.
type EthernetInterfaceV1122Actions struct {
	// Oem The available OEM-specific actions for this resource.
	Oem *EthernetInterfaceV1122OemActions `json:"Oem,omitempty"`
}

// EthernetInterfaceV1122DHCPFallback defines model for EthernetInterface_v1_12_2_DHCPFallback.
type EthernetInterfaceV1122DHCPFallback string

// EthernetInterfaceV1122DHCPv4Configuration DHCPv4 configuration for this interface.
type EthernetInterfaceV1122DHCPv4Configuration struct {
	// DHCPEnabled An indication of whether DHCP v4 is enabled on this Ethernet interface.
	DHCPEnabled *bool `json:"DHCPEnabled"`

	// FallbackAddress DHCPv4 fallback address method for this interface.
	FallbackAddress *EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress `json:"FallbackAddress,omitempty"`

	// UseDNSServers An indication of whether this interface uses DHCP v4-supplied DNS servers.
	UseDNSServers *bool `json:"UseDNSServers"`

	// UseDomainName An indication of whether this interface uses a DHCP v4-supplied domain name.
	UseDomainName *bool `json:"UseDomainName"`

	// UseGateway An indication of whether this interface uses a DHCP v4-supplied gateway.
	UseGateway *bool `json:"UseGateway"`

	// UseNTPServers An indication of whether the interface uses DHCP v4-supplied NTP servers.
	UseNTPServers *bool `json:"UseNTPServers"`

	// UseStaticRoutes An indication of whether the interface uses DHCP v4-supplied static routes.
	UseStaticRoutes *bool `json:"UseStaticRoutes"`
}

// EthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1 defines model for .
type EthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1 = interface{}

// EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress DHCPv4 fallback address method for this interface.
type EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress struct {
	union json.RawMessage
}

// EthernetInterfaceV1122DHCPv6Configuration DHCPv6 configuration for this interface.
type EthernetInterfaceV1122DHCPv6Configuration struct {
	// OperatingMode Determines the DHCPv6 operating mode for this interface.
	OperatingMode *EthernetInterfaceV1122DHCPv6Configuration_OperatingMode `json:"OperatingMode,omitempty"`

	// UseDNSServers An indication of whether the interface uses DHCP v6-supplied DNS servers.
	UseDNSServers *bool `json:"UseDNSServers"`

	// UseDomainName An indication of whether this interface uses a DHCP v6-supplied domain name.
	UseDomainName *bool `json:"UseDomainName"`

	// UseNTPServers An indication of whether the interface uses DHCP v6-supplied NTP servers.
	UseNTPServers *bool `json:"UseNTPServers"`

	// UseRapidCommit An indication of whether the interface uses DHCP v6 rapid commit mode for stateful mode address assignments.  Do not enable this option in networks where more than one DHCP v6 server is configured to provide address assignments.
	UseRapidCommit *bool `json:"UseRapidCommit"`
}

// EthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1 defines model for .
type EthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1 = interface{}

// EthernetInterfaceV1122DHCPv6Configuration_OperatingMode Determines the DHCPv6 operating mode for this interface.
type EthernetInterfaceV1122DHCPv6Configuration_OperatingMode struct {
	union json.RawMessage
}

// EthernetInterfaceV1122DHCPv6OperatingMode defines model for EthernetInterface_v1_12_2_DHCPv6OperatingMode.
type EthernetInterfaceV1122DHCPv6OperatingMode string

// EthernetInterfaceV1122EthernetDeviceType defines model for EthernetInterface_v1_12_2_EthernetDeviceType.
type EthernetInterfaceV1122EthernetDeviceType string

// EthernetInterfaceV1122EthernetInterface The `EthernetInterface` schema represents a single, logical Ethernet interface or network interface controller (NIC).
type EthernetInterfaceV1122EthernetInterface struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Actions The available actions for this resource.
	Actions *EthernetInterfaceV1122Actions `json:"Actions,omitempty"`

	// AutoNeg An indication of whether the speed and duplex are automatically negotiated and configured on this interface.
	AutoNeg *bool `json:"AutoNeg"`

	// DHCPv4 DHCPv4 configuration for this interface.
	DHCPv4 *EthernetInterfaceV1122DHCPv4Configuration `json:"DHCPv4,omitempty"`

	// DHCPv6 DHCPv6 configuration for this interface.
	DHCPv6      *EthernetInterfaceV1122DHCPv6Configuration           `json:"DHCPv6,omitempty"`
	Description *EthernetInterfaceV1122EthernetInterface_Description `json:"Description,omitempty"`

	// EthernetInterfaceType The type of interface.
	EthernetInterfaceType *EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType `json:"EthernetInterfaceType,omitempty"`

	// FQDN The complete, fully qualified domain name that DNS obtains for this interface.
	FQDN *string `json:"FQDN"`

	// FullDuplex An indication of whether full-duplex mode is enabled on the Ethernet connection for this interface.
	FullDuplex *bool `json:"FullDuplex"`

	// HostName The DNS host name, without any domain information.
	HostName *string `json:"HostName"`

	// IPv4Addresses The IPv4 addresses currently in use by this interface.
	IPv4Addresses *[]IPAddressesV115IPv4Address `json:"IPv4Addresses,omitempty"`

	// IPv4StaticAddresses The IPv4 static addresses assigned to this interface.  See `IPv4Addresses` for the addresses in use by this interface.
	IPv4StaticAddresses *[]EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item `json:"IPv4StaticAddresses,omitempty"`

	// IPv6AddressPolicyTable An array that represents the RFC6724-defined address selection policy table.
	IPv6AddressPolicyTable *[]EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item `json:"IPv6AddressPolicyTable,omitempty"`

	// IPv6Addresses The IPv6 addresses currently in use by this interface.
	IPv6Addresses *[]IPAddressesV115IPv6Address `json:"IPv6Addresses,omitempty"`

	// IPv6DefaultGateway The IPv6 default gateway address in use on this interface.
	IPv6DefaultGateway *string `json:"IPv6DefaultGateway"`

	// IPv6Enabled An indication of whether IPv6 is enabled on this interface.
	IPv6Enabled *bool `json:"IPv6Enabled"`

	// IPv6StaticAddresses The IPv6 static addresses assigned to this interface.  See `IPv6Addresses` for the addresses in use by this interface.
	IPv6StaticAddresses *[]EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item `json:"IPv6StaticAddresses,omitempty"`

	// IPv6StaticDefaultGateways The IPv6 static default gateways for this interface.
	IPv6StaticDefaultGateways *[]EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item `json:"IPv6StaticDefaultGateways,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// InterfaceEnabled An indication of whether this interface is enabled.
	InterfaceEnabled *bool `json:"InterfaceEnabled"`

	// LinkStatus The link status of this interface, or port.
	LinkStatus *EthernetInterfaceV1122EthernetInterface_LinkStatus `json:"LinkStatus,omitempty"`

	// Links The links to other resources that are related to this resource.
	Links *EthernetInterfaceV1122Links `json:"Links,omitempty"`

	// MACAddress The currently configured MAC address of the interface, or logical port.
	MACAddress *EthernetInterfaceV1122EthernetInterface_MACAddress `json:"MACAddress,omitempty"`

	// MTUSize The currently configured maximum transmission unit (MTU), in bytes, on this interface.
	MTUSize *int64 `json:"MTUSize"`

	// MaxIPv6StaticAddresses The maximum number of static IPv6 addresses that can be configured on this interface.
	MaxIPv6StaticAddresses *int64 `json:"MaxIPv6StaticAddresses"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// NameServers The DNS servers in use on this interface.
	NameServers *[]string `json:"NameServers,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PermanentMACAddress The permanent MAC address assigned to this interface, or port.
	PermanentMACAddress *EthernetInterfaceV1122EthernetInterface_PermanentMACAddress `json:"PermanentMACAddress,omitempty"`

	// RoutingScope The routing scope for this interface.
	RoutingScope *EthernetInterfaceV1122EthernetInterface_RoutingScope `json:"RoutingScope,omitempty"`

	// SpeedMbps The current speed, in Mbit/s, of this interface.
	SpeedMbps *int64 `json:"SpeedMbps"`

	// StatelessAddressAutoConfig Stateless address autoconfiguration (SLAAC) parameters for this interface.
	StatelessAddressAutoConfig *EthernetInterfaceV1122StatelessAddressAutoConfiguration `json:"StatelessAddressAutoConfig,omitempty"`

	// StaticNameServers The statically-defined set of DNS server IPv4 and IPv6 addresses.
	StaticNameServers *[]string `json:"StaticNameServers,omitempty"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// TeamMode The team mode for this interface.
	TeamMode *EthernetInterfaceV1122EthernetInterface_TeamMode `json:"TeamMode,omitempty"`

	// UefiDevicePath The UEFI device path for this interface.
	UefiDevicePath *string `json:"UefiDevicePath"`

	// VLAN The attributes of a VLAN.
	VLAN *VLanNetworkInterfaceV131VLAN `json:"VLAN,omitempty"`

	// VLANs A reference to a resource.
	VLANs *OdataV4IdRef `json:"VLANs,omitempty"`
}

// EthernetInterfaceV1122EthernetInterfaceDescription1 defines model for .
type EthernetInterfaceV1122EthernetInterfaceDescription1 = interface{}

// EthernetInterfaceV1122EthernetInterface_Description defines model for EthernetInterfaceV1122EthernetInterface.Description.
type EthernetInterfaceV1122EthernetInterface_Description struct {
	union json.RawMessage
}

// EthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1 defines model for .
type EthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1 = interface{}

// EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType The type of interface.
type EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType struct {
	union json.RawMessage
}

// EthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1 defines model for .
type EthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1 = interface{}

// EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item defines model for EthernetInterface_v1_12_2_EthernetInterface.IPv4StaticAddresses.Item.
type EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item struct {
	union json.RawMessage
}

// EthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1 defines model for .
type EthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1 = interface{}

// EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item defines model for EthernetInterface_v1_12_2_EthernetInterface.IPv6AddressPolicyTable.Item.
type EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item struct {
	union json.RawMessage
}

// EthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1 defines model for .
type EthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1 = interface{}

// EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item defines model for EthernetInterface_v1_12_2_EthernetInterface.IPv6StaticAddresses.Item.
type EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item struct {
	union json.RawMessage
}

// EthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1 defines model for .
type EthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1 = interface{}

// EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item defines model for EthernetInterface_v1_12_2_EthernetInterface.IPv6StaticDefaultGateways.Item.
type EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item struct {
	union json.RawMessage
}

// EthernetInterfaceV1122EthernetInterfaceLinkStatus1 defines model for .
type EthernetInterfaceV1122EthernetInterfaceLinkStatus1 = interface{}

// EthernetInterfaceV1122EthernetInterface_LinkStatus The link status of this interface, or port.
type EthernetInterfaceV1122EthernetInterface_LinkStatus struct {
	union json.RawMessage
}

// EthernetInterfaceV1122EthernetInterfaceMACAddress1 defines model for .
type EthernetInterfaceV1122EthernetInterfaceMACAddress1 = interface{}

// EthernetInterfaceV1122EthernetInterface_MACAddress The currently configured MAC address of the interface, or logical port.
type EthernetInterfaceV1122EthernetInterface_MACAddress struct {
	union json.RawMessage
}

// EthernetInterfaceV1122EthernetInterfacePermanentMACAddress1 defines model for .
type EthernetInterfaceV1122EthernetInterfacePermanentMACAddress1 = interface{}

// EthernetInterfaceV1122EthernetInterface_PermanentMACAddress The permanent MAC address assigned to this interface, or port.
type EthernetInterfaceV1122EthernetInterface_PermanentMACAddress struct {
	union json.RawMessage
}

// EthernetInterfaceV1122EthernetInterfaceRoutingScope1 defines model for .
type EthernetInterfaceV1122EthernetInterfaceRoutingScope1 = interface{}

// EthernetInterfaceV1122EthernetInterface_RoutingScope The routing scope for this interface.
type EthernetInterfaceV1122EthernetInterface_RoutingScope struct {
	union json.RawMessage
}

// EthernetInterfaceV1122EthernetInterfaceTeamMode1 defines model for .
type EthernetInterfaceV1122EthernetInterfaceTeamMode1 = interface{}

// EthernetInterfaceV1122EthernetInterface_TeamMode The team mode for this interface.
type EthernetInterfaceV1122EthernetInterface_TeamMode struct {
	union json.RawMessage
}

// EthernetInterfaceV1122IPv6AddressPolicyEntry The entry in the RFC6724-defined address selection policy table.
type EthernetInterfaceV1122IPv6AddressPolicyEntry struct {
	// Label The IPv6 label, as defined in RFC6724, section 2.1.
	Label *int64 `json:"Label"`

	// Precedence The IPv6 precedence, as defined in RFC6724, section 2.1.
	Precedence *int64 `json:"Precedence"`

	// Prefix The IPv6 address prefix, as defined in RFC6724, section 2.1.
	Prefix *string `json:"Prefix"`
}

// EthernetInterfaceV1122LinkStatus defines model for EthernetInterface_v1_12_2_LinkStatus.
type EthernetInterfaceV1122LinkStatus string

// EthernetInterfaceV1122Links The links to other resources that are related to this resource.
type EthernetInterfaceV1122Links struct {
	// AffiliatedInterfaces The links to the Ethernet interfaces that are affiliated with this interface, such as a VLAN or a team that uses this interface.
	AffiliatedInterfaces *[]OdataV4IdRef `json:"AffiliatedInterfaces,omitempty"`

	// AffiliatedInterfacesOdataCount The number of items in a collection.
	AffiliatedInterfacesOdataCount *OdataV4Count `json:"AffiliatedInterfaces@odata.count,omitempty"`

	// Chassis A reference to a resource.
	Chassis *OdataV4IdRef `json:"Chassis,omitempty"`

	// Endpoints An array of links to the endpoints that connect to this Ethernet interface.
	Endpoints *[]OdataV4IdRef `json:"Endpoints,omitempty"`

	// EndpointsOdataCount The number of items in a collection.
	EndpointsOdataCount *OdataV4Count `json:"Endpoints@odata.count,omitempty"`

	// HostInterface A reference to a resource.
	HostInterface *OdataV4IdRef `json:"HostInterface,omitempty"`

	// NetworkDeviceFunction The link to the parent network device function and is only used when representing one of the VLANs on that network device function, such as is done in Unix.
	// Deprecated:
	NetworkDeviceFunction *EthernetInterfaceV1122Links_NetworkDeviceFunction `json:"NetworkDeviceFunction,omitempty"`

	// NetworkDeviceFunctions The link to the network device functions that constitute this Ethernet interface.
	NetworkDeviceFunctions *[]OdataV4IdRef `json:"NetworkDeviceFunctions,omitempty"`

	// NetworkDeviceFunctionsOdataCount The number of items in a collection.
	NetworkDeviceFunctionsOdataCount *OdataV4Count `json:"NetworkDeviceFunctions@odata.count,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Ports The links to the ports providing this Ethernet interface.
	Ports *[]OdataV4IdRef `json:"Ports,omitempty"`

	// PortsOdataCount The number of items in a collection.
	PortsOdataCount *OdataV4Count `json:"Ports@odata.count,omitempty"`

	// RelatedInterfaces The links to the Ethernet interfaces that constitute this Ethernet interface.
	RelatedInterfaces *[]OdataV4IdRef `json:"RelatedInterfaces,omitempty"`

	// RelatedInterfacesOdataCount The number of items in a collection.
	RelatedInterfacesOdataCount *OdataV4Count `json:"RelatedInterfaces@odata.count,omitempty"`
}

// EthernetInterfaceV1122LinksNetworkDeviceFunction1 defines model for .
type EthernetInterfaceV1122LinksNetworkDeviceFunction1 = interface{}

// EthernetInterfaceV1122Links_NetworkDeviceFunction The link to the parent network device function and is only used when representing one of the VLANs on that network device function, such as is done in Unix.
type EthernetInterfaceV1122Links_NetworkDeviceFunction struct {
	union json.RawMessage
}

// EthernetInterfaceV1122MACAddress defines model for EthernetInterface_v1_12_2_MACAddress.
type EthernetInterfaceV1122MACAddress = string

// EthernetInterfaceV1122OemActions The available OEM-specific actions for this resource.
type EthernetInterfaceV1122OemActions map[string]interface{}

// EthernetInterfaceV1122RoutingScope defines model for EthernetInterface_v1_12_2_RoutingScope.
type EthernetInterfaceV1122RoutingScope string

// EthernetInterfaceV1122StatelessAddressAutoConfiguration Stateless address autoconfiguration (SLAAC) parameters for this interface.
type EthernetInterfaceV1122StatelessAddressAutoConfiguration struct {
	// IPv4AutoConfigEnabled An indication of whether IPv4 stateless address autoconfiguration (SLAAC) is enabled for this interface.
	IPv4AutoConfigEnabled *bool `json:"IPv4AutoConfigEnabled"`

	// IPv6AutoConfigEnabled An indication of whether IPv6 stateless address autoconfiguration (SLAAC) is enabled for this interface.
	IPv6AutoConfigEnabled *bool `json:"IPv6AutoConfigEnabled"`
}

// EthernetInterfaceV1122TeamMode defines model for EthernetInterface_v1_12_2_TeamMode.
type EthernetInterfaceV1122TeamMode string

// FileShare An instance of a shared set of files with a common directory structure.
type FileShare = FileShareV130FileShare

// FileShareCollection Contains a collection of references to FileSystem resource instances.
type FileShareCollection = FileShareCollectionFileShareCollection

// FileShareCollectionFileShareCollection Contains a collection of references to FileSystem resource instances.
type FileShareCollectionFileShareCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType   *OdataV4Type                                        `json:"@odata.type,omitempty"`
	Description *FileShareCollectionFileShareCollection_Description `json:"Description,omitempty"`

	// Members References to the members of this FileSystem collection.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// FileShareCollectionFileShareCollectionDescription1 defines model for .
type FileShareCollectionFileShareCollectionDescription1 = interface{}

// FileShareCollectionFileShareCollection_Description defines model for FileShareCollectionFileShareCollection.Description.
type FileShareCollectionFileShareCollection_Description struct {
	union json.RawMessage
}

// FileShareV130Actions The available actions for this resource.
type FileShareV130Actions struct {
	// Oem The available OEM specific actions for this resource.
	Oem *FileShareV130OemActions `json:"Oem,omitempty"`
}

// FileShareV130FileShare An instance of a shared set of files with a common directory structure.
type FileShareV130FileShare struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Actions The available actions for this resource.
	Actions *FileShareV130Actions `json:"Actions,omitempty"`

	// CASupported Continuous Availability is supported. Client/Server mediated recovery from network and server failure with application transparency.
	CASupported *bool `json:"CASupported"`

	// DefaultAccessCapabilities An array of default access capabilities for the file share. The types of default access can include Read, Write, and/or Execute.
	DefaultAccessCapabilities *[]FileShareV130FileShare_DefaultAccessCapabilities_Item `json:"DefaultAccessCapabilities,omitempty"`
	Description               *FileShareV130FileShare_Description                      `json:"Description,omitempty"`

	// EthernetInterfaces A reference to a resource.
	EthernetInterfaces *OdataV4IdRef `json:"EthernetInterfaces,omitempty"`

	// ExecuteSupport Execute access is supported by the file share.
	ExecuteSupport *bool `json:"ExecuteSupport"`

	// FileSharePath A path to an exported file or directory on the file system where this file share is hosted.
	FileSharePath *string `json:"FileSharePath"`

	// FileShareQuotaType Specifies the type of quota enforcement.
	FileShareQuotaType *FileShareV130FileShare_FileShareQuotaType `json:"FileShareQuotaType,omitempty"`

	// FileShareRemainingQuotaBytes The number of remaining bytes that may be used by this file share.
	FileShareRemainingQuotaBytes *int64 `json:"FileShareRemainingQuotaBytes"`

	// FileShareTotalQuotaBytes The maximum number of bytes that may be used by this file share.
	FileShareTotalQuotaBytes *int64 `json:"FileShareTotalQuotaBytes"`

	// FileSharingProtocols An array of file sharing protocols supported by this file share.
	FileSharingProtocols *[]FileShareV130FileShare_FileSharingProtocols_Item `json:"FileSharingProtocols,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Links The links object contains the links to other resources that are related to this resource.
	Links *FileShareV130Links `json:"Links,omitempty"`

	// LowSpaceWarningThresholdPercents An array of low space warning threshold percentages for the file share.
	LowSpaceWarningThresholdPercents *[]int64 `json:"LowSpaceWarningThresholdPercents,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// RemainingCapacityPercent The percentage of the capacity remaining in the FileShare.
	RemainingCapacityPercent *int64 `json:"RemainingCapacityPercent"`

	// ReplicationEnabled Indicates whether or not replication is enabled on the file share.
	ReplicationEnabled *bool `json:"ReplicationEnabled"`

	// RootAccess Root access is allowed by the file share.
	RootAccess *bool `json:"RootAccess"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// WritePolicy Defines how writes are replicated to the shared source.
	WritePolicy *FileShareV130FileShare_WritePolicy `json:"WritePolicy,omitempty"`
}

// FileShareV130FileShareDefaultAccessCapabilities1 defines model for .
type FileShareV130FileShareDefaultAccessCapabilities1 = interface{}

// FileShareV130FileShare_DefaultAccessCapabilities_Item defines model for FileShare_v1_3_0_FileShare.DefaultAccessCapabilities.Item.
type FileShareV130FileShare_DefaultAccessCapabilities_Item struct {
	union json.RawMessage
}

// FileShareV130FileShareDescription1 defines model for .
type FileShareV130FileShareDescription1 = interface{}

// FileShareV130FileShare_Description defines model for FileShareV130FileShare.Description.
type FileShareV130FileShare_Description struct {
	union json.RawMessage
}

// FileShareV130FileShareFileShareQuotaType1 defines model for .
type FileShareV130FileShareFileShareQuotaType1 = interface{}

// FileShareV130FileShare_FileShareQuotaType Specifies the type of quota enforcement.
type FileShareV130FileShare_FileShareQuotaType struct {
	union json.RawMessage
}

// FileShareV130FileShareFileSharingProtocols1 defines model for .
type FileShareV130FileShareFileSharingProtocols1 = interface{}

// FileShareV130FileShare_FileSharingProtocols_Item defines model for FileShare_v1_3_0_FileShare.FileSharingProtocols.Item.
type FileShareV130FileShare_FileSharingProtocols_Item struct {
	union json.RawMessage
}

// FileShareV130FileShareWritePolicy1 defines model for .
type FileShareV130FileShareWritePolicy1 = interface{}

// FileShareV130FileShare_WritePolicy Defines how writes are replicated to the shared source.
type FileShareV130FileShare_WritePolicy struct {
	union json.RawMessage
}

// FileShareV130Links The links object contains the links to other resources that are related to this resource.
type FileShareV130Links struct {
	// ClassOfService A reference to a resource.
	ClassOfService *OdataV4IdRef `json:"ClassOfService,omitempty"`

	// FileSystem A reference to a resource.
	FileSystem *OdataV4IdRef `json:"FileSystem,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// FileShareV130OemActions The available OEM specific actions for this resource.
type FileShareV130OemActions map[string]interface{}

// FileShareV130QuotaType Indicates whether quotas are enabled and enforced by this file share. A value of Soft means that quotas are enabled but not enforced, and a value of Hard means that quotas are enabled and enforced.
type FileShareV130QuotaType string

// FileSystem An instance of a hierarchical namespace of files.
type FileSystem = FileSystemV141FileSystem

// FileSystemCollection Contains a collection of references to FileSystem resource instances.
type FileSystemCollection = FileSystemCollectionFileSystemCollection

// FileSystemCollectionFileSystemCollection Contains a collection of references to FileSystem resource instances.
type FileSystemCollectionFileSystemCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType   *OdataV4Type                                          `json:"@odata.type,omitempty"`
	Description *FileSystemCollectionFileSystemCollection_Description `json:"Description,omitempty"`

	// Members References to the members of this FileSystem collection.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// FileSystemCollectionFileSystemCollectionDescription1 defines model for .
type FileSystemCollectionFileSystemCollectionDescription1 = interface{}

// FileSystemCollectionFileSystemCollection_Description defines model for FileSystemCollectionFileSystemCollection.Description.
type FileSystemCollectionFileSystemCollection_Description struct {
	union json.RawMessage
}

// FileSystemFileProtocol The file sharing protocols supported by the file system.
type FileSystemFileProtocol string

// FileSystemImportedShare defines model for FileSystem_ImportedShare.
type FileSystemImportedShare struct {
}

// FileSystemV141Actions The available actions for this resource.
type FileSystemV141Actions struct {
	// Oem The available OEM specific actions for this resource.
	Oem *FileSystemV141OemActions `json:"Oem,omitempty"`
}

// FileSystemV141CharacterCodeSet Supported character code standards for different alphabets and languages.
type FileSystemV141CharacterCodeSet string

// FileSystemV141FileSystem An instance of a hierarchical namespace of files.
type FileSystemV141FileSystem struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// AccessCapabilities An array of supported IO access capabilities.
	AccessCapabilities *[]FileSystemV141FileSystem_AccessCapabilities_Item `json:"AccessCapabilities,omitempty"`

	// Actions The available actions for this resource.
	Actions *FileSystemV141Actions `json:"Actions,omitempty"`

	// BlockSizeBytes Block size of the file system in bytes.
	BlockSizeBytes *int64 `json:"BlockSizeBytes"`

	// Capacity This is the schema definition for the Capacity of a device. It represents the properties for capacity for any data store.
	Capacity *CapacityV100Capacity `json:"Capacity,omitempty"`

	// CapacitySources An array of capacity sources for the file system.
	CapacitySources *[]CapacityV121CapacitySource `json:"CapacitySources,omitempty"`

	// CapacitySourcesOdataCount The number of items in a collection.
	CapacitySourcesOdataCount *OdataV4Count `json:"CapacitySources@odata.count,omitempty"`

	// CasePreserved The case of file names is preserved by the file system.
	CasePreserved *bool `json:"CasePreserved"`

	// CaseSensitive Case sensitive file names are supported by the file system.
	CaseSensitive *bool `json:"CaseSensitive"`

	// CharacterCodeSet An array of the character sets or encodings supported by the file system.
	CharacterCodeSet *[]FileSystemV141FileSystem_CharacterCodeSet_Item `json:"CharacterCodeSet,omitempty"`

	// ClusterSizeBytes A value indicating the minimum file allocation size imposed by the file system.
	ClusterSizeBytes *int64                                `json:"ClusterSizeBytes"`
	Description      *FileSystemV141FileSystem_Description `json:"Description,omitempty"`

	// ExportedShares A reference to a resource.
	ExportedShares *OdataV4IdRef `json:"ExportedShares,omitempty"`

	// IOStatistics The properties of this type represent IO statistics.
	IOStatistics *IOStatisticsV104IOStatistics `json:"IOStatistics,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Identifiers The durable names for this file system.
	Identifiers *[]ResourceV1200Identifier `json:"Identifiers,omitempty"`

	// ImportedShares An array of imported file shares.
	ImportedShares *[]FileSystemImportedShare `json:"ImportedShares,omitempty"`

	// Links Contains links to other resources that are related to this resource.
	Links *FileSystemV141Links `json:"Links,omitempty"`

	// LowSpaceWarningThresholdPercents An array of low space warning threshold percentages for the file system.
	LowSpaceWarningThresholdPercents *[]int64 `json:"LowSpaceWarningThresholdPercents,omitempty"`

	// MaxFileNameLengthBytes A value indicating the maximum length of a file name within the file system.
	MaxFileNameLengthBytes *int64 `json:"MaxFileNameLengthBytes"`

	// Metrics The link to the metrics for this file system.
	Metrics *FileSystemV141FileSystem_Metrics `json:"Metrics,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// RecoverableCapacitySourceCount Current number of capacity source resources that are available as replacements.
	RecoverableCapacitySourceCount *int64 `json:"RecoverableCapacitySourceCount"`

	// RemainingCapacity This is the schema definition for the Capacity of a device. It represents the properties for capacity for any data store.
	RemainingCapacity *CapacityV100Capacity `json:"RemainingCapacity,omitempty"`

	// RemainingCapacityPercent The percentage of the capacity remaining in the FileSystem.
	RemainingCapacityPercent *int64 `json:"RemainingCapacityPercent"`

	// ReplicaInfo Defines the characteristics of a replica.
	ReplicaInfo *StorageReplicaInfoV140ReplicaInfo `json:"ReplicaInfo,omitempty"`

	// ReplicaTargets The resources that are target replicas of this source.
	ReplicaTargets *[]OdataV4IdRef `json:"ReplicaTargets,omitempty"`

	// ReplicaTargetsOdataCount The number of items in a collection.
	ReplicaTargetsOdataCount *OdataV4Count `json:"ReplicaTargets@odata.count,omitempty"`

	// ReplicationEnabled Indicates whether or not replication is enabled on the file system.
	ReplicationEnabled *bool `json:"ReplicationEnabled"`
}

// FileSystemV141FileSystemAccessCapabilities1 defines model for .
type FileSystemV141FileSystemAccessCapabilities1 = interface{}

// FileSystemV141FileSystem_AccessCapabilities_Item defines model for FileSystem_v1_4_1_FileSystem.AccessCapabilities.Item.
type FileSystemV141FileSystem_AccessCapabilities_Item struct {
	union json.RawMessage
}

// FileSystemV141FileSystemCharacterCodeSet1 defines model for .
type FileSystemV141FileSystemCharacterCodeSet1 = interface{}

// FileSystemV141FileSystem_CharacterCodeSet_Item defines model for FileSystem_v1_4_1_FileSystem.CharacterCodeSet.Item.
type FileSystemV141FileSystem_CharacterCodeSet_Item struct {
	union json.RawMessage
}

// FileSystemV141FileSystemDescription1 defines model for .
type FileSystemV141FileSystemDescription1 = interface{}

// FileSystemV141FileSystem_Description defines model for FileSystemV141FileSystem.Description.
type FileSystemV141FileSystem_Description struct {
	union json.RawMessage
}

// FileSystemV141FileSystemMetrics1 defines model for .
type FileSystemV141FileSystemMetrics1 = interface{}

// FileSystemV141FileSystem_Metrics The link to the metrics for this file system.
type FileSystemV141FileSystem_Metrics struct {
	union json.RawMessage
}

// FileSystemV141Links Contains links to other resources that are related to this resource.
type FileSystemV141Links struct {
	// ClassOfService A reference to a resource.
	ClassOfService *OdataV4IdRef `json:"ClassOfService,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// ReplicaCollection An array of links to replicas for this file system.
	// Deprecated:
	ReplicaCollection *[]OdataV4IdRef `json:"ReplicaCollection,omitempty"`

	// ReplicaCollectionOdataCount The number of items in a collection.
	ReplicaCollectionOdataCount *OdataV4Count `json:"ReplicaCollection@odata.count,omitempty"`

	// SpareResourceSets An array of references to SpareResourceSets.
	SpareResourceSets *[]OdataV4IdRef `json:"SpareResourceSets,omitempty"`

	// SpareResourceSetsOdataCount The number of items in a collection.
	SpareResourceSetsOdataCount *OdataV4Count `json:"SpareResourceSets@odata.count,omitempty"`
}

// FileSystemV141OemActions The available OEM specific actions for this resource.
type FileSystemV141OemActions map[string]interface{}

// IOStatisticsV104IOStatistics The properties of this type represent IO statistics.
type IOStatisticsV104IOStatistics struct {
	// NonIORequestTime The time that the resource is busy processing write requests.
	NonIORequestTime *string `json:"NonIORequestTime"`

	// NonIORequests Count of non IO requests.
	NonIORequests *int64 `json:"NonIORequests"`

	// ReadHitIORequests Count of read IO requests satisfied from memory.
	ReadHitIORequests *int64 `json:"ReadHitIORequests"`

	// ReadIOKiBytes Number of kibibytes read.
	ReadIOKiBytes *int64 `json:"ReadIOKiBytes"`

	// ReadIORequestTime The time that the resource is busy processing read requests.
	ReadIORequestTime *string `json:"ReadIORequestTime"`

	// ReadIORequests Count of read IO requests.
	ReadIORequests *int64 `json:"ReadIORequests"`

	// WriteHitIORequests Count of write IO requests coalesced into memory.
	WriteHitIORequests *int64 `json:"WriteHitIORequests"`

	// WriteIOKiBytes Number of kibibytes written.
	WriteIOKiBytes *int64 `json:"WriteIOKiBytes"`

	// WriteIORequestTime The time that the resource is busy processing write requests.
	WriteIORequestTime *string `json:"WriteIORequestTime"`

	// WriteIORequests Count of write IO requests.
	WriteIORequests *int64 `json:"WriteIORequests"`
}

// IPAddressesV115AddressState defines model for IPAddresses_v1_1_5_AddressState.
type IPAddressesV115AddressState string

// IPAddressesV115IPv4Address This type describes an IPv4 address.
type IPAddressesV115IPv4Address struct {
	// Address The IPv4 address.
	Address *string `json:"Address"`

	// AddressOrigin This indicates how the address was determined.
	AddressOrigin *IPAddressesV115IPv4Address_AddressOrigin `json:"AddressOrigin,omitempty"`

	// Gateway The IPv4 gateway for this address.
	Gateway *string `json:"Gateway"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// SubnetMask The IPv4 subnet mask.
	SubnetMask *IPAddressesV115IPv4Address_SubnetMask `json:"SubnetMask,omitempty"`
}

// IPAddressesV115IPv4AddressAddressOrigin1 defines model for .
type IPAddressesV115IPv4AddressAddressOrigin1 = interface{}

// IPAddressesV115IPv4Address_AddressOrigin This indicates how the address was determined.
type IPAddressesV115IPv4Address_AddressOrigin struct {
	union json.RawMessage
}

// IPAddressesV115IPv4AddressSubnetMask1 defines model for .
type IPAddressesV115IPv4AddressSubnetMask1 = interface{}

// IPAddressesV115IPv4Address_SubnetMask The IPv4 subnet mask.
type IPAddressesV115IPv4Address_SubnetMask struct {
	union json.RawMessage
}

// IPAddressesV115IPv4AddressOrigin defines model for IPAddresses_v1_1_5_IPv4AddressOrigin.
type IPAddressesV115IPv4AddressOrigin string

// IPAddressesV115IPv6Address This type describes an IPv6 address.
type IPAddressesV115IPv6Address struct {
	// Address The IPv6 address.
	Address *string `json:"Address"`

	// AddressOrigin This indicates how the address was determined.
	AddressOrigin *IPAddressesV115IPv6Address_AddressOrigin `json:"AddressOrigin,omitempty"`

	// AddressState The current RFC4862-defined state of this address.
	AddressState *IPAddressesV115IPv6Address_AddressState `json:"AddressState,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PrefixLength The IPv6 address prefix Length.
	PrefixLength *IPAddressesV115IPv6Address_PrefixLength `json:"PrefixLength,omitempty"`
}

// IPAddressesV115IPv6AddressAddressOrigin1 defines model for .
type IPAddressesV115IPv6AddressAddressOrigin1 = interface{}

// IPAddressesV115IPv6Address_AddressOrigin This indicates how the address was determined.
type IPAddressesV115IPv6Address_AddressOrigin struct {
	union json.RawMessage
}

// IPAddressesV115IPv6AddressAddressState1 defines model for .
type IPAddressesV115IPv6AddressAddressState1 = interface{}

// IPAddressesV115IPv6Address_AddressState The current RFC4862-defined state of this address.
type IPAddressesV115IPv6Address_AddressState struct {
	union json.RawMessage
}

// IPAddressesV115IPv6AddressPrefixLength1 defines model for .
type IPAddressesV115IPv6AddressPrefixLength1 = interface{}

// IPAddressesV115IPv6Address_PrefixLength The IPv6 address prefix Length.
type IPAddressesV115IPv6Address_PrefixLength struct {
	union json.RawMessage
}

// IPAddressesV115IPv6AddressOrigin defines model for IPAddresses_v1_1_5_IPv6AddressOrigin.
type IPAddressesV115IPv6AddressOrigin string

// IPAddressesV115IPv6GatewayStaticAddress This type represents a single IPv6 static address to be assigned on a network interface.
type IPAddressesV115IPv6GatewayStaticAddress struct {
	// Address A valid IPv6 address.
	Address *string `json:"Address"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PrefixLength The IPv6 network prefix length, in bits, for this address.
	PrefixLength *IPAddressesV115IPv6GatewayStaticAddress_PrefixLength `json:"PrefixLength,omitempty"`
}

// IPAddressesV115IPv6GatewayStaticAddressPrefixLength1 defines model for .
type IPAddressesV115IPv6GatewayStaticAddressPrefixLength1 = interface{}

// IPAddressesV115IPv6GatewayStaticAddress_PrefixLength The IPv6 network prefix length, in bits, for this address.
type IPAddressesV115IPv6GatewayStaticAddress_PrefixLength struct {
	union json.RawMessage
}

// IPAddressesV115IPv6StaticAddress This type represents a single IPv6 static address to be assigned on a network interface.
type IPAddressesV115IPv6StaticAddress struct {
	// Address A valid IPv6 address.
	Address *string `json:"Address"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PrefixLength The prefix length, in bits, of this IPv6 address.
	PrefixLength IPAddressesV115IPv6StaticAddress_PrefixLength `json:"PrefixLength"`
}

// IPAddressesV115IPv6StaticAddressPrefixLength1 defines model for .
type IPAddressesV115IPv6StaticAddressPrefixLength1 = interface{}

// IPAddressesV115IPv6StaticAddress_PrefixLength The prefix length, in bits, of this IPv6 address.
type IPAddressesV115IPv6StaticAddress_PrefixLength struct {
	union json.RawMessage
}

// IPAddressesV115PrefixLength defines model for IPAddresses_v1_1_5_PrefixLength.
type IPAddressesV115PrefixLength = int64

// IPAddressesV115SubnetMask defines model for IPAddresses_v1_1_5_SubnetMask.
type IPAddressesV115SubnetMask = string

// PCIeDevicePCIeTypes defines model for PCIeDevice_PCIeTypes.
type PCIeDevicePCIeTypes string

// PCIeDeviceV1160PCIeInterface Properties that describe a PCIe interface.
type PCIeDeviceV1160PCIeInterface struct {
	// LanesInUse The number of PCIe lanes in use by this device.
	LanesInUse *int64 `json:"LanesInUse"`

	// MaxLanes The number of PCIe lanes supported by this device.
	MaxLanes *int64 `json:"MaxLanes"`

	// MaxPCIeType The highest version of the PCIe specification supported by this device.
	MaxPCIeType *PCIeDeviceV1160PCIeInterface_MaxPCIeType `json:"MaxPCIeType,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PCIeType The version of the PCIe specification in use by this device.
	PCIeType *PCIeDeviceV1160PCIeInterface_PCIeType `json:"PCIeType,omitempty"`
}

// PCIeDeviceV1160PCIeInterfaceMaxPCIeType1 defines model for .
type PCIeDeviceV1160PCIeInterfaceMaxPCIeType1 = interface{}

// PCIeDeviceV1160PCIeInterface_MaxPCIeType The highest version of the PCIe specification supported by this device.
type PCIeDeviceV1160PCIeInterface_MaxPCIeType struct {
	union json.RawMessage
}

// PCIeDeviceV1160PCIeInterfacePCIeType1 defines model for .
type PCIeDeviceV1160PCIeInterfacePCIeType1 = interface{}

// PCIeDeviceV1160PCIeInterface_PCIeType The version of the PCIe specification in use by this device.
type PCIeDeviceV1160PCIeInterface_PCIeType struct {
	union json.RawMessage
}

// ProtocolProtocol defines model for Protocol_Protocol.
type ProtocolProtocol string

// RedundancyV142Actions The available actions for this resource.
type RedundancyV142Actions struct {
	// Oem The available OEM-specific actions for this resource.
	Oem *RedundancyV142OemActions `json:"Oem,omitempty"`
}

// RedundancyV142OemActions The available OEM-specific actions for this resource.
type RedundancyV142OemActions map[string]interface{}

// RedundancyV142Redundancy The common redundancy definition and structure used in other Redfish schemas.
type RedundancyV142Redundancy struct {
	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// Actions The available actions for this resource.
	Actions *RedundancyV142Actions `json:"Actions,omitempty"`

	// MaxNumSupported The maximum number of members allowable for this particular redundancy group.
	MaxNumSupported *int64 `json:"MaxNumSupported"`

	// MemberId The unique identifier for the member within an array.
	MemberId *string `json:"MemberId,omitempty"`

	// MinNumNeeded The minimum number of members needed for this group to be redundant.
	MinNumNeeded *int64 `json:"MinNumNeeded"`

	// Mode The redundancy mode of the group.
	Mode RedundancyV142Redundancy_Mode `json:"Mode"`

	// Name The name of the resource or array member.
	Name *string `json:"Name,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// RedundancyEnabled An indication of whether redundancy is enabled.
	RedundancyEnabled *bool `json:"RedundancyEnabled"`

	// RedundancySet The links to components of this redundancy set.
	RedundancySet *[]OdataV4IdRef `json:"RedundancySet,omitempty"`

	// RedundancySetOdataCount The number of items in a collection.
	RedundancySetOdataCount *OdataV4Count `json:"RedundancySet@odata.count,omitempty"`

	// Status The status and health of a resource and its children.
	Status ResourceStatus `json:"Status"`
}

// RedundancyV142RedundancyMode1 defines model for .
type RedundancyV142RedundancyMode1 = interface{}

// RedundancyV142Redundancy_Mode The redundancy mode of the group.
type RedundancyV142Redundancy_Mode struct {
	union json.RawMessage
}

// RedundancyV142RedundancyMode defines model for Redundancy_v1_4_2_RedundancyMode.
type RedundancyV142RedundancyMode string

// ResolutionStepV101ResolutionStep This type describes a recommended step of the service-defined resolution.
type ResolutionStepV101ResolutionStep struct {
	// ActionParameters The parameters of the action URI for a resolution step.
	ActionParameters *[]ResolutionStepV101ResolutionStep_ActionParameters_Item `json:"ActionParameters,omitempty"`

	// ActionURI The action URI for a resolution step.
	ActionURI *string `json:"ActionURI,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Priority The priority in the set of resolution steps.
	Priority *int64 `json:"Priority"`

	// ResolutionType The type of the resolution step.
	ResolutionType *ResolutionStepV101ResolutionStep_ResolutionType `json:"ResolutionType,omitempty"`

	// RetryCount The number of retries for a resolution step.
	RetryCount *int64 `json:"RetryCount"`

	// RetryIntervalSeconds The interval between retries for a resolution step.
	RetryIntervalSeconds *int64 `json:"RetryIntervalSeconds"`

	// TargetComponentURI The target URI of the component for a resolution step.
	TargetComponentURI *string `json:"TargetComponentURI"`
}

// ResolutionStepV101ResolutionStepActionParameters1 defines model for .
type ResolutionStepV101ResolutionStepActionParameters1 = interface{}

// ResolutionStepV101ResolutionStep_ActionParameters_Item defines model for ResolutionStep_v1_0_1_ResolutionStep.ActionParameters.Item.
type ResolutionStepV101ResolutionStep_ActionParameters_Item struct {
	union json.RawMessage
}

// ResolutionStepV101ResolutionStepResolutionType1 defines model for .
type ResolutionStepV101ResolutionStepResolutionType1 = interface{}

// ResolutionStepV101ResolutionStep_ResolutionType The type of the resolution step.
type ResolutionStepV101ResolutionStep_ResolutionType struct {
	union json.RawMessage
}

// ResolutionStepV101ResolutionType defines model for ResolutionStep_v1_0_1_ResolutionType.
type ResolutionStepV101ResolutionType string

// ResourceCondition A condition that requires attention.
type ResourceCondition struct {
	// LogEntry A reference to a resource.
	LogEntry *OdataV4IdRef `json:"LogEntry,omitempty"`

	// Message The human-readable message for this condition.
	Message *string `json:"Message,omitempty"`

	// MessageArgs An array of message arguments that are substituted for the arguments in the message when looked up in the message registry.
	MessageArgs *[]string `json:"MessageArgs,omitempty"`

	// MessageId The identifier for the message.
	MessageId *string `json:"MessageId,omitempty"`

	// OriginOfCondition A reference to a resource.
	OriginOfCondition *OdataV4IdRef `json:"OriginOfCondition,omitempty"`

	// Resolution Suggestions on how to resolve the condition.
	Resolution *string `json:"Resolution,omitempty"`

	// ResolutionSteps The list of recommended steps to resolve the condition.
	ResolutionSteps *[]ResolutionStepV101ResolutionStep `json:"ResolutionSteps,omitempty"`
	Severity        *ResourceHealth                     `json:"Severity,omitempty"`

	// Timestamp The time the condition occurred.
	Timestamp *time.Time `json:"Timestamp,omitempty"`

	// UserAuthenticationSource The source of authentication for the username property associated with the condition.
	UserAuthenticationSource *string `json:"UserAuthenticationSource"`

	// Username The username of the account associated with the condition.
	Username *string `json:"Username"`
}

// ResourceDescription The description of this resource.  Used for commonality in the schema definitions.
type ResourceDescription = string

// ResourceHealth defines model for Resource_Health.
type ResourceHealth string

// ResourceId The unique identifier for this resource within the collection of similar resources.
type ResourceId = string

// ResourceName The name of the resource or array member.
type ResourceName = string

// ResourceOem The OEM extension.
type ResourceOem map[string]interface{}

// ResourcePowerState defines model for Resource_PowerState.
type ResourcePowerState string

// ResourceState defines model for Resource_State.
type ResourceState string

// ResourceStatus The status and health of a resource and its children.
type ResourceStatus struct {
	// Conditions Conditions in this resource that require attention.
	Conditions *[]ResourceStatus_Conditions_Item `json:"Conditions,omitempty"`

	// Health The health state of this resource in the absence of its dependent resources.
	Health *ResourceStatus_Health `json:"Health,omitempty"`

	// HealthRollup The overall health state from the view of this resource.
	HealthRollup *ResourceStatus_HealthRollup `json:"HealthRollup,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// State The state of the resource.
	State *ResourceStatus_State `json:"State,omitempty"`
}

// ResourceStatusConditions1 defines model for .
type ResourceStatusConditions1 = interface{}

// ResourceStatus_Conditions_Item defines model for Resource_Status.Conditions.Item.
type ResourceStatus_Conditions_Item struct {
	union json.RawMessage
}

// ResourceStatusHealth1 defines model for .
type ResourceStatusHealth1 = interface{}

// ResourceStatus_Health The health state of this resource in the absence of its dependent resources.
type ResourceStatus_Health struct {
	union json.RawMessage
}

// ResourceStatusHealthRollup1 defines model for .
type ResourceStatusHealthRollup1 = interface{}

// ResourceStatus_HealthRollup The overall health state from the view of this resource.
type ResourceStatus_HealthRollup struct {
	union json.RawMessage
}

// ResourceStatusState1 defines model for .
type ResourceStatusState1 = interface{}

// ResourceStatus_State The state of the resource.
type ResourceStatus_State struct {
	union json.RawMessage
}

// ResourceUUID defines model for Resource_UUID.
type ResourceUUID = string

// ResourceV1200ContactInfo Contact information for this resource.
type ResourceV1200ContactInfo struct {
	// ContactName Name of this contact.
	ContactName *string `json:"ContactName"`

	// EmailAddress Email address for this contact.
	EmailAddress *string `json:"EmailAddress"`

	// PhoneNumber Phone number for this contact.
	PhoneNumber *string `json:"PhoneNumber"`
}

// ResourceV1200DurableNameFormat defines model for Resource_v1_20_0_DurableNameFormat.
type ResourceV1200DurableNameFormat string

// ResourceV1200Identifier Any additional identifiers for a resource.
type ResourceV1200Identifier struct {
	// DurableName The world-wide, persistent name of the resource.
	DurableName *string `json:"DurableName"`

	// DurableNameFormat The format of the durable name property.
	DurableNameFormat *ResourceV1200Identifier_DurableNameFormat `json:"DurableNameFormat,omitempty"`
}

// ResourceV1200IdentifierDurableNameFormat1 defines model for .
type ResourceV1200IdentifierDurableNameFormat1 = interface{}

// ResourceV1200Identifier_DurableNameFormat The format of the durable name property.
type ResourceV1200Identifier_DurableNameFormat struct {
	union json.RawMessage
}

// ResourceV1200Location The location of a resource.
type ResourceV1200Location struct {
	// AltitudeMeters The altitude of the resource in meters.
	AltitudeMeters *float32 `json:"AltitudeMeters"`

	// Contacts An array of contact information.
	Contacts *[]ResourceV1200Location_Contacts_Item `json:"Contacts,omitempty"`

	// Info The location of the resource.
	// Deprecated:
	Info *string `json:"Info"`

	// InfoFormat The format of the `Info` property.
	// Deprecated:
	InfoFormat *string `json:"InfoFormat"`

	// Latitude The latitude of the resource.
	Latitude *float32 `json:"Latitude"`

	// Longitude The longitude of the resource in degree units.
	Longitude *float32 `json:"Longitude"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PartLocation The part location for a resource within an enclosure.
	PartLocation *ResourceV1200PartLocation `json:"PartLocation,omitempty"`

	// PartLocationContext Human-readable string to enable differentiation between `PartLocation` values for parts in the same enclosure, which might include hierarchical information of containing `PartLocation` values for the part.
	PartLocationContext *string `json:"PartLocationContext"`

	// PhysicalAddress The physical address for a resource.
	PhysicalAddress *ResourceV1200PhysicalAddress `json:"PhysicalAddress,omitempty"`

	// Placement The placement within the addressed location.
	Placement *ResourceV1200Placement `json:"Placement,omitempty"`

	// PostalAddress The postal address for a resource.
	// Deprecated:
	PostalAddress *ResourceV1200PostalAddress `json:"PostalAddress,omitempty"`
}

// ResourceV1200LocationContacts1 defines model for .
type ResourceV1200LocationContacts1 = interface{}

// ResourceV1200Location_Contacts_Item defines model for Resource_v1_20_0_Location.Contacts.Item.
type ResourceV1200Location_Contacts_Item struct {
	union json.RawMessage
}

// ResourceV1200LocationType The types of locations for a part within an enclosure.
type ResourceV1200LocationType string

// ResourceV1200Orientation The orientations for the ordering of the part location ordinal value.
type ResourceV1200Orientation string

// ResourceV1200PartLocation The part location for a resource within an enclosure.
type ResourceV1200PartLocation struct {
	// LocationOrdinalValue The number that represents the location of the part.  For example, if `LocationType` is `Slot` and this unit is in slot 2, the LocationOrdinalValue is `2`.
	LocationOrdinalValue *int64 `json:"LocationOrdinalValue"`

	// LocationType The type of location of the part.
	LocationType *ResourceV1200PartLocation_LocationType `json:"LocationType,omitempty"`

	// Orientation The orientation for the ordering of the slot enumeration used by the `LocationOrdinalValue` property.
	Orientation *ResourceV1200PartLocation_Orientation `json:"Orientation,omitempty"`

	// Reference The reference point for the part location.  Provides guidance about the general location of the part.
	Reference *ResourceV1200PartLocation_Reference `json:"Reference,omitempty"`

	// ServiceLabel The label of the part location, such as a silk-screened name or a printed label.
	ServiceLabel *string `json:"ServiceLabel"`
}

// ResourceV1200PartLocationLocationType1 defines model for .
type ResourceV1200PartLocationLocationType1 = interface{}

// ResourceV1200PartLocation_LocationType The type of location of the part.
type ResourceV1200PartLocation_LocationType struct {
	union json.RawMessage
}

// ResourceV1200PartLocationOrientation1 defines model for .
type ResourceV1200PartLocationOrientation1 = interface{}

// ResourceV1200PartLocation_Orientation The orientation for the ordering of the slot enumeration used by the `LocationOrdinalValue` property.
type ResourceV1200PartLocation_Orientation struct {
	union json.RawMessage
}

// ResourceV1200PartLocationReference1 defines model for .
type ResourceV1200PartLocationReference1 = interface{}

// ResourceV1200PartLocation_Reference The reference point for the part location.  Provides guidance about the general location of the part.
type ResourceV1200PartLocation_Reference struct {
	union json.RawMessage
}

// ResourceV1200PhysicalAddress The physical address for a resource.
type ResourceV1200PhysicalAddress struct {
	// City City, township, or shi (JP).
	City *string `json:"City"`

	// Country The country.
	Country *string `json:"Country"`

	// ISOCountryCode The ISO 3166-1 country code.
	ISOCountryCode *string `json:"ISOCountryCode"`

	// ISOSubdivisionCode ISO 3166-2 subdivision code.
	ISOSubdivisionCode *string `json:"ISOSubdivisionCode"`

	// PostalCode The postal code.
	PostalCode *string `json:"PostalCode"`

	// StateOrProvince State or province.
	StateOrProvince *string `json:"StateOrProvince"`

	// StreetAddress The street-level address, including building, room, or other identifiers.
	StreetAddress *string `json:"StreetAddress"`
}

// ResourceV1200Placement The placement within the addressed location.
type ResourceV1200Placement struct {
	// AdditionalInfo Area designation or other additional info.
	AdditionalInfo *string `json:"AdditionalInfo"`

	// Rack The name of a rack location within a row.
	Rack *string `json:"Rack"`

	// RackOffset The vertical location of the item, in terms of RackOffsetUnits.
	RackOffset *int64 `json:"RackOffset"`

	// RackOffsetUnits The type of rack units in use.
	RackOffsetUnits *ResourceV1200Placement_RackOffsetUnits `json:"RackOffsetUnits,omitempty"`

	// Row The name of the row.
	Row *string `json:"Row"`
}

// ResourceV1200PlacementRackOffsetUnits1 defines model for .
type ResourceV1200PlacementRackOffsetUnits1 = interface{}

// ResourceV1200Placement_RackOffsetUnits The type of rack units in use.
type ResourceV1200Placement_RackOffsetUnits struct {
	union json.RawMessage
}

// ResourceV1200PostalAddress The postal address for a resource.
type ResourceV1200PostalAddress struct {
	// AdditionalCode The additional code.
	AdditionalCode *string `json:"AdditionalCode"`

	// AdditionalInfo The room designation or other additional information.
	AdditionalInfo *string `json:"AdditionalInfo"`

	// Building The name of the building.
	Building *string `json:"Building"`

	// City City, township, or shi (JP).
	City *string `json:"City"`

	// Community The postal community name.
	Community *string `json:"Community"`

	// Country The country.
	Country *string `json:"Country"`

	// District A county, parish, gun (JP), or district (IN).
	District *string `json:"District"`

	// Division City division, borough, city district, ward, or chou (JP).
	Division *string `json:"Division"`

	// Floor The floor.
	Floor *string `json:"Floor"`

	// GPSCoords The GPS coordinates of the part.
	// Deprecated:
	GPSCoords *string `json:"GPSCoords"`

	// HouseNumber The numeric portion of house number.
	HouseNumber *int64 `json:"HouseNumber"`

	// HouseNumberSuffix The house number suffix.
	HouseNumberSuffix *string `json:"HouseNumberSuffix"`

	// Landmark The landmark.
	Landmark *string `json:"Landmark"`

	// LeadingStreetDirection A leading street direction.
	LeadingStreetDirection *string `json:"LeadingStreetDirection"`

	// Location The room designation or other additional information.
	// Deprecated:
	Location *string `json:"Location"`

	// Name The name.
	Name *string `json:"Name"`

	// Neighborhood Neighborhood or block.
	Neighborhood *string `json:"Neighborhood"`

	// POBox The post office box (PO box).
	POBox *string `json:"POBox"`

	// PlaceType The description of the type of place that is addressed.
	PlaceType *string `json:"PlaceType"`

	// PostalCode The postal code or zip code.
	PostalCode *string `json:"PostalCode"`

	// Road The primary road or street.
	Road *string `json:"Road"`

	// RoadBranch The road branch.
	RoadBranch *string `json:"RoadBranch"`

	// RoadPostModifier The road post-modifier.
	RoadPostModifier *string `json:"RoadPostModifier"`

	// RoadPreModifier The road pre-modifier.
	RoadPreModifier *string `json:"RoadPreModifier"`

	// RoadSection The road section.
	RoadSection *string `json:"RoadSection"`

	// RoadSubBranch The road sub branch.
	RoadSubBranch *string `json:"RoadSubBranch"`

	// Room The name or number of the room.
	Room *string `json:"Room"`

	// Seat The seat, such as the desk, cubicle, or workstation.
	Seat *string `json:"Seat"`

	// Street Street name.
	Street *string `json:"Street"`

	// StreetSuffix Avenue, Platz, Street, Circle.
	StreetSuffix *string `json:"StreetSuffix"`

	// Territory A top-level subdivision within a country.
	Territory *string `json:"Territory"`

	// TrailingStreetSuffix A trailing street suffix.
	TrailingStreetSuffix *string `json:"TrailingStreetSuffix"`

	// Unit The name or number of the apartment unit or suite.
	Unit *string `json:"Unit"`
}

// ResourceV1200RackUnits The type of rack unit in use.
type ResourceV1200RackUnits string

// ResourceV1200Reference The reference areas for the location of the part within an enclosure.
type ResourceV1200Reference string

// ServiceRoot The ServiceRoot schema describes the root of the Redfish service, located at the '/redfish/v1' URI.  All other resources accessible through the Redfish interface on this device are linked directly or indirectly from the service root.
type ServiceRoot = ServiceRootV1161ServiceRoot

// ServiceRootV1161DeepOperations The information about deep operations that the service supports.
type ServiceRootV1161DeepOperations struct {
	// DeepPATCH An indication of whether the service supports the deep PATCH operation.
	DeepPATCH *bool `json:"DeepPATCH,omitempty"`

	// DeepPOST An indication of whether the service supports the deep POST operation.
	DeepPOST *bool `json:"DeepPOST,omitempty"`

	// MaxLevels The maximum levels of resources allowed in deep operations.
	MaxLevels *int64 `json:"MaxLevels,omitempty"`
}

// ServiceRootV1161Expand The information about the use of `$expand` in the service.
type ServiceRootV1161Expand struct {
	// ExpandAll An indication of whether the service supports the asterisk (`*`) option of the `$expand` query parameter.
	ExpandAll *bool `json:"ExpandAll,omitempty"`

	// Levels An indication of whether the service supports the `$levels` option of the `$expand` query parameter.
	Levels *bool `json:"Levels,omitempty"`

	// Links An indication of whether this service supports the tilde (`~`) option of the `$expand` query parameter.
	Links *bool `json:"Links,omitempty"`

	// MaxLevels The maximum `$levels` option value in the `$expand` query parameter.
	MaxLevels *int64 `json:"MaxLevels,omitempty"`

	// NoLinks An indication of whether the service supports the period (`.`) option of the `$expand` query parameter.
	NoLinks *bool `json:"NoLinks,omitempty"`
}

// ServiceRootV1161Links The links to other resources that are related to this resource.
type ServiceRootV1161Links struct {
	// ManagerProvidingService A reference to a resource.
	ManagerProvidingService *OdataV4IdRef `json:"ManagerProvidingService,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Sessions A reference to a resource.
	Sessions OdataV4IdRef `json:"Sessions"`
}

// ServiceRootV1161ProtocolFeaturesSupported The information about protocol features that the service supports.
type ServiceRootV1161ProtocolFeaturesSupported struct {
	// DeepOperations The information about deep operations that the service supports.
	DeepOperations *ServiceRootV1161DeepOperations `json:"DeepOperations,omitempty"`

	// ExcerptQuery An indication of whether the service supports the `excerpt` query parameter.
	ExcerptQuery *bool `json:"ExcerptQuery,omitempty"`

	// ExpandQuery The information about the use of `$expand` in the service.
	ExpandQuery *ServiceRootV1161Expand `json:"ExpandQuery,omitempty"`

	// FilterQuery An indication of whether the service supports the `$filter` query parameter.
	FilterQuery *bool `json:"FilterQuery,omitempty"`

	// MultipleHTTPRequests An indication of whether the service supports multiple outstanding HTTP requests.
	MultipleHTTPRequests *bool `json:"MultipleHTTPRequests,omitempty"`

	// OnlyMemberQuery An indication of whether the service supports the `only` query parameter.
	OnlyMemberQuery *bool `json:"OnlyMemberQuery,omitempty"`

	// SelectQuery An indication of whether the service supports the `$select` query parameter.
	SelectQuery *bool `json:"SelectQuery,omitempty"`
}

// ServiceRootV1161ServiceRoot The ServiceRoot schema describes the root of the Redfish service, located at the '/redfish/v1' URI.  All other resources accessible through the Redfish interface on this device are linked directly or indirectly from the service root.
type ServiceRootV1161ServiceRoot struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// AccountService A reference to a resource.
	AccountService *OdataV4IdRef `json:"AccountService,omitempty"`

	// AggregationService A reference to a resource.
	AggregationService *OdataV4IdRef `json:"AggregationService,omitempty"`

	// Cables A reference to a resource.
	Cables *OdataV4IdRef `json:"Cables,omitempty"`

	// CertificateService A reference to a resource.
	CertificateService *OdataV4IdRef `json:"CertificateService,omitempty"`

	// Chassis A reference to a resource.
	Chassis *OdataV4IdRef `json:"Chassis,omitempty"`

	// ComponentIntegrity A reference to a resource.
	ComponentIntegrity *OdataV4IdRef `json:"ComponentIntegrity,omitempty"`

	// CompositionService A reference to a resource.
	CompositionService *OdataV4IdRef `json:"CompositionService,omitempty"`

	// Description The description of this resource.  Used for commonality in the schema definitions.
	Description *ResourceDescription `json:"Description,omitempty"`

	// EventService A reference to a resource.
	EventService *OdataV4IdRef `json:"EventService,omitempty"`

	// Fabrics A reference to a resource.
	Fabrics *OdataV4IdRef `json:"Fabrics,omitempty"`

	// Facilities A reference to a resource.
	Facilities *OdataV4IdRef `json:"Facilities,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// JobService A reference to a resource.
	JobService *OdataV4IdRef `json:"JobService,omitempty"`

	// JsonSchemas A reference to a resource.
	JsonSchemas *OdataV4IdRef `json:"JsonSchemas,omitempty"`

	// KeyService A reference to a resource.
	KeyService *OdataV4IdRef `json:"KeyService,omitempty"`

	// LicenseService A reference to a resource.
	LicenseService *OdataV4IdRef `json:"LicenseService,omitempty"`

	// Links The links to other resources that are related to this resource.
	Links ServiceRootV1161Links `json:"Links"`

	// Managers A reference to a resource.
	Managers *OdataV4IdRef `json:"Managers,omitempty"`

	// NVMeDomains A reference to a resource.
	NVMeDomains *OdataV4IdRef `json:"NVMeDomains,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PowerEquipment A reference to a resource.
	PowerEquipment *OdataV4IdRef `json:"PowerEquipment,omitempty"`

	// Product The product associated with this Redfish service.
	Product *string `json:"Product"`

	// ProtocolFeaturesSupported The information about protocol features that the service supports.
	ProtocolFeaturesSupported *ServiceRootV1161ProtocolFeaturesSupported `json:"ProtocolFeaturesSupported,omitempty"`

	// RedfishVersion The version of the Redfish service.
	RedfishVersion *string `json:"RedfishVersion,omitempty"`

	// RegisteredClients A reference to a resource.
	RegisteredClients *OdataV4IdRef `json:"RegisteredClients,omitempty"`

	// Registries A reference to a resource.
	Registries *OdataV4IdRef `json:"Registries,omitempty"`

	// ResourceBlocks A reference to a resource.
	ResourceBlocks *OdataV4IdRef `json:"ResourceBlocks,omitempty"`

	// ServiceConditions A reference to a resource.
	ServiceConditions *OdataV4IdRef `json:"ServiceConditions,omitempty"`

	// ServiceIdentification The vendor or user-provided product and service identifier.
	ServiceIdentification *string `json:"ServiceIdentification,omitempty"`

	// SessionService A reference to a resource.
	SessionService *OdataV4IdRef `json:"SessionService,omitempty"`

	// Storage A reference to a resource.
	Storage *OdataV4IdRef `json:"Storage,omitempty"`

	// StorageServices A reference to a resource.
	StorageServices *OdataV4IdRef `json:"StorageServices,omitempty"`

	// StorageSystems A reference to a resource.
	StorageSystems *OdataV4IdRef `json:"StorageSystems,omitempty"`

	// Systems A reference to a resource.
	Systems *OdataV4IdRef `json:"Systems,omitempty"`

	// Tasks A reference to a resource.
	Tasks *OdataV4IdRef `json:"Tasks,omitempty"`

	// TelemetryService A reference to a resource.
	TelemetryService *OdataV4IdRef `json:"TelemetryService,omitempty"`

	// ThermalEquipment A reference to a resource.
	ThermalEquipment *OdataV4IdRef `json:"ThermalEquipment,omitempty"`

	// UUID Unique identifier for a service instance.  When SSDP is used, this value contains the same UUID returned in an HTTP `200 OK` response from an SSDP `M-SEARCH` request during discovery.
	UUID *string `json:"UUID"`

	// UpdateService A reference to a resource.
	UpdateService *OdataV4IdRef `json:"UpdateService,omitempty"`

	// Vendor The vendor or manufacturer associated with this Redfish service.
	Vendor *string `json:"Vendor"`
}

// SoftwareInventoryV1102MeasurementBlock The DSP0274-defined measurement block information.
type SoftwareInventoryV1102MeasurementBlock struct {
	// Measurement The hexadecimal string representation of the numeric value of the DSP0274-defined 'Measurement' field of the measurement block.
	Measurement *string `json:"Measurement"`

	// MeasurementIndex The DSP0274-defined 'Index' field of the measurement block.
	MeasurementIndex *int64 `json:"MeasurementIndex"`

	// MeasurementSize The DSP0274-defined 'MeasurementSize' field of the measurement block.
	MeasurementSize *int64 `json:"MeasurementSize"`

	// MeasurementSpecification The DSP0274-defined 'MeasurementSpecification' field of the measurement block.
	MeasurementSpecification *int64 `json:"MeasurementSpecification"`
}

// Storage The Storage schema defines a storage subsystem and its respective properties.  A storage subsystem represents a set of physical or virtual storage controllers and the resources, such as volumes, that can be accessed from that subsystem.
type Storage = StorageV1151Storage

// StorageCollection The collection of Storage resource instances.
type StorageCollection = StorageCollectionStorageCollection

// StorageCollectionStorageCollection The collection of Storage resource instances.
type StorageCollectionStorageCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Description The description of this resource.  Used for commonality in the schema definitions.
	Description *ResourceDescription `json:"Description,omitempty"`

	// Members The members of this collection.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// StoragePool A container of data storage.
type StoragePool = StoragePoolV190StoragePool

// StoragePoolCollection A Collection of StoragePool resource instances.
type StoragePoolCollection = StoragePoolCollectionStoragePoolCollection

// StoragePoolCollectionStoragePoolCollection A Collection of StoragePool resource instances.
type StoragePoolCollectionStoragePoolCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Description The description of this resource.  Used for commonality in the schema definitions.
	Description *ResourceDescription `json:"Description,omitempty"`

	// Members The value of each member references a StoragePool resource.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// StoragePoolNVMePoolType defines model for StoragePool_NVMePoolType.
type StoragePoolNVMePoolType string

// StoragePoolPoolType defines model for StoragePool_PoolType.
type StoragePoolPoolType string

// StoragePoolV190Actions The available actions for this resource.
type StoragePoolV190Actions struct {
	// HashStoragePoolAddDrives This action is used to add an additional drive, or set of drives, to a capacity source for the storage pool.
	HashStoragePoolAddDrives *StoragePoolV190AddDrives `json:"#StoragePool.AddDrives,omitempty"`

	// HashStoragePoolRemoveDrives This action is used to remove drive(s) from the capacity source for the StoragePool.
	HashStoragePoolRemoveDrives *StoragePoolV190RemoveDrives `json:"#StoragePool.RemoveDrives,omitempty"`

	// HashStoragePoolSetCompressionState This action is used to set the compression state of the pool.
	HashStoragePoolSetCompressionState *StoragePoolV190SetCompressionState `json:"#StoragePool.SetCompressionState,omitempty"`

	// HashStoragePoolSetDeduplicationState This action is used to set the dedupe state of the pool.
	HashStoragePoolSetDeduplicationState *StoragePoolV190SetDeduplicationState `json:"#StoragePool.SetDeduplicationState,omitempty"`

	// HashStoragePoolSetEncryptionState This action is used to set the encryption state of the pool.
	HashStoragePoolSetEncryptionState *StoragePoolV190SetEncryptionState `json:"#StoragePool.SetEncryptionState,omitempty"`

	// Oem The available OEM specific actions for this resource.
	Oem *StoragePoolV190OemActions `json:"Oem,omitempty"`
}

// StoragePoolV190AddDrives This action is used to add an additional drive, or set of drives, to a capacity source for the storage pool.
type StoragePoolV190AddDrives struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StoragePoolV190EndGrpLifetime This contains properties the Endurance Group Lifetime attributes.
type StoragePoolV190EndGrpLifetime struct {
	// DataUnitsRead The property contains the total number of data units read from this endurance group.
	DataUnitsRead *int64 `json:"DataUnitsRead"`

	// DataUnitsWritten The property contains the total number of data units written from this endurance group.
	DataUnitsWritten *int64 `json:"DataUnitsWritten"`

	// EnduranceEstimate This property contains an estimate of the total number of data bytes that may be written to the Endurance Group over the lifetime of the Endurance Group assuming a write amplication of 1.
	EnduranceEstimate *int64 `json:"EnduranceEstimate"`

	// ErrorInformationLogEntryCount This property contains the number of error information log entries over the life of the controller for the endurance group.
	ErrorInformationLogEntryCount *int64 `json:"ErrorInformationLogEntryCount"`

	// HostReadCommandCount This property contains the number of read commands completed by all controllers in the NVM subsystem for the Endurance Group.
	HostReadCommandCount *int64 `json:"HostReadCommandCount"`

	// HostWriteCommandCount This property contains the number of write commands completed by all controllers in the NVM subsystem for the Endurance Group.
	HostWriteCommandCount *int64 `json:"HostWriteCommandCount"`

	// MediaAndDataIntegrityErrorCount This property contains the number of occurences where the controller detected an unrecovered data integrity error for the Endurance Group.
	MediaAndDataIntegrityErrorCount *int64 `json:"MediaAndDataIntegrityErrorCount"`

	// MediaUnitsWritten The property contains the total number of data units written from this endurance group.
	MediaUnitsWritten *int64 `json:"MediaUnitsWritten"`

	// PercentUsed A vendor-specific estimate of the percent life used for the endurance group based on the actual usage and the manufacturer prediction of NVM life.
	PercentUsed *int64 `json:"PercentUsed"`
}

// StoragePoolV190Links The links object contains the links to other resources that are related to this resource.
type StoragePoolV190Links struct {
	// DedicatedSpareDrives An array of references to the drives which are dedicated spares for this StoragePool.
	DedicatedSpareDrives *[]OdataV4IdRef `json:"DedicatedSpareDrives,omitempty"`

	// DedicatedSpareDrivesOdataCount The number of items in a collection.
	DedicatedSpareDrivesOdataCount *OdataV4Count `json:"DedicatedSpareDrives@odata.count,omitempty"`

	// DefaultClassOfService A reference to a resource.
	DefaultClassOfService *OdataV4IdRef `json:"DefaultClassOfService,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// OwningStorageResource A reference to a resource.
	OwningStorageResource *OdataV4IdRef `json:"OwningStorageResource,omitempty"`

	// SpareResourceSets An array of references to SpareResourceSets.
	SpareResourceSets *[]OdataV4IdRef `json:"SpareResourceSets,omitempty"`

	// SpareResourceSetsOdataCount The number of items in a collection.
	SpareResourceSetsOdataCount *OdataV4Count `json:"SpareResourceSets@odata.count,omitempty"`
}

// StoragePoolV190NVMeEnduranceGroupProperties This contains properties to use when StoragePool is used to describe an NVMe Endurance Group.
type StoragePoolV190NVMeEnduranceGroupProperties struct {
	// EndGrpLifetime This property contains the Endurance Group Lifetime properties.
	EndGrpLifetime *StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime `json:"EndGrpLifetime,omitempty"`

	// PredictedMediaLifeLeftPercent The percentage of reads and writes that are predicted to be available for the media.
	PredictedMediaLifeLeftPercent *float32 `json:"PredictedMediaLifeLeftPercent"`
}

// StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1 defines model for .
type StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1 = interface{}

// StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime This property contains the Endurance Group Lifetime properties.
type StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime struct {
	union json.RawMessage
}

// StoragePoolV190NVMeProperties This contains properties to use when StoragePool is used to describe an NVMe construct.
type StoragePoolV190NVMeProperties struct {
	// NVMePoolType Indicates whether the StoragePool is used as an EnduranceGroup or an NVMSet.
	NVMePoolType *StoragePoolV190NVMeProperties_NVMePoolType `json:"NVMePoolType,omitempty"`
}

// StoragePoolV190NVMePropertiesNVMePoolType1 defines model for .
type StoragePoolV190NVMePropertiesNVMePoolType1 = interface{}

// StoragePoolV190NVMeProperties_NVMePoolType Indicates whether the StoragePool is used as an EnduranceGroup or an NVMSet.
type StoragePoolV190NVMeProperties_NVMePoolType struct {
	union json.RawMessage
}

// StoragePoolV190NVMeSetProperties This contains properties to use when StoragePool is used to describe an NVMe Set.
type StoragePoolV190NVMeSetProperties struct {
	// EnduranceGroupIdentifier A 16-bit hex value that contains the endurance group identifier.
	EnduranceGroupIdentifier *string `json:"EnduranceGroupIdentifier"`

	// OptimalWriteSizeBytes This property contains the Optimal Write Size in Bytes for this NVMe Set.
	OptimalWriteSizeBytes *int64 `json:"OptimalWriteSizeBytes"`

	// Random4kReadTypicalNanoSeconds Indicates the typical time to complete a 4k read in 100 nano-second units when the NVM Set is in a Predictable Latency Mode Deterministic Window and there is 1 outstanding command per NVM Set.
	Random4kReadTypicalNanoSeconds *int64 `json:"Random4kReadTypicalNanoSeconds"`

	// SetIdentifier A 16-bit hex value that contains the NVMe Set group identifier.
	SetIdentifier *string `json:"SetIdentifier"`

	// UnallocatedNVMNamespaceCapacityBytes Indicates the unallocated capacity of the NVMe Set in bytes.
	UnallocatedNVMNamespaceCapacityBytes *int64 `json:"UnallocatedNVMNamespaceCapacityBytes"`
}

// StoragePoolV190OemActions The available OEM specific actions for this resource.
type StoragePoolV190OemActions map[string]interface{}

// StoragePoolV190RemoveDrives This action is used to remove drive(s) from the capacity source for the StoragePool.
type StoragePoolV190RemoveDrives struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StoragePoolV190SetCompressionState This action is used to set the compression state of the pool.
type StoragePoolV190SetCompressionState struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StoragePoolV190SetDeduplicationState This action is used to set the dedupe state of the pool.
type StoragePoolV190SetDeduplicationState struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StoragePoolV190SetEncryptionState This action is used to set the encryption state of the pool.
type StoragePoolV190SetEncryptionState struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StoragePoolV190StoragePool A container of data storage.
type StoragePoolV190StoragePool struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Actions The available actions for this resource.
	Actions *StoragePoolV190Actions `json:"Actions,omitempty"`

	// AllocatedPools A reference to a resource.
	AllocatedPools *OdataV4IdRef `json:"AllocatedPools,omitempty"`

	// AllocatedVolumes A reference to a resource.
	AllocatedVolumes *OdataV4IdRef `json:"AllocatedVolumes,omitempty"`

	// BlockSizeBytes Maximum Block size in bytes.
	// Deprecated:
	BlockSizeBytes *int64 `json:"BlockSizeBytes"`

	// Capacity This is the schema definition for the Capacity of a device. It represents the properties for capacity for any data store.
	Capacity *CapacityV100Capacity `json:"Capacity,omitempty"`

	// CapacitySources An array of space allocations to this store.
	CapacitySources *[]CapacityV121CapacitySource `json:"CapacitySources,omitempty"`

	// CapacitySourcesOdataCount The number of items in a collection.
	CapacitySourcesOdataCount *OdataV4Count `json:"CapacitySources@odata.count,omitempty"`

	// ClassesOfService A reference to a resource.
	ClassesOfService *OdataV4IdRef `json:"ClassesOfService,omitempty"`

	// Compressed Indicator of whether or not the StoragePool has compression enabled.
	// Deprecated:
	Compressed *bool `json:"Compressed"`

	// CompressionEnabled Indicates whether or not compression is enabled on the storage pool.
	CompressionEnabled *bool `json:"CompressionEnabled"`

	// Deduplicated Indicator of whether or not the StoragePool has deduplication enabled.
	// Deprecated:
	Deduplicated *bool `json:"Deduplicated"`

	// DeduplicationEnabled Indicates whether or not deduplication is enabled on the storage pool.
	DeduplicationEnabled *bool `json:"DeduplicationEnabled"`

	// DefaultClassOfService A reference to a resource.
	DefaultClassOfService *OdataV4IdRef `json:"DefaultClassOfService,omitempty"`

	// DefaultCompressionBehavior Indicates the default dedupe behavior applied to the child resource (E.g., volume or storage pool) created out of the storage pool if the 'Compressed' property is not set on the create request.
	DefaultCompressionBehavior *bool `json:"DefaultCompressionBehavior"`

	// DefaultDeduplicationBehavior Indicates the default deduplication behavior applied to the child resource (E.g., volume or storage pool) created out of the storage pool if the 'Deduplicated' property is not set on the create request.
	DefaultDeduplicationBehavior *bool `json:"DefaultDeduplicationBehavior"`

	// DefaultEncryptionBehavior Indicates the default dedupe behavior applied to the child resource (E.g., volume or storage pool) created out of the storage pool if the 'Encrypted' property is not set on the create request.
	DefaultEncryptionBehavior *bool                                   `json:"DefaultEncryptionBehavior"`
	Description               *StoragePoolV190StoragePool_Description `json:"Description,omitempty"`

	// Encrypted Indicator of whether or not the StoragePool has encryption enabled.
	// Deprecated:
	Encrypted *bool `json:"Encrypted"`

	// EncryptionEnabled Indicates whether or not encryption is enabled on the storage pool.
	EncryptionEnabled *bool `json:"EncryptionEnabled"`

	// IOStatistics The properties of this type represent IO statistics.
	IOStatistics *IOStatisticsV104IOStatistics `json:"IOStatistics,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Identifier Any additional identifiers for a resource.
	Identifier *ResourceV1200Identifier `json:"Identifier,omitempty"`

	// Links The links object contains the links to other resources that are related to this resource.
	Links *StoragePoolV190Links `json:"Links,omitempty"`

	// LowSpaceWarningThresholdPercents Low space warning threshold specified in percents.
	LowSpaceWarningThresholdPercents *[]int64 `json:"LowSpaceWarningThresholdPercents,omitempty"`

	// MaxBlockSizeBytes Maximum Block size in bytes.
	MaxBlockSizeBytes *int64 `json:"MaxBlockSizeBytes"`

	// Metrics The link to the metrics for this storage pool.
	Metrics *StoragePoolV190StoragePool_Metrics `json:"Metrics,omitempty"`

	// NVMeEnduranceGroupProperties This property contains properties to use when StoragePool is used to describe an NVMe Endurance Group.
	NVMeEnduranceGroupProperties *StoragePoolV190StoragePool_NVMeEnduranceGroupProperties `json:"NVMeEnduranceGroupProperties,omitempty"`

	// NVMeProperties NVMe properties for this storage pool.
	NVMeProperties *StoragePoolV190StoragePool_NVMeProperties `json:"NVMeProperties,omitempty"`

	// NVMeSetProperties This property contains properties to use when StoragePool is used to describe an NVMe Set.
	NVMeSetProperties *StoragePoolV190StoragePool_NVMeSetProperties `json:"NVMeSetProperties,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PoolType Pool usage type for this storage pool.
	// Deprecated:
	PoolType *[]StoragePoolV190StoragePool_PoolType_Item `json:"PoolType,omitempty"`

	// RecoverableCapacitySourceCount Current number of capacity source resources that are available as replacements.
	RecoverableCapacitySourceCount *int64 `json:"RecoverableCapacitySourceCount"`

	// RemainingCapacityPercent The percentage of the capacity remaining in the StoragePool.
	RemainingCapacityPercent *int64 `json:"RemainingCapacityPercent"`

	// ReplicationEnabled Indicates whether or not replication is enabled on the storage pool.
	ReplicationEnabled *bool `json:"ReplicationEnabled"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// SupportedPoolTypes A collection of the Pool Types supported by the storage pool.
	SupportedPoolTypes *[]StoragePoolV190StoragePool_SupportedPoolTypes_Item `json:"SupportedPoolTypes,omitempty"`

	// SupportedProvisioningPolicies This collection specifies all supported storage allocation properties for the Storage Pool.
	SupportedProvisioningPolicies *[]StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item `json:"SupportedProvisioningPolicies,omitempty"`

	// SupportedRAIDTypes A collection of the RAID Types supported by the storage pool.
	SupportedRAIDTypes *[]StoragePoolV190StoragePool_SupportedRAIDTypes_Item `json:"SupportedRAIDTypes,omitempty"`
}

// StoragePoolV190StoragePoolDescription1 defines model for .
type StoragePoolV190StoragePoolDescription1 = interface{}

// StoragePoolV190StoragePool_Description defines model for StoragePoolV190StoragePool.Description.
type StoragePoolV190StoragePool_Description struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolMetrics1 defines model for .
type StoragePoolV190StoragePoolMetrics1 = interface{}

// StoragePoolV190StoragePool_Metrics The link to the metrics for this storage pool.
type StoragePoolV190StoragePool_Metrics struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1 defines model for .
type StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1 = interface{}

// StoragePoolV190StoragePool_NVMeEnduranceGroupProperties This property contains properties to use when StoragePool is used to describe an NVMe Endurance Group.
type StoragePoolV190StoragePool_NVMeEnduranceGroupProperties struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolNVMeProperties1 defines model for .
type StoragePoolV190StoragePoolNVMeProperties1 = interface{}

// StoragePoolV190StoragePool_NVMeProperties NVMe properties for this storage pool.
type StoragePoolV190StoragePool_NVMeProperties struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolNVMeSetProperties1 defines model for .
type StoragePoolV190StoragePoolNVMeSetProperties1 = interface{}

// StoragePoolV190StoragePool_NVMeSetProperties This property contains properties to use when StoragePool is used to describe an NVMe Set.
type StoragePoolV190StoragePool_NVMeSetProperties struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolPoolType1 defines model for .
type StoragePoolV190StoragePoolPoolType1 = interface{}

// StoragePoolV190StoragePool_PoolType_Item defines model for StoragePool_v1_9_0_StoragePool.PoolType.Item.
type StoragePoolV190StoragePool_PoolType_Item struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolSupportedPoolTypes1 defines model for .
type StoragePoolV190StoragePoolSupportedPoolTypes1 = interface{}

// StoragePoolV190StoragePool_SupportedPoolTypes_Item defines model for StoragePool_v1_9_0_StoragePool.SupportedPoolTypes.Item.
type StoragePoolV190StoragePool_SupportedPoolTypes_Item struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolSupportedProvisioningPolicies1 defines model for .
type StoragePoolV190StoragePoolSupportedProvisioningPolicies1 = interface{}

// StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item defines model for StoragePool_v1_9_0_StoragePool.SupportedProvisioningPolicies.Item.
type StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolSupportedRAIDTypes1 defines model for .
type StoragePoolV190StoragePoolSupportedRAIDTypes1 = interface{}

// StoragePoolV190StoragePool_SupportedRAIDTypes_Item defines model for StoragePool_v1_9_0_StoragePool.SupportedRAIDTypes.Item.
type StoragePoolV190StoragePool_SupportedRAIDTypes_Item struct {
	union json.RawMessage
}

// StorageReplicaInfoReplicaFaultDomain Values of ReplicaFaultDomain describe the fault domain for the replication relationship.
type StorageReplicaInfoReplicaFaultDomain string

// StorageReplicaInfoReplicaType Values of ReplicaType describe the intended outcome of the replication.
type StorageReplicaInfoReplicaType string

// StorageReplicaInfoReplicaUpdateMode Values of ReplicaUpdateMode describe whether the target elements will be updated synchronously or asynchronously.
type StorageReplicaInfoReplicaUpdateMode string

// StorageReplicaInfoV140ConsistencyState The values of ConsistencyState indicate the consistency type used by the source and its associated target group.
type StorageReplicaInfoV140ConsistencyState string

// StorageReplicaInfoV140ConsistencyStatus The values of ConsistencyStatus indicate the current status of consistency. Consistency may have been disabled or might be experiencing an error condition.
type StorageReplicaInfoV140ConsistencyStatus string

// StorageReplicaInfoV140ConsistencyType The values of ConsistencyType indicates the consistency type used by the source and its associated target group.
type StorageReplicaInfoV140ConsistencyType string

// StorageReplicaInfoV140ReplicaInfo Defines the characteristics of a replica.
type StorageReplicaInfoV140ReplicaInfo struct {
	// ConsistencyEnabled True if consistency is enabled.
	ConsistencyEnabled *bool `json:"ConsistencyEnabled"`

	// ConsistencyState The current state of consistency.
	ConsistencyState *StorageReplicaInfoV140ReplicaInfo_ConsistencyState `json:"ConsistencyState,omitempty"`

	// ConsistencyStatus The current status of consistency.
	ConsistencyStatus *StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus `json:"ConsistencyStatus,omitempty"`

	// ConsistencyType Indicates the consistency type used by the source and its associated target group.
	ConsistencyType *StorageReplicaInfoV140ReplicaInfo_ConsistencyType `json:"ConsistencyType,omitempty"`

	// DataProtectionLineOfService A reference to a resource.
	DataProtectionLineOfService *OdataV4IdRef `json:"DataProtectionLineOfService,omitempty"`

	// FailedCopyStopsHostIO If true, the storage array tells host to stop sending data to source element if copying to a remote element fails.
	FailedCopyStopsHostIO *bool `json:"FailedCopyStopsHostIO"`

	// PercentSynced Specifies the percent of the work completed to reach synchronization.
	PercentSynced *int64 `json:"PercentSynced"`

	// RemoteSourceReplica ReplicaFaultDomain describes the fault domain (local or remote) of the replica relationship.
	RemoteSourceReplica *string `json:"RemoteSourceReplica"`

	// Replica A reference to a resource.
	Replica *OdataV4IdRef `json:"Replica,omitempty"`

	// ReplicaFaultDomain ReplicaFaultDomain describes the fault domain (local or remote) of the replica relationship.
	ReplicaFaultDomain *StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain `json:"ReplicaFaultDomain,omitempty"`

	// ReplicaPriority The priority of background copy engine I/O to be managed relative to host I/O operations during a sequential background copy operation.
	ReplicaPriority *StorageReplicaInfoV140ReplicaInfo_ReplicaPriority `json:"ReplicaPriority,omitempty"`

	// ReplicaProgressStatus The status of the session with respect to Replication activity.
	ReplicaProgressStatus *StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus `json:"ReplicaProgressStatus,omitempty"`

	// ReplicaReadOnlyAccess This property specifies whether the source, the target, or both elements are read only to the host.
	ReplicaReadOnlyAccess *StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess `json:"ReplicaReadOnlyAccess,omitempty"`

	// ReplicaRecoveryMode Describes whether the copy operation continues after a broken link is restored.
	ReplicaRecoveryMode *StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode `json:"ReplicaRecoveryMode,omitempty"`

	// ReplicaRole The source or target role of this replica.
	// Deprecated:
	ReplicaRole *StorageReplicaInfoV140ReplicaInfo_ReplicaRole `json:"ReplicaRole,omitempty"`

	// ReplicaSkewBytes Applies to Adaptive mode and it describes maximum number of bytes the SyncedElement (target) can be out of sync.
	ReplicaSkewBytes *int64 `json:"ReplicaSkewBytes"`

	// ReplicaState ReplicaState describes the state of the relationship with respect to Replication activity.
	ReplicaState *StorageReplicaInfoV140ReplicaInfo_ReplicaState `json:"ReplicaState,omitempty"`

	// ReplicaType ReplicaType describes the intended outcome of the replication.
	ReplicaType *StorageReplicaInfoV140ReplicaInfo_ReplicaType `json:"ReplicaType,omitempty"`

	// ReplicaUpdateMode Describes whether the target elements will be updated synchronously or asynchronously.
	ReplicaUpdateMode *StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode `json:"ReplicaUpdateMode,omitempty"`

	// RequestedReplicaState The last requested or desired state for the relationship.
	RequestedReplicaState *StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState `json:"RequestedReplicaState,omitempty"`

	// SourceReplica A reference to a resource.
	SourceReplica *OdataV4IdRef `json:"SourceReplica,omitempty"`

	// SyncMaintained Synchronization is maintained.
	SyncMaintained *bool `json:"SyncMaintained"`

	// UndiscoveredElement This property specifies whether the source, the target, or both elements involved in a copy operation are undiscovered.
	UndiscoveredElement *StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement `json:"UndiscoveredElement,omitempty"`

	// WhenActivated Specifies when point-in-time copy was taken or when the replication relationship is activated, reactivated, resumed or re-established.
	WhenActivated *string `json:"WhenActivated"`

	// WhenDeactivated Specifies when the replication relationship is deactivated.
	WhenDeactivated *string `json:"WhenDeactivated"`

	// WhenEstablished Specifies when the replication relationship is established.
	WhenEstablished *string `json:"WhenEstablished"`

	// WhenSuspended Specifies when the replication relationship is suspended.
	WhenSuspended *string `json:"WhenSuspended"`

	// WhenSynced The point in time that the Elements were synchronized.
	WhenSynced *string `json:"WhenSynced"`

	// WhenSynchronized Specifies when the replication relationship is synchronized.
	WhenSynchronized *string `json:"WhenSynchronized"`
}

// StorageReplicaInfoV140ReplicaInfoConsistencyState1 defines model for .
type StorageReplicaInfoV140ReplicaInfoConsistencyState1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ConsistencyState The current state of consistency.
type StorageReplicaInfoV140ReplicaInfo_ConsistencyState struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoConsistencyStatus1 defines model for .
type StorageReplicaInfoV140ReplicaInfoConsistencyStatus1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus The current status of consistency.
type StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoConsistencyType1 defines model for .
type StorageReplicaInfoV140ReplicaInfoConsistencyType1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ConsistencyType Indicates the consistency type used by the source and its associated target group.
type StorageReplicaInfoV140ReplicaInfo_ConsistencyType struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain ReplicaFaultDomain describes the fault domain (local or remote) of the replica relationship.
type StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaPriority1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaPriority1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaPriority The priority of background copy engine I/O to be managed relative to host I/O operations during a sequential background copy operation.
type StorageReplicaInfoV140ReplicaInfo_ReplicaPriority struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus The status of the session with respect to Replication activity.
type StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess This property specifies whether the source, the target, or both elements are read only to the host.
type StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode Describes whether the copy operation continues after a broken link is restored.
type StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaRole1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaRole1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaRole The source or target role of this replica.
type StorageReplicaInfoV140ReplicaInfo_ReplicaRole struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaState1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaState1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaState ReplicaState describes the state of the relationship with respect to Replication activity.
type StorageReplicaInfoV140ReplicaInfo_ReplicaState struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaType1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaType1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaType ReplicaType describes the intended outcome of the replication.
type StorageReplicaInfoV140ReplicaInfo_ReplicaType struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode Describes whether the target elements will be updated synchronously or asynchronously.
type StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1 defines model for .
type StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState The last requested or desired state for the relationship.
type StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1 defines model for .
type StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement This property specifies whether the source, the target, or both elements involved in a copy operation are undiscovered.
type StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaPriority ReplicaPriority allows the priority of background copy engine I/O to be managed relative to host I/O operations during a sequential background copy operation.
type StorageReplicaInfoV140ReplicaPriority string

// StorageReplicaInfoV140ReplicaProgressStatus Values of ReplicaProgressStatus describe the status of the session with respect to Replication activity.
type StorageReplicaInfoV140ReplicaProgressStatus string

// StorageReplicaInfoV140ReplicaReadOnlyAccess Values of ReplicaReadOnlyAccess specify whether the source, the target, or both elements are read only to the host.
type StorageReplicaInfoV140ReplicaReadOnlyAccess string

// StorageReplicaInfoV140ReplicaRecoveryMode Values of ReplicaRecoveryMode describe whether the copy operation continues after a broken link is restored.
type StorageReplicaInfoV140ReplicaRecoveryMode string

// StorageReplicaInfoV140ReplicaRole Values of ReplicaRole specify whether the resource is a source of replication or the target of replication.
type StorageReplicaInfoV140ReplicaRole string

// StorageReplicaInfoV140ReplicaState Values of ReplicaState describe the state of the relationship with respect to Replication activity.
type StorageReplicaInfoV140ReplicaState string

// StorageReplicaInfoV140UndiscoveredElement Values of UndiscoveredElement specify whether the source, the target, or both elements involved in a copy operation are undiscovered. An element is considered undiscovered if its object model is not known to the service performing the copy operation.
type StorageReplicaInfoV140UndiscoveredElement string

// StorageService Collection of resources that are managed and exposed to hosts as a group.
type StorageService = StorageServiceV170StorageService

// StorageServiceCollection A collection of references to Storage Service resource instances.
type StorageServiceCollection = StorageServiceCollectionStorageServiceCollection

// StorageServiceCollectionStorageServiceCollection A collection of references to Storage Service resource instances.
type StorageServiceCollectionStorageServiceCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType   *OdataV4Type                                                  `json:"@odata.type,omitempty"`
	Description *StorageServiceCollectionStorageServiceCollection_Description `json:"Description,omitempty"`

	// Members The value of each member references a StorageService resource.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// StorageServiceCollectionStorageServiceCollectionDescription1 defines model for .
type StorageServiceCollectionStorageServiceCollectionDescription1 = interface{}

// StorageServiceCollectionStorageServiceCollection_Description defines model for StorageServiceCollectionStorageServiceCollection.Description.
type StorageServiceCollectionStorageServiceCollection_Description struct {
	union json.RawMessage
}

// StorageServiceV170Actions The available actions for this resource.
type StorageServiceV170Actions struct {
	// HashStorageServiceSetEncryptionKey This action is used to set the encryption key for the storage subsystem.
	HashStorageServiceSetEncryptionKey *StorageServiceV170SetEncryptionKey `json:"#StorageService.SetEncryptionKey,omitempty"`

	// Oem The available OEM specific actions for this resource.
	Oem *StorageServiceV170OemActions `json:"Oem,omitempty"`
}

// StorageServiceV170Links Contains links to other resources that are related to this resource.
type StorageServiceV170Links struct {
	// DataProtectionLoSCapabilities A reference to a resource.
	DataProtectionLoSCapabilities *OdataV4IdRef `json:"DataProtectionLoSCapabilities,omitempty"`

	// DataSecurityLoSCapabilities A reference to a resource.
	DataSecurityLoSCapabilities *OdataV4IdRef `json:"DataSecurityLoSCapabilities,omitempty"`

	// DataStorageLoSCapabilities A reference to a resource.
	DataStorageLoSCapabilities *OdataV4IdRef `json:"DataStorageLoSCapabilities,omitempty"`

	// DefaultClassOfService A reference to a resource.
	DefaultClassOfService *OdataV4IdRef `json:"DefaultClassOfService,omitempty"`

	// HostingSystem A reference to a resource.
	HostingSystem *OdataV4IdRef `json:"HostingSystem,omitempty"`

	// IOConnectivityLoSCapabilities A reference to a resource.
	IOConnectivityLoSCapabilities *OdataV4IdRef `json:"IOConnectivityLoSCapabilities,omitempty"`

	// IOPerformanceLoSCapabilities A reference to a resource.
	IOPerformanceLoSCapabilities *OdataV4IdRef `json:"IOPerformanceLoSCapabilities,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// StorageServiceV170OemActions The available OEM specific actions for this resource.
type StorageServiceV170OemActions map[string]interface{}

// StorageServiceV170SetEncryptionKey This action is used to set the encryption key for the storage subsystem.
type StorageServiceV170SetEncryptionKey struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StorageServiceV170StorageService Collection of resources that are managed and exposed to hosts as a group.
type StorageServiceV170StorageService struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Actions The available actions for this resource.
	Actions *StorageServiceV170Actions `json:"Actions,omitempty"`

	// ClassesOfService A reference to a resource.
	ClassesOfService *OdataV4IdRef `json:"ClassesOfService,omitempty"`

	// ClientEndpointGroups A reference to a resource.
	ClientEndpointGroups *OdataV4IdRef `json:"ClientEndpointGroups,omitempty"`

	// Connections A reference to a resource.
	Connections *OdataV4IdRef `json:"Connections,omitempty"`

	// ConsistencyGroups A reference to a resource.
	ConsistencyGroups *OdataV4IdRef `json:"ConsistencyGroups,omitempty"`

	// DataProtectionLoSCapabilities A reference to a resource.
	DataProtectionLoSCapabilities *OdataV4IdRef `json:"DataProtectionLoSCapabilities,omitempty"`

	// DataSecurityLoSCapabilities A reference to a resource.
	DataSecurityLoSCapabilities *OdataV4IdRef `json:"DataSecurityLoSCapabilities,omitempty"`

	// DataStorageLoSCapabilities A reference to a resource.
	DataStorageLoSCapabilities *OdataV4IdRef `json:"DataStorageLoSCapabilities,omitempty"`

	// DefaultClassOfService A reference to a resource.
	DefaultClassOfService *OdataV4IdRef                                 `json:"DefaultClassOfService,omitempty"`
	Description           *StorageServiceV170StorageService_Description `json:"Description,omitempty"`

	// Drives A reference to a resource.
	Drives *OdataV4IdRef `json:"Drives,omitempty"`

	// EndpointGroups A reference to a resource.
	EndpointGroups *OdataV4IdRef `json:"EndpointGroups,omitempty"`

	// Endpoints A reference to a resource.
	Endpoints *OdataV4IdRef `json:"Endpoints,omitempty"`

	// FileSystems A reference to a resource.
	FileSystems *OdataV4IdRef `json:"FileSystems,omitempty"`

	// IOConnectivityLoSCapabilities A reference to a resource.
	IOConnectivityLoSCapabilities *OdataV4IdRef `json:"IOConnectivityLoSCapabilities,omitempty"`

	// IOPerformanceLoSCapabilities A reference to a resource.
	IOPerformanceLoSCapabilities *OdataV4IdRef `json:"IOPerformanceLoSCapabilities,omitempty"`

	// IOStatistics The properties of this type represent IO statistics.
	IOStatistics *IOStatisticsV104IOStatistics `json:"IOStatistics,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Identifier Any additional identifiers for a resource.
	Identifier *ResourceV1200Identifier `json:"Identifier,omitempty"`

	// LinesOfService The LinesOService defined for this StorageService.
	LinesOfService *[]OdataV4IdRef `json:"LinesOfService,omitempty"`

	// LinesOfServiceOdataCount The number of items in a collection.
	LinesOfServiceOdataCount *OdataV4Count `json:"LinesOfService@odata.count,omitempty"`

	// Links Contains links to other resources that are related to this resource.
	Links *StorageServiceV170Links `json:"Links,omitempty"`

	// Metrics The link to the metrics for this storage service.
	Metrics *StorageServiceV170StorageService_Metrics `json:"Metrics,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Redundancy Redundancy information for the storage subsystem.
	Redundancy *[]RedundancyV142Redundancy `json:"Redundancy,omitempty"`

	// RedundancyOdataCount The number of items in a collection.
	RedundancyOdataCount *OdataV4Count `json:"Redundancy@odata.count,omitempty"`

	// ServerEndpointGroups A reference to a resource.
	ServerEndpointGroups *OdataV4IdRef `json:"ServerEndpointGroups,omitempty"`

	// SpareResourceSets An array of SpareResourceSets.
	SpareResourceSets *[]OdataV4IdRef `json:"SpareResourceSets,omitempty"`

	// SpareResourceSetsOdataCount The number of items in a collection.
	SpareResourceSetsOdataCount *OdataV4Count `json:"SpareResourceSets@odata.count,omitempty"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// StorageGroups A reference to a resource.
	StorageGroups *OdataV4IdRef `json:"StorageGroups,omitempty"`

	// StoragePools A reference to a resource.
	StoragePools *OdataV4IdRef `json:"StoragePools,omitempty"`

	// StorageSubsystems A reference to storage subsystems managed by this storage service.
	StorageSubsystems *[]OdataV4IdRef `json:"StorageSubsystems,omitempty"`

	// StorageSubsystemsOdataCount The number of items in a collection.
	StorageSubsystemsOdataCount *OdataV4Count `json:"StorageSubsystems@odata.count,omitempty"`

	// Volumes A reference to a resource.
	Volumes *OdataV4IdRef `json:"Volumes,omitempty"`
}

// StorageServiceV170StorageServiceDescription1 defines model for .
type StorageServiceV170StorageServiceDescription1 = interface{}

// StorageServiceV170StorageService_Description defines model for StorageServiceV170StorageService.Description.
type StorageServiceV170StorageService_Description struct {
	union json.RawMessage
}

// StorageServiceV170StorageServiceMetrics1 defines model for .
type StorageServiceV170StorageServiceMetrics1 = interface{}

// StorageServiceV170StorageService_Metrics The link to the metrics for this storage service.
type StorageServiceV170StorageService_Metrics struct {
	union json.RawMessage
}

// StorageV1151Actions The available actions for this resource.
type StorageV1151Actions struct {
	// HashStorageResetToDefaults The reset action resets the storage device to factory defaults.  This can cause the loss of data.
	HashStorageResetToDefaults *StorageV1151ResetToDefaults `json:"#Storage.ResetToDefaults,omitempty"`

	// HashStorageSetEncryptionKey This action sets the local encryption key for the storage subsystem.
	HashStorageSetEncryptionKey *StorageV1151SetEncryptionKey `json:"#Storage.SetEncryptionKey,omitempty"`

	// Oem The available OEM-specific actions for this resource.
	Oem *StorageV1151OemActions `json:"Oem,omitempty"`
}

// StorageV1151AutoVolumeCreate defines model for Storage_v1_15_1_AutoVolumeCreate.
type StorageV1151AutoVolumeCreate string

// StorageV1151CacheSummary This type describes the cache memory of the storage controller in general detail.
type StorageV1151CacheSummary struct {
	// PersistentCacheSizeMiB The portion of the cache memory that is persistent, measured in MiB.
	PersistentCacheSizeMiB *int64 `json:"PersistentCacheSizeMiB"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// TotalCacheSizeMiB The total configured cache memory, measured in MiB.
	TotalCacheSizeMiB *int64 `json:"TotalCacheSizeMiB"`
}

// StorageV1151EncryptionMode defines model for Storage_v1_15_1_EncryptionMode.
type StorageV1151EncryptionMode string

// StorageV1151HotspareActivationPolicy defines model for Storage_v1_15_1_HotspareActivationPolicy.
type StorageV1151HotspareActivationPolicy string

// StorageV1151Links The links to other resources that are related to this resource.
type StorageV1151Links struct {
	// Enclosures An array of links to the chassis to which this storage subsystem is attached.
	Enclosures *[]OdataV4IdRef `json:"Enclosures,omitempty"`

	// EnclosuresOdataCount The number of items in a collection.
	EnclosuresOdataCount *OdataV4Count `json:"Enclosures@odata.count,omitempty"`

	// HostingStorageSystems The storage systems that host this storage subsystem.
	HostingStorageSystems *[]OdataV4IdRef `json:"HostingStorageSystems,omitempty"`

	// HostingStorageSystemsOdataCount The number of items in a collection.
	HostingStorageSystemsOdataCount *OdataV4Count `json:"HostingStorageSystems@odata.count,omitempty"`

	// NVMeoFDiscoverySubsystems An array of links to the discovery subsystems that discovered this subsystem in an NVMe-oF environment.
	NVMeoFDiscoverySubsystems *[]OdataV4IdRef `json:"NVMeoFDiscoverySubsystems,omitempty"`

	// NVMeoFDiscoverySubsystemsOdataCount The number of items in a collection.
	NVMeoFDiscoverySubsystemsOdataCount *OdataV4Count `json:"NVMeoFDiscoverySubsystems@odata.count,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// SimpleStorage A reference to a resource.
	SimpleStorage *OdataV4IdRef `json:"SimpleStorage,omitempty"`

	// StorageServices An array of links to the storage services that connect to this storage subsystem.
	StorageServices *[]OdataV4IdRef `json:"StorageServices,omitempty"`

	// StorageServicesOdataCount The number of items in a collection.
	StorageServicesOdataCount *OdataV4Count `json:"StorageServices@odata.count,omitempty"`
}

// StorageV1151OemActions The available OEM-specific actions for this resource.
type StorageV1151OemActions map[string]interface{}

// StorageV1151Rates This type describes the various controller rates used for processes such as volume rebuild or consistency checks.
type StorageV1151Rates struct {
	// ConsistencyCheckRatePercent The percentage of controller resources used for performing a data consistency check on volumes.
	ConsistencyCheckRatePercent *int64 `json:"ConsistencyCheckRatePercent"`

	// RebuildRatePercent The percentage of controller resources used for rebuilding/repairing volumes.
	RebuildRatePercent *int64 `json:"RebuildRatePercent"`

	// TransformationRatePercent The percentage of controller resources used for transforming volumes from one configuration to another.
	TransformationRatePercent *int64 `json:"TransformationRatePercent"`
}

// StorageV1151ResetToDefaults The reset action resets the storage device to factory defaults.  This can cause the loss of data.
type StorageV1151ResetToDefaults struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StorageV1151SetEncryptionKey This action sets the local encryption key for the storage subsystem.
type StorageV1151SetEncryptionKey struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StorageV1151Storage The Storage schema defines a storage subsystem and its respective properties.  A storage subsystem represents a set of physical or virtual storage controllers and the resources, such as volumes, that can be accessed from that subsystem.
type StorageV1151Storage struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Actions The available actions for this resource.
	Actions          *StorageV1151Actions          `json:"Actions,omitempty"`
	AutoVolumeCreate *StorageV1151AutoVolumeCreate `json:"AutoVolumeCreate,omitempty"`

	// Connections A reference to a resource.
	Connections *OdataV4IdRef `json:"Connections,omitempty"`

	// ConsistencyGroups A reference to a resource.
	ConsistencyGroups *OdataV4IdRef `json:"ConsistencyGroups,omitempty"`

	// Controllers A reference to a resource.
	Controllers *OdataV4IdRef `json:"Controllers,omitempty"`

	// Description The description of this resource.  Used for commonality in the schema definitions.
	Description *ResourceDescription `json:"Description,omitempty"`

	// Drives The set of drives attached to the storage controllers that this resource represents.
	Drives *[]OdataV4IdRef `json:"Drives,omitempty"`

	// DrivesOdataCount The number of items in a collection.
	DrivesOdataCount *OdataV4Count               `json:"Drives@odata.count,omitempty"`
	EncryptionMode   *StorageV1151EncryptionMode `json:"EncryptionMode,omitempty"`

	// EndpointGroups A reference to a resource.
	EndpointGroups *OdataV4IdRef `json:"EndpointGroups,omitempty"`

	// FileSystems A reference to a resource.
	FileSystems              *OdataV4IdRef                         `json:"FileSystems,omitempty"`
	HotspareActivationPolicy *StorageV1151HotspareActivationPolicy `json:"HotspareActivationPolicy,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Identifiers The durable names for the storage subsystem.
	Identifiers *[]ResourceV1200Identifier `json:"Identifiers,omitempty"`

	// Links The links to other resources that are related to this resource.
	Links *StorageV1151Links `json:"Links,omitempty"`

	// LocalEncryptionKeyIdentifier The local encryption key identifier used by the storage subsystem.
	LocalEncryptionKeyIdentifier *string `json:"LocalEncryptionKeyIdentifier"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Redundancy Redundancy information for the storage subsystem.
	Redundancy *[]RedundancyV142Redundancy `json:"Redundancy,omitempty"`

	// RedundancyOdataCount The number of items in a collection.
	RedundancyOdataCount *OdataV4Count `json:"Redundancy@odata.count,omitempty"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// StorageControllers The set of storage controllers that this resource represents.
	// Deprecated:
	StorageControllers *[]StorageV1151StorageController `json:"StorageControllers,omitempty"`

	// StorageControllersOdataCount The number of items in a collection.
	StorageControllersOdataCount *OdataV4Count `json:"StorageControllers@odata.count,omitempty"`

	// StorageGroups A reference to a resource.
	StorageGroups *OdataV4IdRef `json:"StorageGroups,omitempty"`

	// StoragePools A reference to a resource.
	StoragePools *OdataV4IdRef `json:"StoragePools,omitempty"`

	// Volumes A reference to a resource.
	Volumes *OdataV4IdRef `json:"Volumes,omitempty"`
}

// StorageV1151StorageController The StorageController schema describes a storage controller and its properties.  A storage controller represents a physical or virtual storage device that produces volumes.
type StorageV1151StorageController struct {
	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// Actions The available actions for this resource.
	Actions *StorageV1151StorageControllerActions `json:"Actions,omitempty"`

	// Assembly A reference to a resource.
	Assembly *OdataV4IdRef `json:"Assembly,omitempty"`

	// AssetTag The user-assigned asset tag for this storage controller.
	AssetTag *string `json:"AssetTag"`

	// CacheSummary This type describes the cache memory of the storage controller in general detail.
	CacheSummary *StorageV1151CacheSummary `json:"CacheSummary,omitempty"`

	// Certificates A reference to a resource.
	Certificates *OdataV4IdRef `json:"Certificates,omitempty"`

	// ControllerRates This type describes the various controller rates used for processes such as volume rebuild or consistency checks.
	ControllerRates *StorageV1151Rates `json:"ControllerRates,omitempty"`

	// FirmwareVersion The firmware version of this storage controller.
	FirmwareVersion *string `json:"FirmwareVersion"`

	// Identifiers The durable names for the storage controller.
	Identifiers *[]ResourceV1200Identifier `json:"Identifiers,omitempty"`

	// Links The links to other resources that are related to this resource.
	Links *StorageV1151StorageControllerLinks `json:"Links,omitempty"`

	// Location The location of a resource.
	Location *ResourceV1200Location `json:"Location,omitempty"`

	// Manufacturer The manufacturer of this storage controller.
	Manufacturer *string `json:"Manufacturer"`

	// Measurements An array of DSP0274-defined measurement blocks.
	// Deprecated:
	Measurements *[]SoftwareInventoryV1102MeasurementBlock `json:"Measurements,omitempty"`

	// MemberId The unique identifier for the member within an array.
	MemberId *string `json:"MemberId,omitempty"`

	// Model The model number for the storage controller.
	Model *string `json:"Model"`

	// Name The name of the storage controller.
	Name *string `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PCIeInterface Properties that describe a PCIe interface.
	PCIeInterface *PCIeDeviceV1160PCIeInterface `json:"PCIeInterface,omitempty"`

	// PartNumber The part number for this storage controller.
	PartNumber *string `json:"PartNumber"`

	// Ports A reference to a resource.
	Ports *OdataV4IdRef `json:"Ports,omitempty"`

	// SKU The SKU for this storage controller.
	SKU *string `json:"SKU"`

	// SerialNumber The serial number for this storage controller.
	SerialNumber *string `json:"SerialNumber"`

	// SpeedGbps The maximum speed of the storage controller's device interface.
	SpeedGbps *float32 `json:"SpeedGbps"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// SupportedControllerProtocols The supported set of protocols for communicating with this storage controller.
	SupportedControllerProtocols *[]ProtocolProtocol `json:"SupportedControllerProtocols,omitempty"`

	// SupportedDeviceProtocols The protocols that the storage controller can use to communicate with attached devices.
	SupportedDeviceProtocols *[]ProtocolProtocol `json:"SupportedDeviceProtocols,omitempty"`

	// SupportedRAIDTypes The set of RAID types supported by the storage controller.
	SupportedRAIDTypes *[]VolumeRAIDType `json:"SupportedRAIDTypes,omitempty"`
}

// StorageV1151StorageControllerActions The available actions for this resource.
type StorageV1151StorageControllerActions struct {
	// Oem The available OEM-specific actions for this resource.
	Oem *StorageV1151StorageControllerOemActions `json:"Oem,omitempty"`
}

// StorageV1151StorageControllerLinks The links to other resources that are related to this resource.
type StorageV1151StorageControllerLinks struct {
	// Endpoints An array of links to the endpoints that connect to this controller.
	Endpoints *[]OdataV4IdRef `json:"Endpoints,omitempty"`

	// EndpointsOdataCount The number of items in a collection.
	EndpointsOdataCount *OdataV4Count `json:"Endpoints@odata.count,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PCIeFunctions An array of links to the PCIe functions that the storage controller produces.
	PCIeFunctions *[]OdataV4IdRef `json:"PCIeFunctions,omitempty"`

	// PCIeFunctionsOdataCount The number of items in a collection.
	PCIeFunctionsOdataCount *OdataV4Count `json:"PCIeFunctions@odata.count,omitempty"`

	// StorageServices An array of links to the storage services that connect to this controller.
	// Deprecated:
	StorageServices *[]OdataV4IdRef `json:"StorageServices,omitempty"`

	// StorageServicesOdataCount The number of items in a collection.
	StorageServicesOdataCount *OdataV4Count `json:"StorageServices@odata.count,omitempty"`
}

// StorageV1151StorageControllerOemActions The available OEM-specific actions for this resource.
type StorageV1151StorageControllerOemActions map[string]interface{}

// VLanNetworkInterfaceV131VLAN The attributes of a VLAN.
type VLanNetworkInterfaceV131VLAN struct {
	// Tagged An indication of whether this VLAN is tagged or untagged for this interface.
	Tagged *bool `json:"Tagged"`

	// VLANEnable An indication of whether this VLAN is enabled for this VLAN network interface.
	VLANEnable *bool `json:"VLANEnable"`

	// VLANId The ID for this VLAN.
	VLANId *VLanNetworkInterfaceV131VLAN_VLANId `json:"VLANId,omitempty"`

	// VLANPriority The priority for this VLAN.
	VLANPriority *VLanNetworkInterfaceV131VLAN_VLANPriority `json:"VLANPriority,omitempty"`
}

// VLanNetworkInterfaceV131VLANVLANId1 defines model for .
type VLanNetworkInterfaceV131VLANVLANId1 = interface{}

// VLanNetworkInterfaceV131VLAN_VLANId The ID for this VLAN.
type VLanNetworkInterfaceV131VLAN_VLANId struct {
	union json.RawMessage
}

// VLanNetworkInterfaceV131VLANVLANPriority1 defines model for .
type VLanNetworkInterfaceV131VLANVLANPriority1 = interface{}

// VLanNetworkInterfaceV131VLAN_VLANPriority The priority for this VLAN.
type VLanNetworkInterfaceV131VLAN_VLANPriority struct {
	union json.RawMessage
}

// VLanNetworkInterfaceV131VLANId defines model for VLanNetworkInterface_v1_3_1_VLANId.
type VLanNetworkInterfaceV131VLANId = int64

// VLanNetworkInterfaceV131VLANPriority defines model for VLanNetworkInterface_v1_3_1_VLANPriority.
type VLanNetworkInterfaceV131VLANPriority = int64

// Volume Volume contains properties used to describe a volume, virtual disk, LUN, or other logical storage entity for any system.
type Volume = VolumeV1100Volume

// VolumeCollection A Collection of Volume resource instances.
type VolumeCollection = VolumeCollectionVolumeCollection

// VolumeCollectionVolumeCollection A Collection of Volume resource instances.
type VolumeCollectionVolumeCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Description The description of this resource.  Used for commonality in the schema definitions.
	Description *ResourceDescription `json:"Description,omitempty"`

	// Members The value of each member references a Volume resource.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// VolumeEncryptionTypes defines model for Volume_EncryptionTypes.
type VolumeEncryptionTypes string

// VolumeInitializeMethod defines model for Volume_InitializeMethod.
type VolumeInitializeMethod string

// VolumeLBAFormatType LBAFormatType is defined in the NVMe specification set. This field indicates the LBA data size supported; implementations may report up to 16 values. For more details refer to the appropriate NVMe specification.
type VolumeLBAFormatType string

// VolumeLBARelativePerformanceType Indicate the relative performance of the LBA format relative to other LBA formats supported by the controller.
type VolumeLBARelativePerformanceType string

// VolumeNamespaceType defines model for Volume_NamespaceType.
type VolumeNamespaceType string

// VolumeOperationType defines model for Volume_OperationType.
type VolumeOperationType string

// VolumeRAIDType defines model for Volume_RAIDType.
type VolumeRAIDType string

// VolumeReadCachePolicyType defines model for Volume_ReadCachePolicyType.
type VolumeReadCachePolicyType string

// VolumeVolumeType defines model for Volume_VolumeType.
type VolumeVolumeType string

// VolumeVolumeUsageType defines model for Volume_VolumeUsageType.
type VolumeVolumeUsageType string

// VolumeWriteCachePolicyType defines model for Volume_WriteCachePolicyType.
type VolumeWriteCachePolicyType string

// VolumeWriteCacheStateType defines model for Volume_WriteCacheStateType.
type VolumeWriteCacheStateType string

// VolumeWriteHoleProtectionPolicyType defines model for Volume_WriteHoleProtectionPolicyType.
type VolumeWriteHoleProtectionPolicyType string

// VolumeV1100ALUA defines model for Volume_v1_10_0_ALUA.
type VolumeV1100ALUA struct {
	// ANAGroupId The ANA group id for this volume.
	ANAGroupId *float32 `json:"ANAGroupId"`
}

// VolumeV1100Actions defines model for Volume_v1_10_0_Actions.
type VolumeV1100Actions struct {
	// HashVolumeAssignReplicaTarget This action is used to establish a replication relationship by assigning an existing volume to serve as a target replica for an existing source volume.
	HashVolumeAssignReplicaTarget *VolumeV1100AssignReplicaTarget `json:"#Volume.AssignReplicaTarget,omitempty"`

	// HashVolumeChangeRAIDLayout Request system change the RAID layout of the volume.
	HashVolumeChangeRAIDLayout *VolumeV1100ChangeRAIDLayout `json:"#Volume.ChangeRAIDLayout,omitempty"`

	// HashVolumeCheckConsistency This action is used to force a check of the Volume's parity or redundant data to ensure it matches calculated values.
	HashVolumeCheckConsistency *VolumeV1100CheckConsistency `json:"#Volume.CheckConsistency,omitempty"`

	// HashVolumeCreateReplicaTarget This action is used to create a new volume resource to provide expanded data protection through a replica relationship with the specified source volume.
	HashVolumeCreateReplicaTarget *VolumeV1100CreateReplicaTarget `json:"#Volume.CreateReplicaTarget,omitempty"`

	// HashVolumeForceEnable Request system force the volume to an enabled state regardless of data loss.
	HashVolumeForceEnable *VolumeV1100ForceEnable `json:"#Volume.ForceEnable,omitempty"`

	// HashVolumeInitialize This action is used to prepare the contents of the volume for use by the system. If InitializeMethod is not specified in the request body, but the property InitializeMethod is specified, the property InitializeMethod value should be used. If neither is specified, the InitializeMethod should be Foreground.
	HashVolumeInitialize *VolumeV1100Initialize `json:"#Volume.Initialize,omitempty"`

	// HashVolumeRemoveReplicaRelationship This action is used to disable data synchronization between a source and target volume, remove the replication relationship, and optionally delete the target volume.
	HashVolumeRemoveReplicaRelationship *VolumeV1100RemoveReplicaRelationship `json:"#Volume.RemoveReplicaRelationship,omitempty"`

	// HashVolumeResumeReplication This action is used to resume the active data synchronization between a source and target volume, without otherwise altering the replication relationship.
	HashVolumeResumeReplication *VolumeV1100ResumeReplication `json:"#Volume.ResumeReplication,omitempty"`

	// HashVolumeReverseReplicationRelationship This action is used to reverse the replication relationship between a source and target volume.
	HashVolumeReverseReplicationRelationship *VolumeV1100ReverseReplicationRelationship `json:"#Volume.ReverseReplicationRelationship,omitempty"`

	// HashVolumeSplitReplication This action is used to split the replication relationship and suspend data synchronization between a source and target volume.
	HashVolumeSplitReplication *VolumeV1100SplitReplication `json:"#Volume.SplitReplication,omitempty"`

	// HashVolumeSuspendReplication This action is used to suspend active data synchronization between a source and target volume, without otherwise altering the replication relationship.
	HashVolumeSuspendReplication *VolumeV1100SuspendReplication `json:"#Volume.SuspendReplication,omitempty"`
	Oem                          *VolumeV1100OemActions         `json:"Oem,omitempty"`
}

// VolumeV1100AssignReplicaTarget This action is used to establish a replication relationship by assigning an existing volume to serve as a target replica for an existing source volume.
type VolumeV1100AssignReplicaTarget struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100ChangeRAIDLayout Request system change the RAID layout of the volume.
type VolumeV1100ChangeRAIDLayout struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100CheckConsistency This action is used to force a check of the Volume's parity or redundant data to ensure it matches calculated values.
type VolumeV1100CheckConsistency struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100CreateReplicaTarget This action is used to create a new volume resource to provide expanded data protection through a replica relationship with the specified source volume.
type VolumeV1100CreateReplicaTarget struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100ForceEnable Request system force the volume to an enabled state regardless of data loss.
type VolumeV1100ForceEnable struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100Initialize This action is used to prepare the contents of the volume for use by the system. If InitializeMethod is not specified in the request body, but the property InitializeMethod is specified, the property InitializeMethod value should be used. If neither is specified, the InitializeMethod should be Foreground.
type VolumeV1100Initialize struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100LBAFormat defines model for Volume_v1_10_0_LBAFormat.
type VolumeV1100LBAFormat struct {
	// LBADataSizeBytes The LBA data size in bytes.
	LBADataSizeBytes *int64 `json:"LBADataSizeBytes"`

	// LBAFormatType The LBA format type.
	LBAFormatType *VolumeV1100LBAFormat_LBAFormatType `json:"LBAFormatType,omitempty"`

	// LBAMetadataSizeBytes The LBA metadata size in bytes.
	LBAMetadataSizeBytes *int64 `json:"LBAMetadataSizeBytes"`

	// RelativePerformance The LBA Relative Performance type.
	RelativePerformance *VolumeV1100LBAFormat_RelativePerformance `json:"RelativePerformance,omitempty"`
}

// VolumeV1100LBAFormatLBAFormatType1 defines model for .
type VolumeV1100LBAFormatLBAFormatType1 = interface{}

// VolumeV1100LBAFormat_LBAFormatType The LBA format type.
type VolumeV1100LBAFormat_LBAFormatType struct {
	union json.RawMessage
}

// VolumeV1100LBAFormatRelativePerformance1 defines model for .
type VolumeV1100LBAFormatRelativePerformance1 = interface{}

// VolumeV1100LBAFormat_RelativePerformance The LBA Relative Performance type.
type VolumeV1100LBAFormat_RelativePerformance struct {
	union json.RawMessage
}

// VolumeV1100Links Add ability to manage spare capacity.
type VolumeV1100Links struct {
	// CacheDataVolumes A pointer to the data volumes this volume serves as a cache volume.
	CacheDataVolumes *[]OdataV4IdRef `json:"CacheDataVolumes,omitempty"`

	// CacheDataVolumesOdataCount The number of items in a collection.
	CacheDataVolumesOdataCount *OdataV4Count `json:"CacheDataVolumes@odata.count,omitempty"`

	// CacheVolumeSource A pointer to the cache volume source for this volume.
	CacheVolumeSource *VolumeV1100Links_CacheVolumeSource `json:"CacheVolumeSource,omitempty"`

	// ClassOfService A reference to a resource.
	ClassOfService *OdataV4IdRef `json:"ClassOfService,omitempty"`

	// ClientEndpoints An array of references to the client Endpoints associated with this volume.
	ClientEndpoints *[]OdataV4IdRef `json:"ClientEndpoints,omitempty"`

	// ClientEndpointsOdataCount The number of items in a collection.
	ClientEndpointsOdataCount *OdataV4Count `json:"ClientEndpoints@odata.count,omitempty"`

	// ConsistencyGroups An array of references to the ConsistencyGroups associated with this volume.
	ConsistencyGroups *[]OdataV4IdRef `json:"ConsistencyGroups,omitempty"`

	// ConsistencyGroupsOdataCount The number of items in a collection.
	ConsistencyGroupsOdataCount *OdataV4Count `json:"ConsistencyGroups@odata.count,omitempty"`

	// Controllers An array of the Controllers associated with this volume.
	Controllers *[]OdataV4IdRef `json:"Controllers,omitempty"`

	// ControllersOdataCount The number of items in a collection.
	ControllersOdataCount *OdataV4Count `json:"Controllers@odata.count,omitempty"`

	// DedicatedSpareDrives An array of references to the drives which are dedicated spares for this volume.
	DedicatedSpareDrives *[]OdataV4IdRef `json:"DedicatedSpareDrives,omitempty"`

	// DedicatedSpareDrivesOdataCount The number of items in a collection.
	DedicatedSpareDrivesOdataCount *OdataV4Count `json:"DedicatedSpareDrives@odata.count,omitempty"`

	// Drives An array of references to the drives which contain this volume. This will reference Drives that either wholly or only partly contain this volume.
	Drives *[]OdataV4IdRef `json:"Drives,omitempty"`

	// DrivesOdataCount The number of items in a collection.
	DrivesOdataCount *OdataV4Count `json:"Drives@odata.count,omitempty"`

	// JournalingMedia A pointer to the Resource that serves as a journaling media for this volume.
	JournalingMedia *VolumeV1100Links_JournalingMedia `json:"JournalingMedia,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// OwningStorageResource A reference to a resource.
	OwningStorageResource *OdataV4IdRef `json:"OwningStorageResource,omitempty"`

	// OwningStorageService A reference to a resource.
	OwningStorageService *OdataV4IdRef `json:"OwningStorageService,omitempty"`

	// ProvidingStoragePool The StoragePool resource that provides this volume resource.
	ProvidingStoragePool *VolumeV1100Links_ProvidingStoragePool `json:"ProvidingStoragePool,omitempty"`

	// ServerEndpoints An array of references to the server Endpoints associated with this volume.
	ServerEndpoints *[]OdataV4IdRef `json:"ServerEndpoints,omitempty"`

	// ServerEndpointsOdataCount The number of items in a collection.
	ServerEndpointsOdataCount *OdataV4Count `json:"ServerEndpoints@odata.count,omitempty"`

	// SpareResourceSets An array of references to SpareResourceSets.
	SpareResourceSets *[]OdataV4IdRef `json:"SpareResourceSets,omitempty"`

	// SpareResourceSetsOdataCount The number of items in a collection.
	SpareResourceSetsOdataCount *OdataV4Count `json:"SpareResourceSets@odata.count,omitempty"`

	// StorageGroups An array of references to the StorageGroups associated with this volume.
	StorageGroups *[]OdataV4IdRef `json:"StorageGroups,omitempty"`

	// StorageGroupsOdataCount The number of items in a collection.
	StorageGroupsOdataCount *OdataV4Count `json:"StorageGroups@odata.count,omitempty"`
}

// VolumeV1100LinksCacheVolumeSource1 defines model for .
type VolumeV1100LinksCacheVolumeSource1 = interface{}

// VolumeV1100Links_CacheVolumeSource A pointer to the cache volume source for this volume.
type VolumeV1100Links_CacheVolumeSource struct {
	union json.RawMessage
}

// VolumeV1100LinksJournalingMedia1 defines model for .
type VolumeV1100LinksJournalingMedia1 = interface{}

// VolumeV1100Links_JournalingMedia A pointer to the Resource that serves as a journaling media for this volume.
type VolumeV1100Links_JournalingMedia struct {
	union json.RawMessage
}

// VolumeV1100LinksProvidingStoragePool1 defines model for .
type VolumeV1100LinksProvidingStoragePool1 = interface{}

// VolumeV1100Links_ProvidingStoragePool The StoragePool resource that provides this volume resource.
type VolumeV1100Links_ProvidingStoragePool struct {
	union json.RawMessage
}

// VolumeV1100NVMeNamespaceProperties This contains properties to use when Volume is used to describe an NVMe Namespace.
type VolumeV1100NVMeNamespaceProperties struct {
	// FormattedLBASize The LBA data size and metadata size combination that the namespace has been formatted with.
	FormattedLBASize *string `json:"FormattedLBASize"`

	// IsShareable Indicates the namespace is shareable.
	IsShareable *bool `json:"IsShareable"`

	// LBAFormat Describes the current LBA format ID and detailed properties.
	LBAFormat *VolumeV1100NVMeNamespaceProperties_LBAFormat `json:"LBAFormat,omitempty"`

	// LBAFormats Describes the LBA format IDs and detailed properties.
	LBAFormats *[]VolumeV1100NVMeNamespaceProperties_LBAFormats_Item `json:"LBAFormats,omitempty"`

	// LBAFormatsSupported A list of the LBA format types supported for the namespace, or potential namespaces.
	LBAFormatsSupported *[]VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item `json:"LBAFormatsSupported,omitempty"`

	// MetadataTransferredAtEndOfDataLBA This property indicates whether or not the metadata is transferred at the end of the LBA creating an extended data LBA.
	MetadataTransferredAtEndOfDataLBA *bool `json:"MetadataTransferredAtEndOfDataLBA"`

	// NVMeVersion The version of the NVMe Base Specification supported.
	NVMeVersion *string `json:"NVMeVersion"`

	// NamespaceFeatures This property contains a set of Namespace Features.
	NamespaceFeatures *VolumeV1100NVMeNamespaceProperties_NamespaceFeatures `json:"NamespaceFeatures,omitempty"`

	// NamespaceId The NVMe Namespace Identifier for this namespace.
	NamespaceId *string `json:"NamespaceId"`

	// NamespaceType Identifies the type of namespace.
	NamespaceType *VolumeV1100NVMeNamespaceProperties_NamespaceType `json:"NamespaceType,omitempty"`

	// NumberLBAFormats The number of LBA data size and metadata size combinations supported by this namespace. The value of this property is between 0 and 16.
	NumberLBAFormats *int64 `json:"NumberLBAFormats"`

	// SupportsIOPerformanceHints Indicates whether the namespace supports IO performance hints.
	SupportsIOPerformanceHints *bool `json:"SupportsIOPerformanceHints"`

	// SupportsMultipleNamespaceAttachments Indicates whether the namespace may be attached to two or more controllers.
	SupportsMultipleNamespaceAttachments *bool `json:"SupportsMultipleNamespaceAttachments"`

	// Type Identifies the type of namespace.
	Type *VolumeV1100NVMeNamespaceProperties_Type `json:"Type,omitempty"`
}

// VolumeV1100NVMeNamespacePropertiesLBAFormat1 defines model for .
type VolumeV1100NVMeNamespacePropertiesLBAFormat1 = interface{}

// VolumeV1100NVMeNamespaceProperties_LBAFormat Describes the current LBA format ID and detailed properties.
type VolumeV1100NVMeNamespaceProperties_LBAFormat struct {
	union json.RawMessage
}

// VolumeV1100NVMeNamespacePropertiesLBAFormats1 defines model for .
type VolumeV1100NVMeNamespacePropertiesLBAFormats1 = interface{}

// VolumeV1100NVMeNamespaceProperties_LBAFormats_Item defines model for Volume_v1_10_0_NVMeNamespaceProperties.LBAFormats.Item.
type VolumeV1100NVMeNamespaceProperties_LBAFormats_Item struct {
	union json.RawMessage
}

// VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1 defines model for .
type VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1 = interface{}

// VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item defines model for Volume_v1_10_0_NVMeNamespaceProperties.LBAFormatsSupported.Item.
type VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item struct {
	union json.RawMessage
}

// VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1 defines model for .
type VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1 = interface{}

// VolumeV1100NVMeNamespaceProperties_NamespaceFeatures This property contains a set of Namespace Features.
type VolumeV1100NVMeNamespaceProperties_NamespaceFeatures struct {
	union json.RawMessage
}

// VolumeV1100NVMeNamespacePropertiesNamespaceType1 defines model for .
type VolumeV1100NVMeNamespacePropertiesNamespaceType1 = interface{}

// VolumeV1100NVMeNamespaceProperties_NamespaceType Identifies the type of namespace.
type VolumeV1100NVMeNamespaceProperties_NamespaceType struct {
	union json.RawMessage
}

// VolumeV1100NVMeNamespacePropertiesType1 defines model for .
type VolumeV1100NVMeNamespacePropertiesType1 = interface{}

// VolumeV1100NVMeNamespaceProperties_Type Identifies the type of namespace.
type VolumeV1100NVMeNamespaceProperties_Type struct {
	union json.RawMessage
}

// VolumeV1100NamespaceFeatures defines model for Volume_v1_10_0_NamespaceFeatures.
type VolumeV1100NamespaceFeatures struct {
	// SupportsAtomicTransactionSize Indicates that the NVM fields for Namespace preferred write granularity (NPWG), write alignment (NPWA), deallocate granularity (NPDG), deallocate alignment (NPDA) and optimal write size (NOWS)  are defined for this namespace and should be used by the host for I/O optimization.
	SupportsAtomicTransactionSize *bool `json:"SupportsAtomicTransactionSize"`

	// SupportsDeallocatedOrUnwrittenLBError This property indicates that the controller supports deallocated or unwritten logical block error for this namespace.
	SupportsDeallocatedOrUnwrittenLBError *bool `json:"SupportsDeallocatedOrUnwrittenLBError"`

	// SupportsIOPerformanceHints Indicates that the Namespace Atomic Write Unit Normal (NAWUN), Namespace Atomic Write Unit Power Fail (NAWUPF), and Namespace Atomic Compare and Write Unit (NACWU) fields are defined for this namespace and should be used by the host for this namespace instead of the controller-level properties AWUN, AWUPF, and ACWU.
	SupportsIOPerformanceHints *bool `json:"SupportsIOPerformanceHints"`

	// SupportsNGUIDReuse This property indicates that the namespace supports the use of an NGUID (namespace globally unique identifier) value.
	SupportsNGUIDReuse *bool `json:"SupportsNGUIDReuse"`

	// SupportsThinProvisioning This property indicates whether or not the NVMe Namespace supports thin provisioning.
	SupportsThinProvisioning *bool `json:"SupportsThinProvisioning"`
}

// VolumeV1100OemActions defines model for Volume_v1_10_0_OemActions.
type VolumeV1100OemActions map[string]interface{}

// VolumeV1100Operation defines model for Volume_v1_10_0_Operation.
type VolumeV1100Operation struct {
	// AssociatedFeaturesRegistry A reference to a resource.
	AssociatedFeaturesRegistry *OdataV4IdRef `json:"AssociatedFeaturesRegistry,omitempty"`

	// Operation The type of the operation.
	Operation *VolumeV1100Operation_Operation `json:"Operation,omitempty"`

	// OperationName The name of the operation.
	// Deprecated:
	OperationName *string `json:"OperationName"`

	// PercentageComplete The percentage of the operation that has been completed.
	PercentageComplete *int64 `json:"PercentageComplete"`
}

// VolumeV1100OperationOperation1 defines model for .
type VolumeV1100OperationOperation1 = interface{}

// VolumeV1100Operation_Operation The type of the operation.
type VolumeV1100Operation_Operation struct {
	union json.RawMessage
}

// VolumeV1100RemoveReplicaRelationship This action is used to disable data synchronization between a source and target volume, remove the replication relationship, and optionally delete the target volume.
type VolumeV1100RemoveReplicaRelationship struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100ResumeReplication This action is used to resume the active data synchronization between a source and target volume, without otherwise altering the replication relationship.
type VolumeV1100ResumeReplication struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100ReverseReplicationRelationship This action is used to reverse the replication relationship between a source and target volume.
type VolumeV1100ReverseReplicationRelationship struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100SplitReplication This action is used to split the replication relationship and suspend data synchronization between a source and target volume.
type VolumeV1100SplitReplication struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100SuspendReplication This action is used to suspend active data synchronization between a source and target volume, without otherwise altering the replication relationship.
type VolumeV1100SuspendReplication struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100Volume Volume contains properties used to describe a volume, virtual disk, LUN, or other logical storage entity for any system.
type VolumeV1100Volume struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// ALUA ALUA properties for this volume.
	ALUA *VolumeV1100Volume_ALUA `json:"ALUA,omitempty"`

	// AccessCapabilities Supported IO access capabilities.
	AccessCapabilities *[]VolumeV1100Volume_AccessCapabilities_Item `json:"AccessCapabilities,omitempty"`
	Actions            *VolumeV1100Actions                          `json:"Actions,omitempty"`

	// AllocatedPools A reference to a resource.
	AllocatedPools *OdataV4IdRef `json:"AllocatedPools,omitempty"`

	// BlockSizeBytes The size of the smallest addressable unit (Block) of this volume in bytes.
	BlockSizeBytes *int64 `json:"BlockSizeBytes"`

	// Capacity This is the schema definition for the Capacity of a device. It represents the properties for capacity for any data store.
	Capacity *CapacityV100Capacity `json:"Capacity,omitempty"`

	// CapacityBytes The size in bytes of this Volume.
	CapacityBytes *int64 `json:"CapacityBytes"`

	// CapacitySources An array of space allocations to this volume.
	CapacitySources *[]CapacityV121CapacitySource `json:"CapacitySources,omitempty"`

	// CapacitySourcesOdataCount The number of items in a collection.
	CapacitySourcesOdataCount *OdataV4Count `json:"CapacitySources@odata.count,omitempty"`

	// Compressed Indicator of whether or not the Volume has compression enabled.
	Compressed *bool `json:"Compressed"`

	// Connections An array of references to Connections that includes this volume.
	Connections *[]OdataV4IdRef `json:"Connections,omitempty"`

	// ConnectionsOdataCount The number of items in a collection.
	ConnectionsOdataCount *OdataV4Count `json:"Connections@odata.count,omitempty"`

	// Deduplicated Indicator of whether or not the Volume has deduplication enabled.
	Deduplicated *bool                          `json:"Deduplicated"`
	Description  *VolumeV1100Volume_Description `json:"Description,omitempty"`

	// DisplayName A user-configurable string to name the volume.
	DisplayName *string `json:"DisplayName"`

	// Encrypted Is this Volume encrypted.
	Encrypted *bool `json:"Encrypted"`

	// EncryptionTypes The types of encryption used by this Volume.
	EncryptionTypes *[]VolumeEncryptionTypes `json:"EncryptionTypes,omitempty"`

	// IOPerfModeEnabled Indicates the IO performance mode setting for the volume.
	IOPerfModeEnabled *bool `json:"IOPerfModeEnabled"`

	// IOStatistics The properties of this type represent IO statistics.
	IOStatistics *IOStatisticsV104IOStatistics `json:"IOStatistics,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Identifiers The Durable names for the volume.
	Identifiers *[]ResourceV1200Identifier `json:"Identifiers,omitempty"`

	// InitializeMethod Indicates the Initialization Method used for this volume. If InitializeMethod is not specified, the InitializeMethod should be Foreground.
	InitializeMethod *VolumeV1100Volume_InitializeMethod `json:"InitializeMethod,omitempty"`

	// IsBootCapable This property indicates whether or not the Volume contains a boot image and is capable of booting.
	IsBootCapable *bool `json:"IsBootCapable"`

	// Links Add ability to manage spare capacity.
	Links *VolumeV1100Links `json:"Links,omitempty"`

	// LogicalUnitNumber Indicates the host-visible LogicalUnitNumber assigned to this Volume.
	LogicalUnitNumber *int64 `json:"LogicalUnitNumber"`

	// LowSpaceWarningThresholdPercents Low space warning.
	LowSpaceWarningThresholdPercents *[]int64 `json:"LowSpaceWarningThresholdPercents,omitempty"`

	// Manufacturer The manufacturer or OEM of this storage volume.
	Manufacturer *string `json:"Manufacturer"`

	// MaxBlockSizeBytes Max Block size in bytes.
	MaxBlockSizeBytes *int64 `json:"MaxBlockSizeBytes"`

	// MediaSpanCount Indicates the number of media elements used per span in the secondary RAID for a hierarchical RAID type.
	MediaSpanCount *int64 `json:"MediaSpanCount"`

	// Metrics A reference to a resource.
	Metrics *OdataV4IdRef `json:"Metrics,omitempty"`

	// Model The model number for this storage volume.
	Model *string `json:"Model"`

	// NVMeNamespaceProperties This property contains properties to use when Volume is used to describe an NVMe Namespace.
	NVMeNamespaceProperties *VolumeV1100Volume_NVMeNamespaceProperties `json:"NVMeNamespaceProperties,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Operations The operations currently running on the Volume.
	Operations *[]VolumeV1100Operation `json:"Operations,omitempty"`

	// OptimumIOSizeBytes The size in bytes of this Volume's optimum IO size.
	OptimumIOSizeBytes *int64 `json:"OptimumIOSizeBytes"`

	// ProvisioningPolicy This property specifies the volume's storage allocation, or provisioning policy.
	ProvisioningPolicy *VolumeV1100Volume_ProvisioningPolicy `json:"ProvisioningPolicy,omitempty"`

	// RAIDType The RAID type of this volume.
	RAIDType *VolumeV1100Volume_RAIDType `json:"RAIDType,omitempty"`

	// ReadCachePolicy Indicates the read cache policy setting for the Volume.
	ReadCachePolicy *VolumeV1100Volume_ReadCachePolicy `json:"ReadCachePolicy,omitempty"`

	// RecoverableCapacitySourceCount Current number of capacity source resources that are available as replacements.
	RecoverableCapacitySourceCount *int64 `json:"RecoverableCapacitySourceCount"`

	// RemainingCapacityPercent The percentage of the capacity remaining in the Volume.
	RemainingCapacityPercent *int64 `json:"RemainingCapacityPercent"`

	// RemoteReplicaTargets URIs to the resources that are remote target replicas of this source.
	RemoteReplicaTargets *[]string `json:"RemoteReplicaTargets,omitempty"`

	// ReplicaInfo Defines the characteristics of a replica.
	ReplicaInfo *StorageReplicaInfoV140ReplicaInfo `json:"ReplicaInfo,omitempty"`

	// ReplicaTargets The resources that are target replicas of this source.
	ReplicaTargets *[]OdataV4IdRef `json:"ReplicaTargets,omitempty"`

	// ReplicaTargetsOdataCount The number of items in a collection.
	ReplicaTargetsOdataCount *OdataV4Count `json:"ReplicaTargets@odata.count,omitempty"`

	// ReplicationEnabled Indicates whether or not replication is enabled on the volume.
	ReplicationEnabled *bool `json:"ReplicationEnabled"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// StorageGroups A reference to a resource.
	StorageGroups *OdataV4IdRef `json:"StorageGroups,omitempty"`

	// StripSizeBytes The number of blocks (bytes) in a strip in a disk array that uses striped data mapping.
	StripSizeBytes *int64 `json:"StripSizeBytes"`

	// VolumeType The type of this volume.
	// Deprecated:
	VolumeType *VolumeV1100Volume_VolumeType `json:"VolumeType,omitempty"`

	// VolumeUsage Indicates the Volume usage type setting for the Volume.
	VolumeUsage *VolumeV1100Volume_VolumeUsage `json:"VolumeUsage,omitempty"`

	// WriteCachePolicy Indicates the write cache policy setting for the Volume.
	WriteCachePolicy *VolumeV1100Volume_WriteCachePolicy `json:"WriteCachePolicy,omitempty"`

	// WriteCacheState Indicates the WriteCacheState policy setting for the Volume.
	WriteCacheState           *VolumeV1100Volume_WriteCacheState   `json:"WriteCacheState,omitempty"`
	WriteHoleProtectionPolicy *VolumeWriteHoleProtectionPolicyType `json:"WriteHoleProtectionPolicy,omitempty"`
}

// VolumeV1100VolumeALUA1 defines model for .
type VolumeV1100VolumeALUA1 = interface{}

// VolumeV1100Volume_ALUA ALUA properties for this volume.
type VolumeV1100Volume_ALUA struct {
	union json.RawMessage
}

// VolumeV1100VolumeAccessCapabilities1 defines model for .
type VolumeV1100VolumeAccessCapabilities1 = interface{}

// VolumeV1100Volume_AccessCapabilities_Item defines model for Volume_v1_10_0_Volume.AccessCapabilities.Item.
type VolumeV1100Volume_AccessCapabilities_Item struct {
	union json.RawMessage
}

// VolumeV1100VolumeDescription1 defines model for .
type VolumeV1100VolumeDescription1 = interface{}

// VolumeV1100Volume_Description defines model for VolumeV1100Volume.Description.
type VolumeV1100Volume_Description struct {
	union json.RawMessage
}

// VolumeV1100VolumeInitializeMethod1 defines model for .
type VolumeV1100VolumeInitializeMethod1 = interface{}

// VolumeV1100Volume_InitializeMethod Indicates the Initialization Method used for this volume. If InitializeMethod is not specified, the InitializeMethod should be Foreground.
type VolumeV1100Volume_InitializeMethod struct {
	union json.RawMessage
}

// VolumeV1100VolumeNVMeNamespaceProperties1 defines model for .
type VolumeV1100VolumeNVMeNamespaceProperties1 = interface{}

// VolumeV1100Volume_NVMeNamespaceProperties This property contains properties to use when Volume is used to describe an NVMe Namespace.
type VolumeV1100Volume_NVMeNamespaceProperties struct {
	union json.RawMessage
}

// VolumeV1100VolumeProvisioningPolicy1 defines model for .
type VolumeV1100VolumeProvisioningPolicy1 = interface{}

// VolumeV1100Volume_ProvisioningPolicy This property specifies the volume's storage allocation, or provisioning policy.
type VolumeV1100Volume_ProvisioningPolicy struct {
	union json.RawMessage
}

// VolumeV1100VolumeRAIDType1 defines model for .
type VolumeV1100VolumeRAIDType1 = interface{}

// VolumeV1100Volume_RAIDType The RAID type of this volume.
type VolumeV1100Volume_RAIDType struct {
	union json.RawMessage
}

// VolumeV1100VolumeReadCachePolicy1 defines model for .
type VolumeV1100VolumeReadCachePolicy1 = interface{}

// VolumeV1100Volume_ReadCachePolicy Indicates the read cache policy setting for the Volume.
type VolumeV1100Volume_ReadCachePolicy struct {
	union json.RawMessage
}

// VolumeV1100VolumeVolumeType1 defines model for .
type VolumeV1100VolumeVolumeType1 = interface{}

// VolumeV1100Volume_VolumeType The type of this volume.
type VolumeV1100Volume_VolumeType struct {
	union json.RawMessage
}

// VolumeV1100VolumeVolumeUsage1 defines model for .
type VolumeV1100VolumeVolumeUsage1 = interface{}

// VolumeV1100Volume_VolumeUsage Indicates the Volume usage type setting for the Volume.
type VolumeV1100Volume_VolumeUsage struct {
	union json.RawMessage
}

// VolumeV1100VolumeWriteCachePolicy1 defines model for .
type VolumeV1100VolumeWriteCachePolicy1 = interface{}

// VolumeV1100Volume_WriteCachePolicy Indicates the write cache policy setting for the Volume.
type VolumeV1100Volume_WriteCachePolicy struct {
	union json.RawMessage
}

// VolumeV1100VolumeWriteCacheState1 defines model for .
type VolumeV1100VolumeWriteCacheState1 = interface{}

// VolumeV1100Volume_WriteCacheState Indicates the WriteCacheState policy setting for the Volume.
type VolumeV1100Volume_WriteCacheState struct {
	union json.RawMessage
}

// OdataV4Context The OData description of a payload.
type OdataV4Context = string

// OdataV4Count The number of items in a collection.
type OdataV4Count = int64

// OdataV4Etag The current ETag of the resource.
type OdataV4Etag = string

// OdataV4Id The unique identifier for a resource.
type OdataV4Id = string

// OdataV4IdRef A reference to a resource.
type OdataV4IdRef struct {
	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`
}

// OdataV4NextLink The URI to the resource containing the next set of partial members.
type OdataV4NextLink = string

// OdataV4Type The type of a resource.
type OdataV4Type = string

// AsActionInfoV142ParameterTypes returns the union data inside the ActionInfoV142Parameters_DataType as a ActionInfoV142ParameterTypes
func (t ActionInfoV142Parameters_DataType) AsActionInfoV142ParameterTypes() (ActionInfoV142ParameterTypes, error) {
	var body ActionInfoV142ParameterTypes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionInfoV142ParameterTypes overwrites any union data inside the ActionInfoV142Parameters_DataType as the provided ActionInfoV142ParameterTypes
func (t *ActionInfoV142Parameters_DataType) FromActionInfoV142ParameterTypes(v ActionInfoV142ParameterTypes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionInfoV142ParameterTypes performs a merge with any union data inside the ActionInfoV142Parameters_DataType, using the provided ActionInfoV142ParameterTypes
func (t *ActionInfoV142Parameters_DataType) MergeActionInfoV142ParameterTypes(v ActionInfoV142ParameterTypes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionInfoV142ParametersDataType1 returns the union data inside the ActionInfoV142Parameters_DataType as a ActionInfoV142ParametersDataType1
func (t ActionInfoV142Parameters_DataType) AsActionInfoV142ParametersDataType1() (ActionInfoV142ParametersDataType1, error) {
	var body ActionInfoV142ParametersDataType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionInfoV142ParametersDataType1 overwrites any union data inside the ActionInfoV142Parameters_DataType as the provided ActionInfoV142ParametersDataType1
func (t *ActionInfoV142Parameters_DataType) FromActionInfoV142ParametersDataType1(v ActionInfoV142ParametersDataType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionInfoV142ParametersDataType1 performs a merge with any union data inside the ActionInfoV142Parameters_DataType, using the provided ActionInfoV142ParametersDataType1
func (t *ActionInfoV142Parameters_DataType) MergeActionInfoV142ParametersDataType1(v ActionInfoV142ParametersDataType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionInfoV142Parameters_DataType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionInfoV142Parameters_DataType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the CapacityV121CapacitySource_Description as a ResourceDescription
func (t CapacityV121CapacitySource_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the CapacityV121CapacitySource_Description as the provided ResourceDescription
func (t *CapacityV121CapacitySource_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the CapacityV121CapacitySource_Description, using the provided ResourceDescription
func (t *CapacityV121CapacitySource_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCapacityV121CapacitySourceDescription1 returns the union data inside the CapacityV121CapacitySource_Description as a CapacityV121CapacitySourceDescription1
func (t CapacityV121CapacitySource_Description) AsCapacityV121CapacitySourceDescription1() (CapacityV121CapacitySourceDescription1, error) {
	var body CapacityV121CapacitySourceDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCapacityV121CapacitySourceDescription1 overwrites any union data inside the CapacityV121CapacitySource_Description as the provided CapacityV121CapacitySourceDescription1
func (t *CapacityV121CapacitySource_Description) FromCapacityV121CapacitySourceDescription1(v CapacityV121CapacitySourceDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCapacityV121CapacitySourceDescription1 performs a merge with any union data inside the CapacityV121CapacitySource_Description, using the provided CapacityV121CapacitySourceDescription1
func (t *CapacityV121CapacitySource_Description) MergeCapacityV121CapacitySourceDescription1(v CapacityV121CapacitySourceDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CapacityV121CapacitySource_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CapacityV121CapacitySource_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the ComputerSystemCollectionComputerSystemCollection_Description as a ResourceDescription
func (t ComputerSystemCollectionComputerSystemCollection_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the ComputerSystemCollectionComputerSystemCollection_Description as the provided ResourceDescription
func (t *ComputerSystemCollectionComputerSystemCollection_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the ComputerSystemCollectionComputerSystemCollection_Description, using the provided ResourceDescription
func (t *ComputerSystemCollectionComputerSystemCollection_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemCollectionComputerSystemCollectionDescription1 returns the union data inside the ComputerSystemCollectionComputerSystemCollection_Description as a ComputerSystemCollectionComputerSystemCollectionDescription1
func (t ComputerSystemCollectionComputerSystemCollection_Description) AsComputerSystemCollectionComputerSystemCollectionDescription1() (ComputerSystemCollectionComputerSystemCollectionDescription1, error) {
	var body ComputerSystemCollectionComputerSystemCollectionDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemCollectionComputerSystemCollectionDescription1 overwrites any union data inside the ComputerSystemCollectionComputerSystemCollection_Description as the provided ComputerSystemCollectionComputerSystemCollectionDescription1
func (t *ComputerSystemCollectionComputerSystemCollection_Description) FromComputerSystemCollectionComputerSystemCollectionDescription1(v ComputerSystemCollectionComputerSystemCollectionDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemCollectionComputerSystemCollectionDescription1 performs a merge with any union data inside the ComputerSystemCollectionComputerSystemCollection_Description, using the provided ComputerSystemCollectionComputerSystemCollectionDescription1
func (t *ComputerSystemCollectionComputerSystemCollection_Description) MergeComputerSystemCollectionComputerSystemCollectionDescription1(v ComputerSystemCollectionComputerSystemCollectionDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemCollectionComputerSystemCollection_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemCollectionComputerSystemCollection_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemBootSource returns the union data inside the ComputerSystemV1230Boot_AliasBootOrder_Item as a ComputerSystemBootSource
func (t ComputerSystemV1230Boot_AliasBootOrder_Item) AsComputerSystemBootSource() (ComputerSystemBootSource, error) {
	var body ComputerSystemBootSource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemBootSource overwrites any union data inside the ComputerSystemV1230Boot_AliasBootOrder_Item as the provided ComputerSystemBootSource
func (t *ComputerSystemV1230Boot_AliasBootOrder_Item) FromComputerSystemBootSource(v ComputerSystemBootSource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemBootSource performs a merge with any union data inside the ComputerSystemV1230Boot_AliasBootOrder_Item, using the provided ComputerSystemBootSource
func (t *ComputerSystemV1230Boot_AliasBootOrder_Item) MergeComputerSystemBootSource(v ComputerSystemBootSource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230BootAliasBootOrder1 returns the union data inside the ComputerSystemV1230Boot_AliasBootOrder_Item as a ComputerSystemV1230BootAliasBootOrder1
func (t ComputerSystemV1230Boot_AliasBootOrder_Item) AsComputerSystemV1230BootAliasBootOrder1() (ComputerSystemV1230BootAliasBootOrder1, error) {
	var body ComputerSystemV1230BootAliasBootOrder1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230BootAliasBootOrder1 overwrites any union data inside the ComputerSystemV1230Boot_AliasBootOrder_Item as the provided ComputerSystemV1230BootAliasBootOrder1
func (t *ComputerSystemV1230Boot_AliasBootOrder_Item) FromComputerSystemV1230BootAliasBootOrder1(v ComputerSystemV1230BootAliasBootOrder1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230BootAliasBootOrder1 performs a merge with any union data inside the ComputerSystemV1230Boot_AliasBootOrder_Item, using the provided ComputerSystemV1230BootAliasBootOrder1
func (t *ComputerSystemV1230Boot_AliasBootOrder_Item) MergeComputerSystemV1230BootAliasBootOrder1(v ComputerSystemV1230BootAliasBootOrder1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230Boot_AliasBootOrder_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230Boot_AliasBootOrder_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230AutomaticRetryConfig returns the union data inside the ComputerSystemV1230Boot_AutomaticRetryConfig as a ComputerSystemV1230AutomaticRetryConfig
func (t ComputerSystemV1230Boot_AutomaticRetryConfig) AsComputerSystemV1230AutomaticRetryConfig() (ComputerSystemV1230AutomaticRetryConfig, error) {
	var body ComputerSystemV1230AutomaticRetryConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230AutomaticRetryConfig overwrites any union data inside the ComputerSystemV1230Boot_AutomaticRetryConfig as the provided ComputerSystemV1230AutomaticRetryConfig
func (t *ComputerSystemV1230Boot_AutomaticRetryConfig) FromComputerSystemV1230AutomaticRetryConfig(v ComputerSystemV1230AutomaticRetryConfig) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230AutomaticRetryConfig performs a merge with any union data inside the ComputerSystemV1230Boot_AutomaticRetryConfig, using the provided ComputerSystemV1230AutomaticRetryConfig
func (t *ComputerSystemV1230Boot_AutomaticRetryConfig) MergeComputerSystemV1230AutomaticRetryConfig(v ComputerSystemV1230AutomaticRetryConfig) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230BootAutomaticRetryConfig1 returns the union data inside the ComputerSystemV1230Boot_AutomaticRetryConfig as a ComputerSystemV1230BootAutomaticRetryConfig1
func (t ComputerSystemV1230Boot_AutomaticRetryConfig) AsComputerSystemV1230BootAutomaticRetryConfig1() (ComputerSystemV1230BootAutomaticRetryConfig1, error) {
	var body ComputerSystemV1230BootAutomaticRetryConfig1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230BootAutomaticRetryConfig1 overwrites any union data inside the ComputerSystemV1230Boot_AutomaticRetryConfig as the provided ComputerSystemV1230BootAutomaticRetryConfig1
func (t *ComputerSystemV1230Boot_AutomaticRetryConfig) FromComputerSystemV1230BootAutomaticRetryConfig1(v ComputerSystemV1230BootAutomaticRetryConfig1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230BootAutomaticRetryConfig1 performs a merge with any union data inside the ComputerSystemV1230Boot_AutomaticRetryConfig, using the provided ComputerSystemV1230BootAutomaticRetryConfig1
func (t *ComputerSystemV1230Boot_AutomaticRetryConfig) MergeComputerSystemV1230BootAutomaticRetryConfig1(v ComputerSystemV1230BootAutomaticRetryConfig1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230Boot_AutomaticRetryConfig) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230Boot_AutomaticRetryConfig) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230BootOrderTypes returns the union data inside the ComputerSystemV1230Boot_BootOrderPropertySelection as a ComputerSystemV1230BootOrderTypes
func (t ComputerSystemV1230Boot_BootOrderPropertySelection) AsComputerSystemV1230BootOrderTypes() (ComputerSystemV1230BootOrderTypes, error) {
	var body ComputerSystemV1230BootOrderTypes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230BootOrderTypes overwrites any union data inside the ComputerSystemV1230Boot_BootOrderPropertySelection as the provided ComputerSystemV1230BootOrderTypes
func (t *ComputerSystemV1230Boot_BootOrderPropertySelection) FromComputerSystemV1230BootOrderTypes(v ComputerSystemV1230BootOrderTypes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230BootOrderTypes performs a merge with any union data inside the ComputerSystemV1230Boot_BootOrderPropertySelection, using the provided ComputerSystemV1230BootOrderTypes
func (t *ComputerSystemV1230Boot_BootOrderPropertySelection) MergeComputerSystemV1230BootOrderTypes(v ComputerSystemV1230BootOrderTypes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230BootBootOrderPropertySelection1 returns the union data inside the ComputerSystemV1230Boot_BootOrderPropertySelection as a ComputerSystemV1230BootBootOrderPropertySelection1
func (t ComputerSystemV1230Boot_BootOrderPropertySelection) AsComputerSystemV1230BootBootOrderPropertySelection1() (ComputerSystemV1230BootBootOrderPropertySelection1, error) {
	var body ComputerSystemV1230BootBootOrderPropertySelection1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230BootBootOrderPropertySelection1 overwrites any union data inside the ComputerSystemV1230Boot_BootOrderPropertySelection as the provided ComputerSystemV1230BootBootOrderPropertySelection1
func (t *ComputerSystemV1230Boot_BootOrderPropertySelection) FromComputerSystemV1230BootBootOrderPropertySelection1(v ComputerSystemV1230BootBootOrderPropertySelection1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230BootBootOrderPropertySelection1 performs a merge with any union data inside the ComputerSystemV1230Boot_BootOrderPropertySelection, using the provided ComputerSystemV1230BootBootOrderPropertySelection1
func (t *ComputerSystemV1230Boot_BootOrderPropertySelection) MergeComputerSystemV1230BootBootOrderPropertySelection1(v ComputerSystemV1230BootBootOrderPropertySelection1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230Boot_BootOrderPropertySelection) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230Boot_BootOrderPropertySelection) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230BootSourceOverrideEnabled returns the union data inside the ComputerSystemV1230Boot_BootSourceOverrideEnabled as a ComputerSystemV1230BootSourceOverrideEnabled
func (t ComputerSystemV1230Boot_BootSourceOverrideEnabled) AsComputerSystemV1230BootSourceOverrideEnabled() (ComputerSystemV1230BootSourceOverrideEnabled, error) {
	var body ComputerSystemV1230BootSourceOverrideEnabled
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230BootSourceOverrideEnabled overwrites any union data inside the ComputerSystemV1230Boot_BootSourceOverrideEnabled as the provided ComputerSystemV1230BootSourceOverrideEnabled
func (t *ComputerSystemV1230Boot_BootSourceOverrideEnabled) FromComputerSystemV1230BootSourceOverrideEnabled(v ComputerSystemV1230BootSourceOverrideEnabled) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230BootSourceOverrideEnabled performs a merge with any union data inside the ComputerSystemV1230Boot_BootSourceOverrideEnabled, using the provided ComputerSystemV1230BootSourceOverrideEnabled
func (t *ComputerSystemV1230Boot_BootSourceOverrideEnabled) MergeComputerSystemV1230BootSourceOverrideEnabled(v ComputerSystemV1230BootSourceOverrideEnabled) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230BootBootSourceOverrideEnabled1 returns the union data inside the ComputerSystemV1230Boot_BootSourceOverrideEnabled as a ComputerSystemV1230BootBootSourceOverrideEnabled1
func (t ComputerSystemV1230Boot_BootSourceOverrideEnabled) AsComputerSystemV1230BootBootSourceOverrideEnabled1() (ComputerSystemV1230BootBootSourceOverrideEnabled1, error) {
	var body ComputerSystemV1230BootBootSourceOverrideEnabled1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230BootBootSourceOverrideEnabled1 overwrites any union data inside the ComputerSystemV1230Boot_BootSourceOverrideEnabled as the provided ComputerSystemV1230BootBootSourceOverrideEnabled1
func (t *ComputerSystemV1230Boot_BootSourceOverrideEnabled) FromComputerSystemV1230BootBootSourceOverrideEnabled1(v ComputerSystemV1230BootBootSourceOverrideEnabled1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230BootBootSourceOverrideEnabled1 performs a merge with any union data inside the ComputerSystemV1230Boot_BootSourceOverrideEnabled, using the provided ComputerSystemV1230BootBootSourceOverrideEnabled1
func (t *ComputerSystemV1230Boot_BootSourceOverrideEnabled) MergeComputerSystemV1230BootBootSourceOverrideEnabled1(v ComputerSystemV1230BootBootSourceOverrideEnabled1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230Boot_BootSourceOverrideEnabled) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230Boot_BootSourceOverrideEnabled) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230BootSourceOverrideMode returns the union data inside the ComputerSystemV1230Boot_BootSourceOverrideMode as a ComputerSystemV1230BootSourceOverrideMode
func (t ComputerSystemV1230Boot_BootSourceOverrideMode) AsComputerSystemV1230BootSourceOverrideMode() (ComputerSystemV1230BootSourceOverrideMode, error) {
	var body ComputerSystemV1230BootSourceOverrideMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230BootSourceOverrideMode overwrites any union data inside the ComputerSystemV1230Boot_BootSourceOverrideMode as the provided ComputerSystemV1230BootSourceOverrideMode
func (t *ComputerSystemV1230Boot_BootSourceOverrideMode) FromComputerSystemV1230BootSourceOverrideMode(v ComputerSystemV1230BootSourceOverrideMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230BootSourceOverrideMode performs a merge with any union data inside the ComputerSystemV1230Boot_BootSourceOverrideMode, using the provided ComputerSystemV1230BootSourceOverrideMode
func (t *ComputerSystemV1230Boot_BootSourceOverrideMode) MergeComputerSystemV1230BootSourceOverrideMode(v ComputerSystemV1230BootSourceOverrideMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230BootBootSourceOverrideMode1 returns the union data inside the ComputerSystemV1230Boot_BootSourceOverrideMode as a ComputerSystemV1230BootBootSourceOverrideMode1
func (t ComputerSystemV1230Boot_BootSourceOverrideMode) AsComputerSystemV1230BootBootSourceOverrideMode1() (ComputerSystemV1230BootBootSourceOverrideMode1, error) {
	var body ComputerSystemV1230BootBootSourceOverrideMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230BootBootSourceOverrideMode1 overwrites any union data inside the ComputerSystemV1230Boot_BootSourceOverrideMode as the provided ComputerSystemV1230BootBootSourceOverrideMode1
func (t *ComputerSystemV1230Boot_BootSourceOverrideMode) FromComputerSystemV1230BootBootSourceOverrideMode1(v ComputerSystemV1230BootBootSourceOverrideMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230BootBootSourceOverrideMode1 performs a merge with any union data inside the ComputerSystemV1230Boot_BootSourceOverrideMode, using the provided ComputerSystemV1230BootBootSourceOverrideMode1
func (t *ComputerSystemV1230Boot_BootSourceOverrideMode) MergeComputerSystemV1230BootBootSourceOverrideMode1(v ComputerSystemV1230BootBootSourceOverrideMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230Boot_BootSourceOverrideMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230Boot_BootSourceOverrideMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemBootSource returns the union data inside the ComputerSystemV1230Boot_BootSourceOverrideTarget as a ComputerSystemBootSource
func (t ComputerSystemV1230Boot_BootSourceOverrideTarget) AsComputerSystemBootSource() (ComputerSystemBootSource, error) {
	var body ComputerSystemBootSource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemBootSource overwrites any union data inside the ComputerSystemV1230Boot_BootSourceOverrideTarget as the provided ComputerSystemBootSource
func (t *ComputerSystemV1230Boot_BootSourceOverrideTarget) FromComputerSystemBootSource(v ComputerSystemBootSource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemBootSource performs a merge with any union data inside the ComputerSystemV1230Boot_BootSourceOverrideTarget, using the provided ComputerSystemBootSource
func (t *ComputerSystemV1230Boot_BootSourceOverrideTarget) MergeComputerSystemBootSource(v ComputerSystemBootSource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230BootBootSourceOverrideTarget1 returns the union data inside the ComputerSystemV1230Boot_BootSourceOverrideTarget as a ComputerSystemV1230BootBootSourceOverrideTarget1
func (t ComputerSystemV1230Boot_BootSourceOverrideTarget) AsComputerSystemV1230BootBootSourceOverrideTarget1() (ComputerSystemV1230BootBootSourceOverrideTarget1, error) {
	var body ComputerSystemV1230BootBootSourceOverrideTarget1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230BootBootSourceOverrideTarget1 overwrites any union data inside the ComputerSystemV1230Boot_BootSourceOverrideTarget as the provided ComputerSystemV1230BootBootSourceOverrideTarget1
func (t *ComputerSystemV1230Boot_BootSourceOverrideTarget) FromComputerSystemV1230BootBootSourceOverrideTarget1(v ComputerSystemV1230BootBootSourceOverrideTarget1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230BootBootSourceOverrideTarget1 performs a merge with any union data inside the ComputerSystemV1230Boot_BootSourceOverrideTarget, using the provided ComputerSystemV1230BootBootSourceOverrideTarget1
func (t *ComputerSystemV1230Boot_BootSourceOverrideTarget) MergeComputerSystemV1230BootBootSourceOverrideTarget1(v ComputerSystemV1230BootBootSourceOverrideTarget1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230Boot_BootSourceOverrideTarget) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230Boot_BootSourceOverrideTarget) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230StopBootOnFault returns the union data inside the ComputerSystemV1230Boot_StopBootOnFault as a ComputerSystemV1230StopBootOnFault
func (t ComputerSystemV1230Boot_StopBootOnFault) AsComputerSystemV1230StopBootOnFault() (ComputerSystemV1230StopBootOnFault, error) {
	var body ComputerSystemV1230StopBootOnFault
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230StopBootOnFault overwrites any union data inside the ComputerSystemV1230Boot_StopBootOnFault as the provided ComputerSystemV1230StopBootOnFault
func (t *ComputerSystemV1230Boot_StopBootOnFault) FromComputerSystemV1230StopBootOnFault(v ComputerSystemV1230StopBootOnFault) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230StopBootOnFault performs a merge with any union data inside the ComputerSystemV1230Boot_StopBootOnFault, using the provided ComputerSystemV1230StopBootOnFault
func (t *ComputerSystemV1230Boot_StopBootOnFault) MergeComputerSystemV1230StopBootOnFault(v ComputerSystemV1230StopBootOnFault) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230BootStopBootOnFault1 returns the union data inside the ComputerSystemV1230Boot_StopBootOnFault as a ComputerSystemV1230BootStopBootOnFault1
func (t ComputerSystemV1230Boot_StopBootOnFault) AsComputerSystemV1230BootStopBootOnFault1() (ComputerSystemV1230BootStopBootOnFault1, error) {
	var body ComputerSystemV1230BootStopBootOnFault1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230BootStopBootOnFault1 overwrites any union data inside the ComputerSystemV1230Boot_StopBootOnFault as the provided ComputerSystemV1230BootStopBootOnFault1
func (t *ComputerSystemV1230Boot_StopBootOnFault) FromComputerSystemV1230BootStopBootOnFault1(v ComputerSystemV1230BootStopBootOnFault1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230BootStopBootOnFault1 performs a merge with any union data inside the ComputerSystemV1230Boot_StopBootOnFault, using the provided ComputerSystemV1230BootStopBootOnFault1
func (t *ComputerSystemV1230Boot_StopBootOnFault) MergeComputerSystemV1230BootStopBootOnFault1(v ComputerSystemV1230BootStopBootOnFault1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230Boot_StopBootOnFault) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230Boot_StopBootOnFault) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230TrustedModuleRequiredToBoot returns the union data inside the ComputerSystemV1230Boot_TrustedModuleRequiredToBoot as a ComputerSystemV1230TrustedModuleRequiredToBoot
func (t ComputerSystemV1230Boot_TrustedModuleRequiredToBoot) AsComputerSystemV1230TrustedModuleRequiredToBoot() (ComputerSystemV1230TrustedModuleRequiredToBoot, error) {
	var body ComputerSystemV1230TrustedModuleRequiredToBoot
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230TrustedModuleRequiredToBoot overwrites any union data inside the ComputerSystemV1230Boot_TrustedModuleRequiredToBoot as the provided ComputerSystemV1230TrustedModuleRequiredToBoot
func (t *ComputerSystemV1230Boot_TrustedModuleRequiredToBoot) FromComputerSystemV1230TrustedModuleRequiredToBoot(v ComputerSystemV1230TrustedModuleRequiredToBoot) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230TrustedModuleRequiredToBoot performs a merge with any union data inside the ComputerSystemV1230Boot_TrustedModuleRequiredToBoot, using the provided ComputerSystemV1230TrustedModuleRequiredToBoot
func (t *ComputerSystemV1230Boot_TrustedModuleRequiredToBoot) MergeComputerSystemV1230TrustedModuleRequiredToBoot(v ComputerSystemV1230TrustedModuleRequiredToBoot) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230BootTrustedModuleRequiredToBoot1 returns the union data inside the ComputerSystemV1230Boot_TrustedModuleRequiredToBoot as a ComputerSystemV1230BootTrustedModuleRequiredToBoot1
func (t ComputerSystemV1230Boot_TrustedModuleRequiredToBoot) AsComputerSystemV1230BootTrustedModuleRequiredToBoot1() (ComputerSystemV1230BootTrustedModuleRequiredToBoot1, error) {
	var body ComputerSystemV1230BootTrustedModuleRequiredToBoot1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230BootTrustedModuleRequiredToBoot1 overwrites any union data inside the ComputerSystemV1230Boot_TrustedModuleRequiredToBoot as the provided ComputerSystemV1230BootTrustedModuleRequiredToBoot1
func (t *ComputerSystemV1230Boot_TrustedModuleRequiredToBoot) FromComputerSystemV1230BootTrustedModuleRequiredToBoot1(v ComputerSystemV1230BootTrustedModuleRequiredToBoot1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230BootTrustedModuleRequiredToBoot1 performs a merge with any union data inside the ComputerSystemV1230Boot_TrustedModuleRequiredToBoot, using the provided ComputerSystemV1230BootTrustedModuleRequiredToBoot1
func (t *ComputerSystemV1230Boot_TrustedModuleRequiredToBoot) MergeComputerSystemV1230BootTrustedModuleRequiredToBoot1(v ComputerSystemV1230BootTrustedModuleRequiredToBoot1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230Boot_TrustedModuleRequiredToBoot) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230Boot_TrustedModuleRequiredToBoot) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230BootProgressTypes returns the union data inside the ComputerSystemV1230BootProgress_LastState as a ComputerSystemV1230BootProgressTypes
func (t ComputerSystemV1230BootProgress_LastState) AsComputerSystemV1230BootProgressTypes() (ComputerSystemV1230BootProgressTypes, error) {
	var body ComputerSystemV1230BootProgressTypes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230BootProgressTypes overwrites any union data inside the ComputerSystemV1230BootProgress_LastState as the provided ComputerSystemV1230BootProgressTypes
func (t *ComputerSystemV1230BootProgress_LastState) FromComputerSystemV1230BootProgressTypes(v ComputerSystemV1230BootProgressTypes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230BootProgressTypes performs a merge with any union data inside the ComputerSystemV1230BootProgress_LastState, using the provided ComputerSystemV1230BootProgressTypes
func (t *ComputerSystemV1230BootProgress_LastState) MergeComputerSystemV1230BootProgressTypes(v ComputerSystemV1230BootProgressTypes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230BootProgressLastState1 returns the union data inside the ComputerSystemV1230BootProgress_LastState as a ComputerSystemV1230BootProgressLastState1
func (t ComputerSystemV1230BootProgress_LastState) AsComputerSystemV1230BootProgressLastState1() (ComputerSystemV1230BootProgressLastState1, error) {
	var body ComputerSystemV1230BootProgressLastState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230BootProgressLastState1 overwrites any union data inside the ComputerSystemV1230BootProgress_LastState as the provided ComputerSystemV1230BootProgressLastState1
func (t *ComputerSystemV1230BootProgress_LastState) FromComputerSystemV1230BootProgressLastState1(v ComputerSystemV1230BootProgressLastState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230BootProgressLastState1 performs a merge with any union data inside the ComputerSystemV1230BootProgress_LastState, using the provided ComputerSystemV1230BootProgressLastState1
func (t *ComputerSystemV1230BootProgress_LastState) MergeComputerSystemV1230BootProgressLastState1(v ComputerSystemV1230BootProgressLastState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230BootProgress_LastState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230BootProgress_LastState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230CompositionUseCase returns the union data inside the ComputerSystemV1230Composition_UseCases_Item as a ComputerSystemV1230CompositionUseCase
func (t ComputerSystemV1230Composition_UseCases_Item) AsComputerSystemV1230CompositionUseCase() (ComputerSystemV1230CompositionUseCase, error) {
	var body ComputerSystemV1230CompositionUseCase
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230CompositionUseCase overwrites any union data inside the ComputerSystemV1230Composition_UseCases_Item as the provided ComputerSystemV1230CompositionUseCase
func (t *ComputerSystemV1230Composition_UseCases_Item) FromComputerSystemV1230CompositionUseCase(v ComputerSystemV1230CompositionUseCase) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230CompositionUseCase performs a merge with any union data inside the ComputerSystemV1230Composition_UseCases_Item, using the provided ComputerSystemV1230CompositionUseCase
func (t *ComputerSystemV1230Composition_UseCases_Item) MergeComputerSystemV1230CompositionUseCase(v ComputerSystemV1230CompositionUseCase) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230CompositionUseCases1 returns the union data inside the ComputerSystemV1230Composition_UseCases_Item as a ComputerSystemV1230CompositionUseCases1
func (t ComputerSystemV1230Composition_UseCases_Item) AsComputerSystemV1230CompositionUseCases1() (ComputerSystemV1230CompositionUseCases1, error) {
	var body ComputerSystemV1230CompositionUseCases1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230CompositionUseCases1 overwrites any union data inside the ComputerSystemV1230Composition_UseCases_Item as the provided ComputerSystemV1230CompositionUseCases1
func (t *ComputerSystemV1230Composition_UseCases_Item) FromComputerSystemV1230CompositionUseCases1(v ComputerSystemV1230CompositionUseCases1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230CompositionUseCases1 performs a merge with any union data inside the ComputerSystemV1230Composition_UseCases_Item, using the provided ComputerSystemV1230CompositionUseCases1
func (t *ComputerSystemV1230Composition_UseCases_Item) MergeComputerSystemV1230CompositionUseCases1(v ComputerSystemV1230CompositionUseCases1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230Composition_UseCases_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230Composition_UseCases_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230BootProgress returns the union data inside the ComputerSystemV1230ComputerSystem_BootProgress as a ComputerSystemV1230BootProgress
func (t ComputerSystemV1230ComputerSystem_BootProgress) AsComputerSystemV1230BootProgress() (ComputerSystemV1230BootProgress, error) {
	var body ComputerSystemV1230BootProgress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230BootProgress overwrites any union data inside the ComputerSystemV1230ComputerSystem_BootProgress as the provided ComputerSystemV1230BootProgress
func (t *ComputerSystemV1230ComputerSystem_BootProgress) FromComputerSystemV1230BootProgress(v ComputerSystemV1230BootProgress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230BootProgress performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_BootProgress, using the provided ComputerSystemV1230BootProgress
func (t *ComputerSystemV1230ComputerSystem_BootProgress) MergeComputerSystemV1230BootProgress(v ComputerSystemV1230BootProgress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230ComputerSystemBootProgress1 returns the union data inside the ComputerSystemV1230ComputerSystem_BootProgress as a ComputerSystemV1230ComputerSystemBootProgress1
func (t ComputerSystemV1230ComputerSystem_BootProgress) AsComputerSystemV1230ComputerSystemBootProgress1() (ComputerSystemV1230ComputerSystemBootProgress1, error) {
	var body ComputerSystemV1230ComputerSystemBootProgress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230ComputerSystemBootProgress1 overwrites any union data inside the ComputerSystemV1230ComputerSystem_BootProgress as the provided ComputerSystemV1230ComputerSystemBootProgress1
func (t *ComputerSystemV1230ComputerSystem_BootProgress) FromComputerSystemV1230ComputerSystemBootProgress1(v ComputerSystemV1230ComputerSystemBootProgress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230ComputerSystemBootProgress1 performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_BootProgress, using the provided ComputerSystemV1230ComputerSystemBootProgress1
func (t *ComputerSystemV1230ComputerSystem_BootProgress) MergeComputerSystemV1230ComputerSystemBootProgress1(v ComputerSystemV1230ComputerSystemBootProgress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230ComputerSystem_BootProgress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230ComputerSystem_BootProgress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230Composition returns the union data inside the ComputerSystemV1230ComputerSystem_Composition as a ComputerSystemV1230Composition
func (t ComputerSystemV1230ComputerSystem_Composition) AsComputerSystemV1230Composition() (ComputerSystemV1230Composition, error) {
	var body ComputerSystemV1230Composition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230Composition overwrites any union data inside the ComputerSystemV1230ComputerSystem_Composition as the provided ComputerSystemV1230Composition
func (t *ComputerSystemV1230ComputerSystem_Composition) FromComputerSystemV1230Composition(v ComputerSystemV1230Composition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230Composition performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_Composition, using the provided ComputerSystemV1230Composition
func (t *ComputerSystemV1230ComputerSystem_Composition) MergeComputerSystemV1230Composition(v ComputerSystemV1230Composition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230ComputerSystemComposition1 returns the union data inside the ComputerSystemV1230ComputerSystem_Composition as a ComputerSystemV1230ComputerSystemComposition1
func (t ComputerSystemV1230ComputerSystem_Composition) AsComputerSystemV1230ComputerSystemComposition1() (ComputerSystemV1230ComputerSystemComposition1, error) {
	var body ComputerSystemV1230ComputerSystemComposition1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230ComputerSystemComposition1 overwrites any union data inside the ComputerSystemV1230ComputerSystem_Composition as the provided ComputerSystemV1230ComputerSystemComposition1
func (t *ComputerSystemV1230ComputerSystem_Composition) FromComputerSystemV1230ComputerSystemComposition1(v ComputerSystemV1230ComputerSystemComposition1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230ComputerSystemComposition1 performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_Composition, using the provided ComputerSystemV1230ComputerSystemComposition1
func (t *ComputerSystemV1230ComputerSystem_Composition) MergeComputerSystemV1230ComputerSystemComposition1(v ComputerSystemV1230ComputerSystemComposition1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230ComputerSystem_Composition) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230ComputerSystem_Composition) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the ComputerSystemV1230ComputerSystem_Description as a ResourceDescription
func (t ComputerSystemV1230ComputerSystem_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the ComputerSystemV1230ComputerSystem_Description as the provided ResourceDescription
func (t *ComputerSystemV1230ComputerSystem_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_Description, using the provided ResourceDescription
func (t *ComputerSystemV1230ComputerSystem_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230ComputerSystemDescription1 returns the union data inside the ComputerSystemV1230ComputerSystem_Description as a ComputerSystemV1230ComputerSystemDescription1
func (t ComputerSystemV1230ComputerSystem_Description) AsComputerSystemV1230ComputerSystemDescription1() (ComputerSystemV1230ComputerSystemDescription1, error) {
	var body ComputerSystemV1230ComputerSystemDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230ComputerSystemDescription1 overwrites any union data inside the ComputerSystemV1230ComputerSystem_Description as the provided ComputerSystemV1230ComputerSystemDescription1
func (t *ComputerSystemV1230ComputerSystem_Description) FromComputerSystemV1230ComputerSystemDescription1(v ComputerSystemV1230ComputerSystemDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230ComputerSystemDescription1 performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_Description, using the provided ComputerSystemV1230ComputerSystemDescription1
func (t *ComputerSystemV1230ComputerSystem_Description) MergeComputerSystemV1230ComputerSystemDescription1(v ComputerSystemV1230ComputerSystemDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230ComputerSystem_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230ComputerSystem_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230IdlePowerSaver returns the union data inside the ComputerSystemV1230ComputerSystem_IdlePowerSaver as a ComputerSystemV1230IdlePowerSaver
func (t ComputerSystemV1230ComputerSystem_IdlePowerSaver) AsComputerSystemV1230IdlePowerSaver() (ComputerSystemV1230IdlePowerSaver, error) {
	var body ComputerSystemV1230IdlePowerSaver
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230IdlePowerSaver overwrites any union data inside the ComputerSystemV1230ComputerSystem_IdlePowerSaver as the provided ComputerSystemV1230IdlePowerSaver
func (t *ComputerSystemV1230ComputerSystem_IdlePowerSaver) FromComputerSystemV1230IdlePowerSaver(v ComputerSystemV1230IdlePowerSaver) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230IdlePowerSaver performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_IdlePowerSaver, using the provided ComputerSystemV1230IdlePowerSaver
func (t *ComputerSystemV1230ComputerSystem_IdlePowerSaver) MergeComputerSystemV1230IdlePowerSaver(v ComputerSystemV1230IdlePowerSaver) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230ComputerSystemIdlePowerSaver1 returns the union data inside the ComputerSystemV1230ComputerSystem_IdlePowerSaver as a ComputerSystemV1230ComputerSystemIdlePowerSaver1
func (t ComputerSystemV1230ComputerSystem_IdlePowerSaver) AsComputerSystemV1230ComputerSystemIdlePowerSaver1() (ComputerSystemV1230ComputerSystemIdlePowerSaver1, error) {
	var body ComputerSystemV1230ComputerSystemIdlePowerSaver1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230ComputerSystemIdlePowerSaver1 overwrites any union data inside the ComputerSystemV1230ComputerSystem_IdlePowerSaver as the provided ComputerSystemV1230ComputerSystemIdlePowerSaver1
func (t *ComputerSystemV1230ComputerSystem_IdlePowerSaver) FromComputerSystemV1230ComputerSystemIdlePowerSaver1(v ComputerSystemV1230ComputerSystemIdlePowerSaver1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230ComputerSystemIdlePowerSaver1 performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_IdlePowerSaver, using the provided ComputerSystemV1230ComputerSystemIdlePowerSaver1
func (t *ComputerSystemV1230ComputerSystem_IdlePowerSaver) MergeComputerSystemV1230ComputerSystemIdlePowerSaver1(v ComputerSystemV1230ComputerSystemIdlePowerSaver1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230ComputerSystem_IdlePowerSaver) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230ComputerSystem_IdlePowerSaver) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230IndicatorLED returns the union data inside the ComputerSystemV1230ComputerSystem_IndicatorLED as a ComputerSystemV1230IndicatorLED
func (t ComputerSystemV1230ComputerSystem_IndicatorLED) AsComputerSystemV1230IndicatorLED() (ComputerSystemV1230IndicatorLED, error) {
	var body ComputerSystemV1230IndicatorLED
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230IndicatorLED overwrites any union data inside the ComputerSystemV1230ComputerSystem_IndicatorLED as the provided ComputerSystemV1230IndicatorLED
func (t *ComputerSystemV1230ComputerSystem_IndicatorLED) FromComputerSystemV1230IndicatorLED(v ComputerSystemV1230IndicatorLED) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230IndicatorLED performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_IndicatorLED, using the provided ComputerSystemV1230IndicatorLED
func (t *ComputerSystemV1230ComputerSystem_IndicatorLED) MergeComputerSystemV1230IndicatorLED(v ComputerSystemV1230IndicatorLED) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230ComputerSystemIndicatorLED1 returns the union data inside the ComputerSystemV1230ComputerSystem_IndicatorLED as a ComputerSystemV1230ComputerSystemIndicatorLED1
func (t ComputerSystemV1230ComputerSystem_IndicatorLED) AsComputerSystemV1230ComputerSystemIndicatorLED1() (ComputerSystemV1230ComputerSystemIndicatorLED1, error) {
	var body ComputerSystemV1230ComputerSystemIndicatorLED1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230ComputerSystemIndicatorLED1 overwrites any union data inside the ComputerSystemV1230ComputerSystem_IndicatorLED as the provided ComputerSystemV1230ComputerSystemIndicatorLED1
func (t *ComputerSystemV1230ComputerSystem_IndicatorLED) FromComputerSystemV1230ComputerSystemIndicatorLED1(v ComputerSystemV1230ComputerSystemIndicatorLED1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230ComputerSystemIndicatorLED1 performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_IndicatorLED, using the provided ComputerSystemV1230ComputerSystemIndicatorLED1
func (t *ComputerSystemV1230ComputerSystem_IndicatorLED) MergeComputerSystemV1230ComputerSystemIndicatorLED1(v ComputerSystemV1230ComputerSystemIndicatorLED1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230ComputerSystem_IndicatorLED) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230ComputerSystem_IndicatorLED) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230KeyManagement returns the union data inside the ComputerSystemV1230ComputerSystem_KeyManagement as a ComputerSystemV1230KeyManagement
func (t ComputerSystemV1230ComputerSystem_KeyManagement) AsComputerSystemV1230KeyManagement() (ComputerSystemV1230KeyManagement, error) {
	var body ComputerSystemV1230KeyManagement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230KeyManagement overwrites any union data inside the ComputerSystemV1230ComputerSystem_KeyManagement as the provided ComputerSystemV1230KeyManagement
func (t *ComputerSystemV1230ComputerSystem_KeyManagement) FromComputerSystemV1230KeyManagement(v ComputerSystemV1230KeyManagement) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230KeyManagement performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_KeyManagement, using the provided ComputerSystemV1230KeyManagement
func (t *ComputerSystemV1230ComputerSystem_KeyManagement) MergeComputerSystemV1230KeyManagement(v ComputerSystemV1230KeyManagement) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230ComputerSystemKeyManagement1 returns the union data inside the ComputerSystemV1230ComputerSystem_KeyManagement as a ComputerSystemV1230ComputerSystemKeyManagement1
func (t ComputerSystemV1230ComputerSystem_KeyManagement) AsComputerSystemV1230ComputerSystemKeyManagement1() (ComputerSystemV1230ComputerSystemKeyManagement1, error) {
	var body ComputerSystemV1230ComputerSystemKeyManagement1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230ComputerSystemKeyManagement1 overwrites any union data inside the ComputerSystemV1230ComputerSystem_KeyManagement as the provided ComputerSystemV1230ComputerSystemKeyManagement1
func (t *ComputerSystemV1230ComputerSystem_KeyManagement) FromComputerSystemV1230ComputerSystemKeyManagement1(v ComputerSystemV1230ComputerSystemKeyManagement1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230ComputerSystemKeyManagement1 performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_KeyManagement, using the provided ComputerSystemV1230ComputerSystemKeyManagement1
func (t *ComputerSystemV1230ComputerSystem_KeyManagement) MergeComputerSystemV1230ComputerSystemKeyManagement1(v ComputerSystemV1230ComputerSystemKeyManagement1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230ComputerSystem_KeyManagement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230ComputerSystem_KeyManagement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230PowerMode returns the union data inside the ComputerSystemV1230ComputerSystem_PowerMode as a ComputerSystemV1230PowerMode
func (t ComputerSystemV1230ComputerSystem_PowerMode) AsComputerSystemV1230PowerMode() (ComputerSystemV1230PowerMode, error) {
	var body ComputerSystemV1230PowerMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230PowerMode overwrites any union data inside the ComputerSystemV1230ComputerSystem_PowerMode as the provided ComputerSystemV1230PowerMode
func (t *ComputerSystemV1230ComputerSystem_PowerMode) FromComputerSystemV1230PowerMode(v ComputerSystemV1230PowerMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230PowerMode performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_PowerMode, using the provided ComputerSystemV1230PowerMode
func (t *ComputerSystemV1230ComputerSystem_PowerMode) MergeComputerSystemV1230PowerMode(v ComputerSystemV1230PowerMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230ComputerSystemPowerMode1 returns the union data inside the ComputerSystemV1230ComputerSystem_PowerMode as a ComputerSystemV1230ComputerSystemPowerMode1
func (t ComputerSystemV1230ComputerSystem_PowerMode) AsComputerSystemV1230ComputerSystemPowerMode1() (ComputerSystemV1230ComputerSystemPowerMode1, error) {
	var body ComputerSystemV1230ComputerSystemPowerMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230ComputerSystemPowerMode1 overwrites any union data inside the ComputerSystemV1230ComputerSystem_PowerMode as the provided ComputerSystemV1230ComputerSystemPowerMode1
func (t *ComputerSystemV1230ComputerSystem_PowerMode) FromComputerSystemV1230ComputerSystemPowerMode1(v ComputerSystemV1230ComputerSystemPowerMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230ComputerSystemPowerMode1 performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_PowerMode, using the provided ComputerSystemV1230ComputerSystemPowerMode1
func (t *ComputerSystemV1230ComputerSystem_PowerMode) MergeComputerSystemV1230ComputerSystemPowerMode1(v ComputerSystemV1230ComputerSystemPowerMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230ComputerSystem_PowerMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230ComputerSystem_PowerMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourcePowerState returns the union data inside the ComputerSystemV1230ComputerSystem_PowerState as a ResourcePowerState
func (t ComputerSystemV1230ComputerSystem_PowerState) AsResourcePowerState() (ResourcePowerState, error) {
	var body ResourcePowerState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourcePowerState overwrites any union data inside the ComputerSystemV1230ComputerSystem_PowerState as the provided ResourcePowerState
func (t *ComputerSystemV1230ComputerSystem_PowerState) FromResourcePowerState(v ResourcePowerState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourcePowerState performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_PowerState, using the provided ResourcePowerState
func (t *ComputerSystemV1230ComputerSystem_PowerState) MergeResourcePowerState(v ResourcePowerState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230ComputerSystemPowerState1 returns the union data inside the ComputerSystemV1230ComputerSystem_PowerState as a ComputerSystemV1230ComputerSystemPowerState1
func (t ComputerSystemV1230ComputerSystem_PowerState) AsComputerSystemV1230ComputerSystemPowerState1() (ComputerSystemV1230ComputerSystemPowerState1, error) {
	var body ComputerSystemV1230ComputerSystemPowerState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230ComputerSystemPowerState1 overwrites any union data inside the ComputerSystemV1230ComputerSystem_PowerState as the provided ComputerSystemV1230ComputerSystemPowerState1
func (t *ComputerSystemV1230ComputerSystem_PowerState) FromComputerSystemV1230ComputerSystemPowerState1(v ComputerSystemV1230ComputerSystemPowerState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230ComputerSystemPowerState1 performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_PowerState, using the provided ComputerSystemV1230ComputerSystemPowerState1
func (t *ComputerSystemV1230ComputerSystem_PowerState) MergeComputerSystemV1230ComputerSystemPowerState1(v ComputerSystemV1230ComputerSystemPowerState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230ComputerSystem_PowerState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230ComputerSystem_PowerState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceUUID returns the union data inside the ComputerSystemV1230ComputerSystem_UUID as a ResourceUUID
func (t ComputerSystemV1230ComputerSystem_UUID) AsResourceUUID() (ResourceUUID, error) {
	var body ResourceUUID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceUUID overwrites any union data inside the ComputerSystemV1230ComputerSystem_UUID as the provided ResourceUUID
func (t *ComputerSystemV1230ComputerSystem_UUID) FromResourceUUID(v ResourceUUID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceUUID performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_UUID, using the provided ResourceUUID
func (t *ComputerSystemV1230ComputerSystem_UUID) MergeResourceUUID(v ResourceUUID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230ComputerSystemUUID1 returns the union data inside the ComputerSystemV1230ComputerSystem_UUID as a ComputerSystemV1230ComputerSystemUUID1
func (t ComputerSystemV1230ComputerSystem_UUID) AsComputerSystemV1230ComputerSystemUUID1() (ComputerSystemV1230ComputerSystemUUID1, error) {
	var body ComputerSystemV1230ComputerSystemUUID1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230ComputerSystemUUID1 overwrites any union data inside the ComputerSystemV1230ComputerSystem_UUID as the provided ComputerSystemV1230ComputerSystemUUID1
func (t *ComputerSystemV1230ComputerSystem_UUID) FromComputerSystemV1230ComputerSystemUUID1(v ComputerSystemV1230ComputerSystemUUID1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230ComputerSystemUUID1 performs a merge with any union data inside the ComputerSystemV1230ComputerSystem_UUID, using the provided ComputerSystemV1230ComputerSystemUUID1
func (t *ComputerSystemV1230ComputerSystem_UUID) MergeComputerSystemV1230ComputerSystemUUID1(v ComputerSystemV1230ComputerSystemUUID1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230ComputerSystem_UUID) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230ComputerSystem_UUID) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230KMIPCachePolicy returns the union data inside the ComputerSystemV1230KMIPServer_CachePolicy as a ComputerSystemV1230KMIPCachePolicy
func (t ComputerSystemV1230KMIPServer_CachePolicy) AsComputerSystemV1230KMIPCachePolicy() (ComputerSystemV1230KMIPCachePolicy, error) {
	var body ComputerSystemV1230KMIPCachePolicy
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230KMIPCachePolicy overwrites any union data inside the ComputerSystemV1230KMIPServer_CachePolicy as the provided ComputerSystemV1230KMIPCachePolicy
func (t *ComputerSystemV1230KMIPServer_CachePolicy) FromComputerSystemV1230KMIPCachePolicy(v ComputerSystemV1230KMIPCachePolicy) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230KMIPCachePolicy performs a merge with any union data inside the ComputerSystemV1230KMIPServer_CachePolicy, using the provided ComputerSystemV1230KMIPCachePolicy
func (t *ComputerSystemV1230KMIPServer_CachePolicy) MergeComputerSystemV1230KMIPCachePolicy(v ComputerSystemV1230KMIPCachePolicy) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230KMIPServerCachePolicy1 returns the union data inside the ComputerSystemV1230KMIPServer_CachePolicy as a ComputerSystemV1230KMIPServerCachePolicy1
func (t ComputerSystemV1230KMIPServer_CachePolicy) AsComputerSystemV1230KMIPServerCachePolicy1() (ComputerSystemV1230KMIPServerCachePolicy1, error) {
	var body ComputerSystemV1230KMIPServerCachePolicy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230KMIPServerCachePolicy1 overwrites any union data inside the ComputerSystemV1230KMIPServer_CachePolicy as the provided ComputerSystemV1230KMIPServerCachePolicy1
func (t *ComputerSystemV1230KMIPServer_CachePolicy) FromComputerSystemV1230KMIPServerCachePolicy1(v ComputerSystemV1230KMIPServerCachePolicy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230KMIPServerCachePolicy1 performs a merge with any union data inside the ComputerSystemV1230KMIPServer_CachePolicy, using the provided ComputerSystemV1230KMIPServerCachePolicy1
func (t *ComputerSystemV1230KMIPServer_CachePolicy) MergeComputerSystemV1230KMIPServerCachePolicy1(v ComputerSystemV1230KMIPServerCachePolicy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230KMIPServer_CachePolicy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230KMIPServer_CachePolicy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230KMIPServer returns the union data inside the ComputerSystemV1230KeyManagement_KMIPServers_Item as a ComputerSystemV1230KMIPServer
func (t ComputerSystemV1230KeyManagement_KMIPServers_Item) AsComputerSystemV1230KMIPServer() (ComputerSystemV1230KMIPServer, error) {
	var body ComputerSystemV1230KMIPServer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230KMIPServer overwrites any union data inside the ComputerSystemV1230KeyManagement_KMIPServers_Item as the provided ComputerSystemV1230KMIPServer
func (t *ComputerSystemV1230KeyManagement_KMIPServers_Item) FromComputerSystemV1230KMIPServer(v ComputerSystemV1230KMIPServer) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230KMIPServer performs a merge with any union data inside the ComputerSystemV1230KeyManagement_KMIPServers_Item, using the provided ComputerSystemV1230KMIPServer
func (t *ComputerSystemV1230KeyManagement_KMIPServers_Item) MergeComputerSystemV1230KMIPServer(v ComputerSystemV1230KMIPServer) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230KeyManagementKMIPServers1 returns the union data inside the ComputerSystemV1230KeyManagement_KMIPServers_Item as a ComputerSystemV1230KeyManagementKMIPServers1
func (t ComputerSystemV1230KeyManagement_KMIPServers_Item) AsComputerSystemV1230KeyManagementKMIPServers1() (ComputerSystemV1230KeyManagementKMIPServers1, error) {
	var body ComputerSystemV1230KeyManagementKMIPServers1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230KeyManagementKMIPServers1 overwrites any union data inside the ComputerSystemV1230KeyManagement_KMIPServers_Item as the provided ComputerSystemV1230KeyManagementKMIPServers1
func (t *ComputerSystemV1230KeyManagement_KMIPServers_Item) FromComputerSystemV1230KeyManagementKMIPServers1(v ComputerSystemV1230KeyManagementKMIPServers1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230KeyManagementKMIPServers1 performs a merge with any union data inside the ComputerSystemV1230KeyManagement_KMIPServers_Item, using the provided ComputerSystemV1230KeyManagementKMIPServers1
func (t *ComputerSystemV1230KeyManagement_KMIPServers_Item) MergeComputerSystemV1230KeyManagementKMIPServers1(v ComputerSystemV1230KeyManagementKMIPServers1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230KeyManagement_KMIPServers_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230KeyManagement_KMIPServers_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOdataV4IdRef returns the union data inside the ComputerSystemV1230Links_HostingComputerSystem as a OdataV4IdRef
func (t ComputerSystemV1230Links_HostingComputerSystem) AsOdataV4IdRef() (OdataV4IdRef, error) {
	var body OdataV4IdRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOdataV4IdRef overwrites any union data inside the ComputerSystemV1230Links_HostingComputerSystem as the provided OdataV4IdRef
func (t *ComputerSystemV1230Links_HostingComputerSystem) FromOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOdataV4IdRef performs a merge with any union data inside the ComputerSystemV1230Links_HostingComputerSystem, using the provided OdataV4IdRef
func (t *ComputerSystemV1230Links_HostingComputerSystem) MergeOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230LinksHostingComputerSystem1 returns the union data inside the ComputerSystemV1230Links_HostingComputerSystem as a ComputerSystemV1230LinksHostingComputerSystem1
func (t ComputerSystemV1230Links_HostingComputerSystem) AsComputerSystemV1230LinksHostingComputerSystem1() (ComputerSystemV1230LinksHostingComputerSystem1, error) {
	var body ComputerSystemV1230LinksHostingComputerSystem1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230LinksHostingComputerSystem1 overwrites any union data inside the ComputerSystemV1230Links_HostingComputerSystem as the provided ComputerSystemV1230LinksHostingComputerSystem1
func (t *ComputerSystemV1230Links_HostingComputerSystem) FromComputerSystemV1230LinksHostingComputerSystem1(v ComputerSystemV1230LinksHostingComputerSystem1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230LinksHostingComputerSystem1 performs a merge with any union data inside the ComputerSystemV1230Links_HostingComputerSystem, using the provided ComputerSystemV1230LinksHostingComputerSystem1
func (t *ComputerSystemV1230Links_HostingComputerSystem) MergeComputerSystemV1230LinksHostingComputerSystem1(v ComputerSystemV1230LinksHostingComputerSystem1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230Links_HostingComputerSystem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230Links_HostingComputerSystem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230MemoryMirroring returns the union data inside the ComputerSystemV1230MemorySummary_MemoryMirroring as a ComputerSystemV1230MemoryMirroring
func (t ComputerSystemV1230MemorySummary_MemoryMirroring) AsComputerSystemV1230MemoryMirroring() (ComputerSystemV1230MemoryMirroring, error) {
	var body ComputerSystemV1230MemoryMirroring
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230MemoryMirroring overwrites any union data inside the ComputerSystemV1230MemorySummary_MemoryMirroring as the provided ComputerSystemV1230MemoryMirroring
func (t *ComputerSystemV1230MemorySummary_MemoryMirroring) FromComputerSystemV1230MemoryMirroring(v ComputerSystemV1230MemoryMirroring) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230MemoryMirroring performs a merge with any union data inside the ComputerSystemV1230MemorySummary_MemoryMirroring, using the provided ComputerSystemV1230MemoryMirroring
func (t *ComputerSystemV1230MemorySummary_MemoryMirroring) MergeComputerSystemV1230MemoryMirroring(v ComputerSystemV1230MemoryMirroring) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230MemorySummaryMemoryMirroring1 returns the union data inside the ComputerSystemV1230MemorySummary_MemoryMirroring as a ComputerSystemV1230MemorySummaryMemoryMirroring1
func (t ComputerSystemV1230MemorySummary_MemoryMirroring) AsComputerSystemV1230MemorySummaryMemoryMirroring1() (ComputerSystemV1230MemorySummaryMemoryMirroring1, error) {
	var body ComputerSystemV1230MemorySummaryMemoryMirroring1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230MemorySummaryMemoryMirroring1 overwrites any union data inside the ComputerSystemV1230MemorySummary_MemoryMirroring as the provided ComputerSystemV1230MemorySummaryMemoryMirroring1
func (t *ComputerSystemV1230MemorySummary_MemoryMirroring) FromComputerSystemV1230MemorySummaryMemoryMirroring1(v ComputerSystemV1230MemorySummaryMemoryMirroring1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230MemorySummaryMemoryMirroring1 performs a merge with any union data inside the ComputerSystemV1230MemorySummary_MemoryMirroring, using the provided ComputerSystemV1230MemorySummaryMemoryMirroring1
func (t *ComputerSystemV1230MemorySummary_MemoryMirroring) MergeComputerSystemV1230MemorySummaryMemoryMirroring1(v ComputerSystemV1230MemorySummaryMemoryMirroring1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230MemorySummary_MemoryMirroring) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230MemorySummary_MemoryMirroring) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230InterfaceType returns the union data inside the ComputerSystemV1230TrustedModules_InterfaceType as a ComputerSystemV1230InterfaceType
func (t ComputerSystemV1230TrustedModules_InterfaceType) AsComputerSystemV1230InterfaceType() (ComputerSystemV1230InterfaceType, error) {
	var body ComputerSystemV1230InterfaceType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230InterfaceType overwrites any union data inside the ComputerSystemV1230TrustedModules_InterfaceType as the provided ComputerSystemV1230InterfaceType
func (t *ComputerSystemV1230TrustedModules_InterfaceType) FromComputerSystemV1230InterfaceType(v ComputerSystemV1230InterfaceType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230InterfaceType performs a merge with any union data inside the ComputerSystemV1230TrustedModules_InterfaceType, using the provided ComputerSystemV1230InterfaceType
func (t *ComputerSystemV1230TrustedModules_InterfaceType) MergeComputerSystemV1230InterfaceType(v ComputerSystemV1230InterfaceType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230TrustedModulesInterfaceType1 returns the union data inside the ComputerSystemV1230TrustedModules_InterfaceType as a ComputerSystemV1230TrustedModulesInterfaceType1
func (t ComputerSystemV1230TrustedModules_InterfaceType) AsComputerSystemV1230TrustedModulesInterfaceType1() (ComputerSystemV1230TrustedModulesInterfaceType1, error) {
	var body ComputerSystemV1230TrustedModulesInterfaceType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230TrustedModulesInterfaceType1 overwrites any union data inside the ComputerSystemV1230TrustedModules_InterfaceType as the provided ComputerSystemV1230TrustedModulesInterfaceType1
func (t *ComputerSystemV1230TrustedModules_InterfaceType) FromComputerSystemV1230TrustedModulesInterfaceType1(v ComputerSystemV1230TrustedModulesInterfaceType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230TrustedModulesInterfaceType1 performs a merge with any union data inside the ComputerSystemV1230TrustedModules_InterfaceType, using the provided ComputerSystemV1230TrustedModulesInterfaceType1
func (t *ComputerSystemV1230TrustedModules_InterfaceType) MergeComputerSystemV1230TrustedModulesInterfaceType1(v ComputerSystemV1230TrustedModulesInterfaceType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230TrustedModules_InterfaceType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230TrustedModules_InterfaceType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230InterfaceTypeSelection returns the union data inside the ComputerSystemV1230TrustedModules_InterfaceTypeSelection as a ComputerSystemV1230InterfaceTypeSelection
func (t ComputerSystemV1230TrustedModules_InterfaceTypeSelection) AsComputerSystemV1230InterfaceTypeSelection() (ComputerSystemV1230InterfaceTypeSelection, error) {
	var body ComputerSystemV1230InterfaceTypeSelection
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230InterfaceTypeSelection overwrites any union data inside the ComputerSystemV1230TrustedModules_InterfaceTypeSelection as the provided ComputerSystemV1230InterfaceTypeSelection
func (t *ComputerSystemV1230TrustedModules_InterfaceTypeSelection) FromComputerSystemV1230InterfaceTypeSelection(v ComputerSystemV1230InterfaceTypeSelection) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230InterfaceTypeSelection performs a merge with any union data inside the ComputerSystemV1230TrustedModules_InterfaceTypeSelection, using the provided ComputerSystemV1230InterfaceTypeSelection
func (t *ComputerSystemV1230TrustedModules_InterfaceTypeSelection) MergeComputerSystemV1230InterfaceTypeSelection(v ComputerSystemV1230InterfaceTypeSelection) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230TrustedModulesInterfaceTypeSelection1 returns the union data inside the ComputerSystemV1230TrustedModules_InterfaceTypeSelection as a ComputerSystemV1230TrustedModulesInterfaceTypeSelection1
func (t ComputerSystemV1230TrustedModules_InterfaceTypeSelection) AsComputerSystemV1230TrustedModulesInterfaceTypeSelection1() (ComputerSystemV1230TrustedModulesInterfaceTypeSelection1, error) {
	var body ComputerSystemV1230TrustedModulesInterfaceTypeSelection1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230TrustedModulesInterfaceTypeSelection1 overwrites any union data inside the ComputerSystemV1230TrustedModules_InterfaceTypeSelection as the provided ComputerSystemV1230TrustedModulesInterfaceTypeSelection1
func (t *ComputerSystemV1230TrustedModules_InterfaceTypeSelection) FromComputerSystemV1230TrustedModulesInterfaceTypeSelection1(v ComputerSystemV1230TrustedModulesInterfaceTypeSelection1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230TrustedModulesInterfaceTypeSelection1 performs a merge with any union data inside the ComputerSystemV1230TrustedModules_InterfaceTypeSelection, using the provided ComputerSystemV1230TrustedModulesInterfaceTypeSelection1
func (t *ComputerSystemV1230TrustedModules_InterfaceTypeSelection) MergeComputerSystemV1230TrustedModulesInterfaceTypeSelection1(v ComputerSystemV1230TrustedModulesInterfaceTypeSelection1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230TrustedModules_InterfaceTypeSelection) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230TrustedModules_InterfaceTypeSelection) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230WatchdogTimeoutActions returns the union data inside the ComputerSystemV1230WatchdogTimer_TimeoutAction as a ComputerSystemV1230WatchdogTimeoutActions
func (t ComputerSystemV1230WatchdogTimer_TimeoutAction) AsComputerSystemV1230WatchdogTimeoutActions() (ComputerSystemV1230WatchdogTimeoutActions, error) {
	var body ComputerSystemV1230WatchdogTimeoutActions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230WatchdogTimeoutActions overwrites any union data inside the ComputerSystemV1230WatchdogTimer_TimeoutAction as the provided ComputerSystemV1230WatchdogTimeoutActions
func (t *ComputerSystemV1230WatchdogTimer_TimeoutAction) FromComputerSystemV1230WatchdogTimeoutActions(v ComputerSystemV1230WatchdogTimeoutActions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230WatchdogTimeoutActions performs a merge with any union data inside the ComputerSystemV1230WatchdogTimer_TimeoutAction, using the provided ComputerSystemV1230WatchdogTimeoutActions
func (t *ComputerSystemV1230WatchdogTimer_TimeoutAction) MergeComputerSystemV1230WatchdogTimeoutActions(v ComputerSystemV1230WatchdogTimeoutActions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230WatchdogTimerTimeoutAction1 returns the union data inside the ComputerSystemV1230WatchdogTimer_TimeoutAction as a ComputerSystemV1230WatchdogTimerTimeoutAction1
func (t ComputerSystemV1230WatchdogTimer_TimeoutAction) AsComputerSystemV1230WatchdogTimerTimeoutAction1() (ComputerSystemV1230WatchdogTimerTimeoutAction1, error) {
	var body ComputerSystemV1230WatchdogTimerTimeoutAction1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230WatchdogTimerTimeoutAction1 overwrites any union data inside the ComputerSystemV1230WatchdogTimer_TimeoutAction as the provided ComputerSystemV1230WatchdogTimerTimeoutAction1
func (t *ComputerSystemV1230WatchdogTimer_TimeoutAction) FromComputerSystemV1230WatchdogTimerTimeoutAction1(v ComputerSystemV1230WatchdogTimerTimeoutAction1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230WatchdogTimerTimeoutAction1 performs a merge with any union data inside the ComputerSystemV1230WatchdogTimer_TimeoutAction, using the provided ComputerSystemV1230WatchdogTimerTimeoutAction1
func (t *ComputerSystemV1230WatchdogTimer_TimeoutAction) MergeComputerSystemV1230WatchdogTimerTimeoutAction1(v ComputerSystemV1230WatchdogTimerTimeoutAction1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230WatchdogTimer_TimeoutAction) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230WatchdogTimer_TimeoutAction) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComputerSystemV1230WatchdogWarningActions returns the union data inside the ComputerSystemV1230WatchdogTimer_WarningAction as a ComputerSystemV1230WatchdogWarningActions
func (t ComputerSystemV1230WatchdogTimer_WarningAction) AsComputerSystemV1230WatchdogWarningActions() (ComputerSystemV1230WatchdogWarningActions, error) {
	var body ComputerSystemV1230WatchdogWarningActions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230WatchdogWarningActions overwrites any union data inside the ComputerSystemV1230WatchdogTimer_WarningAction as the provided ComputerSystemV1230WatchdogWarningActions
func (t *ComputerSystemV1230WatchdogTimer_WarningAction) FromComputerSystemV1230WatchdogWarningActions(v ComputerSystemV1230WatchdogWarningActions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230WatchdogWarningActions performs a merge with any union data inside the ComputerSystemV1230WatchdogTimer_WarningAction, using the provided ComputerSystemV1230WatchdogWarningActions
func (t *ComputerSystemV1230WatchdogTimer_WarningAction) MergeComputerSystemV1230WatchdogWarningActions(v ComputerSystemV1230WatchdogWarningActions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemV1230WatchdogTimerWarningAction1 returns the union data inside the ComputerSystemV1230WatchdogTimer_WarningAction as a ComputerSystemV1230WatchdogTimerWarningAction1
func (t ComputerSystemV1230WatchdogTimer_WarningAction) AsComputerSystemV1230WatchdogTimerWarningAction1() (ComputerSystemV1230WatchdogTimerWarningAction1, error) {
	var body ComputerSystemV1230WatchdogTimerWarningAction1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemV1230WatchdogTimerWarningAction1 overwrites any union data inside the ComputerSystemV1230WatchdogTimer_WarningAction as the provided ComputerSystemV1230WatchdogTimerWarningAction1
func (t *ComputerSystemV1230WatchdogTimer_WarningAction) FromComputerSystemV1230WatchdogTimerWarningAction1(v ComputerSystemV1230WatchdogTimerWarningAction1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemV1230WatchdogTimerWarningAction1 performs a merge with any union data inside the ComputerSystemV1230WatchdogTimer_WarningAction, using the provided ComputerSystemV1230WatchdogTimerWarningAction1
func (t *ComputerSystemV1230WatchdogTimer_WarningAction) MergeComputerSystemV1230WatchdogTimerWarningAction1(v ComputerSystemV1230WatchdogTimerWarningAction1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemV1230WatchdogTimer_WarningAction) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemV1230WatchdogTimer_WarningAction) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the EthernetInterfaceCollectionEthernetInterfaceCollection_Description as a ResourceDescription
func (t EthernetInterfaceCollectionEthernetInterfaceCollection_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the EthernetInterfaceCollectionEthernetInterfaceCollection_Description as the provided ResourceDescription
func (t *EthernetInterfaceCollectionEthernetInterfaceCollection_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the EthernetInterfaceCollectionEthernetInterfaceCollection_Description, using the provided ResourceDescription
func (t *EthernetInterfaceCollectionEthernetInterfaceCollection_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceCollectionEthernetInterfaceCollectionDescription1 returns the union data inside the EthernetInterfaceCollectionEthernetInterfaceCollection_Description as a EthernetInterfaceCollectionEthernetInterfaceCollectionDescription1
func (t EthernetInterfaceCollectionEthernetInterfaceCollection_Description) AsEthernetInterfaceCollectionEthernetInterfaceCollectionDescription1() (EthernetInterfaceCollectionEthernetInterfaceCollectionDescription1, error) {
	var body EthernetInterfaceCollectionEthernetInterfaceCollectionDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceCollectionEthernetInterfaceCollectionDescription1 overwrites any union data inside the EthernetInterfaceCollectionEthernetInterfaceCollection_Description as the provided EthernetInterfaceCollectionEthernetInterfaceCollectionDescription1
func (t *EthernetInterfaceCollectionEthernetInterfaceCollection_Description) FromEthernetInterfaceCollectionEthernetInterfaceCollectionDescription1(v EthernetInterfaceCollectionEthernetInterfaceCollectionDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceCollectionEthernetInterfaceCollectionDescription1 performs a merge with any union data inside the EthernetInterfaceCollectionEthernetInterfaceCollection_Description, using the provided EthernetInterfaceCollectionEthernetInterfaceCollectionDescription1
func (t *EthernetInterfaceCollectionEthernetInterfaceCollection_Description) MergeEthernetInterfaceCollectionEthernetInterfaceCollectionDescription1(v EthernetInterfaceCollectionEthernetInterfaceCollectionDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceCollectionEthernetInterfaceCollection_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceCollectionEthernetInterfaceCollection_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEthernetInterfaceV1122DHCPFallback returns the union data inside the EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress as a EthernetInterfaceV1122DHCPFallback
func (t EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress) AsEthernetInterfaceV1122DHCPFallback() (EthernetInterfaceV1122DHCPFallback, error) {
	var body EthernetInterfaceV1122DHCPFallback
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122DHCPFallback overwrites any union data inside the EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress as the provided EthernetInterfaceV1122DHCPFallback
func (t *EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress) FromEthernetInterfaceV1122DHCPFallback(v EthernetInterfaceV1122DHCPFallback) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122DHCPFallback performs a merge with any union data inside the EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress, using the provided EthernetInterfaceV1122DHCPFallback
func (t *EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress) MergeEthernetInterfaceV1122DHCPFallback(v EthernetInterfaceV1122DHCPFallback) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1 returns the union data inside the EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress as a EthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1
func (t EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress) AsEthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1() (EthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1, error) {
	var body EthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1 overwrites any union data inside the EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress as the provided EthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1
func (t *EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress) FromEthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1(v EthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1 performs a merge with any union data inside the EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress, using the provided EthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1
func (t *EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress) MergeEthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1(v EthernetInterfaceV1122DHCPv4ConfigurationFallbackAddress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceV1122DHCPv4Configuration_FallbackAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEthernetInterfaceV1122DHCPv6OperatingMode returns the union data inside the EthernetInterfaceV1122DHCPv6Configuration_OperatingMode as a EthernetInterfaceV1122DHCPv6OperatingMode
func (t EthernetInterfaceV1122DHCPv6Configuration_OperatingMode) AsEthernetInterfaceV1122DHCPv6OperatingMode() (EthernetInterfaceV1122DHCPv6OperatingMode, error) {
	var body EthernetInterfaceV1122DHCPv6OperatingMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122DHCPv6OperatingMode overwrites any union data inside the EthernetInterfaceV1122DHCPv6Configuration_OperatingMode as the provided EthernetInterfaceV1122DHCPv6OperatingMode
func (t *EthernetInterfaceV1122DHCPv6Configuration_OperatingMode) FromEthernetInterfaceV1122DHCPv6OperatingMode(v EthernetInterfaceV1122DHCPv6OperatingMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122DHCPv6OperatingMode performs a merge with any union data inside the EthernetInterfaceV1122DHCPv6Configuration_OperatingMode, using the provided EthernetInterfaceV1122DHCPv6OperatingMode
func (t *EthernetInterfaceV1122DHCPv6Configuration_OperatingMode) MergeEthernetInterfaceV1122DHCPv6OperatingMode(v EthernetInterfaceV1122DHCPv6OperatingMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1 returns the union data inside the EthernetInterfaceV1122DHCPv6Configuration_OperatingMode as a EthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1
func (t EthernetInterfaceV1122DHCPv6Configuration_OperatingMode) AsEthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1() (EthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1, error) {
	var body EthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1 overwrites any union data inside the EthernetInterfaceV1122DHCPv6Configuration_OperatingMode as the provided EthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1
func (t *EthernetInterfaceV1122DHCPv6Configuration_OperatingMode) FromEthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1(v EthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1 performs a merge with any union data inside the EthernetInterfaceV1122DHCPv6Configuration_OperatingMode, using the provided EthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1
func (t *EthernetInterfaceV1122DHCPv6Configuration_OperatingMode) MergeEthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1(v EthernetInterfaceV1122DHCPv6ConfigurationOperatingMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceV1122DHCPv6Configuration_OperatingMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceV1122DHCPv6Configuration_OperatingMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the EthernetInterfaceV1122EthernetInterface_Description as a ResourceDescription
func (t EthernetInterfaceV1122EthernetInterface_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_Description as the provided ResourceDescription
func (t *EthernetInterfaceV1122EthernetInterface_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_Description, using the provided ResourceDescription
func (t *EthernetInterfaceV1122EthernetInterface_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceV1122EthernetInterfaceDescription1 returns the union data inside the EthernetInterfaceV1122EthernetInterface_Description as a EthernetInterfaceV1122EthernetInterfaceDescription1
func (t EthernetInterfaceV1122EthernetInterface_Description) AsEthernetInterfaceV1122EthernetInterfaceDescription1() (EthernetInterfaceV1122EthernetInterfaceDescription1, error) {
	var body EthernetInterfaceV1122EthernetInterfaceDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122EthernetInterfaceDescription1 overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_Description as the provided EthernetInterfaceV1122EthernetInterfaceDescription1
func (t *EthernetInterfaceV1122EthernetInterface_Description) FromEthernetInterfaceV1122EthernetInterfaceDescription1(v EthernetInterfaceV1122EthernetInterfaceDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122EthernetInterfaceDescription1 performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_Description, using the provided EthernetInterfaceV1122EthernetInterfaceDescription1
func (t *EthernetInterfaceV1122EthernetInterface_Description) MergeEthernetInterfaceV1122EthernetInterfaceDescription1(v EthernetInterfaceV1122EthernetInterfaceDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceV1122EthernetInterface_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceV1122EthernetInterface_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEthernetInterfaceV1122EthernetDeviceType returns the union data inside the EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType as a EthernetInterfaceV1122EthernetDeviceType
func (t EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType) AsEthernetInterfaceV1122EthernetDeviceType() (EthernetInterfaceV1122EthernetDeviceType, error) {
	var body EthernetInterfaceV1122EthernetDeviceType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122EthernetDeviceType overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType as the provided EthernetInterfaceV1122EthernetDeviceType
func (t *EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType) FromEthernetInterfaceV1122EthernetDeviceType(v EthernetInterfaceV1122EthernetDeviceType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122EthernetDeviceType performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType, using the provided EthernetInterfaceV1122EthernetDeviceType
func (t *EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType) MergeEthernetInterfaceV1122EthernetDeviceType(v EthernetInterfaceV1122EthernetDeviceType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1 returns the union data inside the EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType as a EthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1
func (t EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType) AsEthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1() (EthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1, error) {
	var body EthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1 overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType as the provided EthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1
func (t *EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType) FromEthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1(v EthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1 performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType, using the provided EthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1
func (t *EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType) MergeEthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1(v EthernetInterfaceV1122EthernetInterfaceEthernetInterfaceType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceV1122EthernetInterface_EthernetInterfaceType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIPAddressesV115IPv4Address returns the union data inside the EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item as a IPAddressesV115IPv4Address
func (t EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item) AsIPAddressesV115IPv4Address() (IPAddressesV115IPv4Address, error) {
	var body IPAddressesV115IPv4Address
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115IPv4Address overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item as the provided IPAddressesV115IPv4Address
func (t *EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item) FromIPAddressesV115IPv4Address(v IPAddressesV115IPv4Address) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115IPv4Address performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item, using the provided IPAddressesV115IPv4Address
func (t *EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item) MergeIPAddressesV115IPv4Address(v IPAddressesV115IPv4Address) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1 returns the union data inside the EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item as a EthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1
func (t EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item) AsEthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1() (EthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1, error) {
	var body EthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1 overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item as the provided EthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1
func (t *EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item) FromEthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1(v EthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1 performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item, using the provided EthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1
func (t *EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item) MergeEthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1(v EthernetInterfaceV1122EthernetInterfaceIPv4StaticAddresses1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceV1122EthernetInterface_IPv4StaticAddresses_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEthernetInterfaceV1122IPv6AddressPolicyEntry returns the union data inside the EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item as a EthernetInterfaceV1122IPv6AddressPolicyEntry
func (t EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item) AsEthernetInterfaceV1122IPv6AddressPolicyEntry() (EthernetInterfaceV1122IPv6AddressPolicyEntry, error) {
	var body EthernetInterfaceV1122IPv6AddressPolicyEntry
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122IPv6AddressPolicyEntry overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item as the provided EthernetInterfaceV1122IPv6AddressPolicyEntry
func (t *EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item) FromEthernetInterfaceV1122IPv6AddressPolicyEntry(v EthernetInterfaceV1122IPv6AddressPolicyEntry) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122IPv6AddressPolicyEntry performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item, using the provided EthernetInterfaceV1122IPv6AddressPolicyEntry
func (t *EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item) MergeEthernetInterfaceV1122IPv6AddressPolicyEntry(v EthernetInterfaceV1122IPv6AddressPolicyEntry) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1 returns the union data inside the EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item as a EthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1
func (t EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item) AsEthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1() (EthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1, error) {
	var body EthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1 overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item as the provided EthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1
func (t *EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item) FromEthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1(v EthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1 performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item, using the provided EthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1
func (t *EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item) MergeEthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1(v EthernetInterfaceV1122EthernetInterfaceIPv6AddressPolicyTable1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceV1122EthernetInterface_IPv6AddressPolicyTable_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIPAddressesV115IPv6StaticAddress returns the union data inside the EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item as a IPAddressesV115IPv6StaticAddress
func (t EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item) AsIPAddressesV115IPv6StaticAddress() (IPAddressesV115IPv6StaticAddress, error) {
	var body IPAddressesV115IPv6StaticAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115IPv6StaticAddress overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item as the provided IPAddressesV115IPv6StaticAddress
func (t *EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item) FromIPAddressesV115IPv6StaticAddress(v IPAddressesV115IPv6StaticAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115IPv6StaticAddress performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item, using the provided IPAddressesV115IPv6StaticAddress
func (t *EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item) MergeIPAddressesV115IPv6StaticAddress(v IPAddressesV115IPv6StaticAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1 returns the union data inside the EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item as a EthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1
func (t EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item) AsEthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1() (EthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1, error) {
	var body EthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1 overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item as the provided EthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1
func (t *EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item) FromEthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1(v EthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1 performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item, using the provided EthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1
func (t *EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item) MergeEthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1(v EthernetInterfaceV1122EthernetInterfaceIPv6StaticAddresses1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceV1122EthernetInterface_IPv6StaticAddresses_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIPAddressesV115IPv6GatewayStaticAddress returns the union data inside the EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item as a IPAddressesV115IPv6GatewayStaticAddress
func (t EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item) AsIPAddressesV115IPv6GatewayStaticAddress() (IPAddressesV115IPv6GatewayStaticAddress, error) {
	var body IPAddressesV115IPv6GatewayStaticAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115IPv6GatewayStaticAddress overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item as the provided IPAddressesV115IPv6GatewayStaticAddress
func (t *EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item) FromIPAddressesV115IPv6GatewayStaticAddress(v IPAddressesV115IPv6GatewayStaticAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115IPv6GatewayStaticAddress performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item, using the provided IPAddressesV115IPv6GatewayStaticAddress
func (t *EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item) MergeIPAddressesV115IPv6GatewayStaticAddress(v IPAddressesV115IPv6GatewayStaticAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1 returns the union data inside the EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item as a EthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1
func (t EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item) AsEthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1() (EthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1, error) {
	var body EthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1 overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item as the provided EthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1
func (t *EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item) FromEthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1(v EthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1 performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item, using the provided EthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1
func (t *EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item) MergeEthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1(v EthernetInterfaceV1122EthernetInterfaceIPv6StaticDefaultGateways1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceV1122EthernetInterface_IPv6StaticDefaultGateways_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEthernetInterfaceV1122LinkStatus returns the union data inside the EthernetInterfaceV1122EthernetInterface_LinkStatus as a EthernetInterfaceV1122LinkStatus
func (t EthernetInterfaceV1122EthernetInterface_LinkStatus) AsEthernetInterfaceV1122LinkStatus() (EthernetInterfaceV1122LinkStatus, error) {
	var body EthernetInterfaceV1122LinkStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122LinkStatus overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_LinkStatus as the provided EthernetInterfaceV1122LinkStatus
func (t *EthernetInterfaceV1122EthernetInterface_LinkStatus) FromEthernetInterfaceV1122LinkStatus(v EthernetInterfaceV1122LinkStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122LinkStatus performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_LinkStatus, using the provided EthernetInterfaceV1122LinkStatus
func (t *EthernetInterfaceV1122EthernetInterface_LinkStatus) MergeEthernetInterfaceV1122LinkStatus(v EthernetInterfaceV1122LinkStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceV1122EthernetInterfaceLinkStatus1 returns the union data inside the EthernetInterfaceV1122EthernetInterface_LinkStatus as a EthernetInterfaceV1122EthernetInterfaceLinkStatus1
func (t EthernetInterfaceV1122EthernetInterface_LinkStatus) AsEthernetInterfaceV1122EthernetInterfaceLinkStatus1() (EthernetInterfaceV1122EthernetInterfaceLinkStatus1, error) {
	var body EthernetInterfaceV1122EthernetInterfaceLinkStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122EthernetInterfaceLinkStatus1 overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_LinkStatus as the provided EthernetInterfaceV1122EthernetInterfaceLinkStatus1
func (t *EthernetInterfaceV1122EthernetInterface_LinkStatus) FromEthernetInterfaceV1122EthernetInterfaceLinkStatus1(v EthernetInterfaceV1122EthernetInterfaceLinkStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122EthernetInterfaceLinkStatus1 performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_LinkStatus, using the provided EthernetInterfaceV1122EthernetInterfaceLinkStatus1
func (t *EthernetInterfaceV1122EthernetInterface_LinkStatus) MergeEthernetInterfaceV1122EthernetInterfaceLinkStatus1(v EthernetInterfaceV1122EthernetInterfaceLinkStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceV1122EthernetInterface_LinkStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceV1122EthernetInterface_LinkStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEthernetInterfaceV1122MACAddress returns the union data inside the EthernetInterfaceV1122EthernetInterface_MACAddress as a EthernetInterfaceV1122MACAddress
func (t EthernetInterfaceV1122EthernetInterface_MACAddress) AsEthernetInterfaceV1122MACAddress() (EthernetInterfaceV1122MACAddress, error) {
	var body EthernetInterfaceV1122MACAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122MACAddress overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_MACAddress as the provided EthernetInterfaceV1122MACAddress
func (t *EthernetInterfaceV1122EthernetInterface_MACAddress) FromEthernetInterfaceV1122MACAddress(v EthernetInterfaceV1122MACAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122MACAddress performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_MACAddress, using the provided EthernetInterfaceV1122MACAddress
func (t *EthernetInterfaceV1122EthernetInterface_MACAddress) MergeEthernetInterfaceV1122MACAddress(v EthernetInterfaceV1122MACAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceV1122EthernetInterfaceMACAddress1 returns the union data inside the EthernetInterfaceV1122EthernetInterface_MACAddress as a EthernetInterfaceV1122EthernetInterfaceMACAddress1
func (t EthernetInterfaceV1122EthernetInterface_MACAddress) AsEthernetInterfaceV1122EthernetInterfaceMACAddress1() (EthernetInterfaceV1122EthernetInterfaceMACAddress1, error) {
	var body EthernetInterfaceV1122EthernetInterfaceMACAddress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122EthernetInterfaceMACAddress1 overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_MACAddress as the provided EthernetInterfaceV1122EthernetInterfaceMACAddress1
func (t *EthernetInterfaceV1122EthernetInterface_MACAddress) FromEthernetInterfaceV1122EthernetInterfaceMACAddress1(v EthernetInterfaceV1122EthernetInterfaceMACAddress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122EthernetInterfaceMACAddress1 performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_MACAddress, using the provided EthernetInterfaceV1122EthernetInterfaceMACAddress1
func (t *EthernetInterfaceV1122EthernetInterface_MACAddress) MergeEthernetInterfaceV1122EthernetInterfaceMACAddress1(v EthernetInterfaceV1122EthernetInterfaceMACAddress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceV1122EthernetInterface_MACAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceV1122EthernetInterface_MACAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEthernetInterfaceV1122MACAddress returns the union data inside the EthernetInterfaceV1122EthernetInterface_PermanentMACAddress as a EthernetInterfaceV1122MACAddress
func (t EthernetInterfaceV1122EthernetInterface_PermanentMACAddress) AsEthernetInterfaceV1122MACAddress() (EthernetInterfaceV1122MACAddress, error) {
	var body EthernetInterfaceV1122MACAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122MACAddress overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_PermanentMACAddress as the provided EthernetInterfaceV1122MACAddress
func (t *EthernetInterfaceV1122EthernetInterface_PermanentMACAddress) FromEthernetInterfaceV1122MACAddress(v EthernetInterfaceV1122MACAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122MACAddress performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_PermanentMACAddress, using the provided EthernetInterfaceV1122MACAddress
func (t *EthernetInterfaceV1122EthernetInterface_PermanentMACAddress) MergeEthernetInterfaceV1122MACAddress(v EthernetInterfaceV1122MACAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceV1122EthernetInterfacePermanentMACAddress1 returns the union data inside the EthernetInterfaceV1122EthernetInterface_PermanentMACAddress as a EthernetInterfaceV1122EthernetInterfacePermanentMACAddress1
func (t EthernetInterfaceV1122EthernetInterface_PermanentMACAddress) AsEthernetInterfaceV1122EthernetInterfacePermanentMACAddress1() (EthernetInterfaceV1122EthernetInterfacePermanentMACAddress1, error) {
	var body EthernetInterfaceV1122EthernetInterfacePermanentMACAddress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122EthernetInterfacePermanentMACAddress1 overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_PermanentMACAddress as the provided EthernetInterfaceV1122EthernetInterfacePermanentMACAddress1
func (t *EthernetInterfaceV1122EthernetInterface_PermanentMACAddress) FromEthernetInterfaceV1122EthernetInterfacePermanentMACAddress1(v EthernetInterfaceV1122EthernetInterfacePermanentMACAddress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122EthernetInterfacePermanentMACAddress1 performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_PermanentMACAddress, using the provided EthernetInterfaceV1122EthernetInterfacePermanentMACAddress1
func (t *EthernetInterfaceV1122EthernetInterface_PermanentMACAddress) MergeEthernetInterfaceV1122EthernetInterfacePermanentMACAddress1(v EthernetInterfaceV1122EthernetInterfacePermanentMACAddress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceV1122EthernetInterface_PermanentMACAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceV1122EthernetInterface_PermanentMACAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEthernetInterfaceV1122RoutingScope returns the union data inside the EthernetInterfaceV1122EthernetInterface_RoutingScope as a EthernetInterfaceV1122RoutingScope
func (t EthernetInterfaceV1122EthernetInterface_RoutingScope) AsEthernetInterfaceV1122RoutingScope() (EthernetInterfaceV1122RoutingScope, error) {
	var body EthernetInterfaceV1122RoutingScope
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122RoutingScope overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_RoutingScope as the provided EthernetInterfaceV1122RoutingScope
func (t *EthernetInterfaceV1122EthernetInterface_RoutingScope) FromEthernetInterfaceV1122RoutingScope(v EthernetInterfaceV1122RoutingScope) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122RoutingScope performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_RoutingScope, using the provided EthernetInterfaceV1122RoutingScope
func (t *EthernetInterfaceV1122EthernetInterface_RoutingScope) MergeEthernetInterfaceV1122RoutingScope(v EthernetInterfaceV1122RoutingScope) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceV1122EthernetInterfaceRoutingScope1 returns the union data inside the EthernetInterfaceV1122EthernetInterface_RoutingScope as a EthernetInterfaceV1122EthernetInterfaceRoutingScope1
func (t EthernetInterfaceV1122EthernetInterface_RoutingScope) AsEthernetInterfaceV1122EthernetInterfaceRoutingScope1() (EthernetInterfaceV1122EthernetInterfaceRoutingScope1, error) {
	var body EthernetInterfaceV1122EthernetInterfaceRoutingScope1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122EthernetInterfaceRoutingScope1 overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_RoutingScope as the provided EthernetInterfaceV1122EthernetInterfaceRoutingScope1
func (t *EthernetInterfaceV1122EthernetInterface_RoutingScope) FromEthernetInterfaceV1122EthernetInterfaceRoutingScope1(v EthernetInterfaceV1122EthernetInterfaceRoutingScope1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122EthernetInterfaceRoutingScope1 performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_RoutingScope, using the provided EthernetInterfaceV1122EthernetInterfaceRoutingScope1
func (t *EthernetInterfaceV1122EthernetInterface_RoutingScope) MergeEthernetInterfaceV1122EthernetInterfaceRoutingScope1(v EthernetInterfaceV1122EthernetInterfaceRoutingScope1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceV1122EthernetInterface_RoutingScope) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceV1122EthernetInterface_RoutingScope) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEthernetInterfaceV1122TeamMode returns the union data inside the EthernetInterfaceV1122EthernetInterface_TeamMode as a EthernetInterfaceV1122TeamMode
func (t EthernetInterfaceV1122EthernetInterface_TeamMode) AsEthernetInterfaceV1122TeamMode() (EthernetInterfaceV1122TeamMode, error) {
	var body EthernetInterfaceV1122TeamMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122TeamMode overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_TeamMode as the provided EthernetInterfaceV1122TeamMode
func (t *EthernetInterfaceV1122EthernetInterface_TeamMode) FromEthernetInterfaceV1122TeamMode(v EthernetInterfaceV1122TeamMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122TeamMode performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_TeamMode, using the provided EthernetInterfaceV1122TeamMode
func (t *EthernetInterfaceV1122EthernetInterface_TeamMode) MergeEthernetInterfaceV1122TeamMode(v EthernetInterfaceV1122TeamMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceV1122EthernetInterfaceTeamMode1 returns the union data inside the EthernetInterfaceV1122EthernetInterface_TeamMode as a EthernetInterfaceV1122EthernetInterfaceTeamMode1
func (t EthernetInterfaceV1122EthernetInterface_TeamMode) AsEthernetInterfaceV1122EthernetInterfaceTeamMode1() (EthernetInterfaceV1122EthernetInterfaceTeamMode1, error) {
	var body EthernetInterfaceV1122EthernetInterfaceTeamMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122EthernetInterfaceTeamMode1 overwrites any union data inside the EthernetInterfaceV1122EthernetInterface_TeamMode as the provided EthernetInterfaceV1122EthernetInterfaceTeamMode1
func (t *EthernetInterfaceV1122EthernetInterface_TeamMode) FromEthernetInterfaceV1122EthernetInterfaceTeamMode1(v EthernetInterfaceV1122EthernetInterfaceTeamMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122EthernetInterfaceTeamMode1 performs a merge with any union data inside the EthernetInterfaceV1122EthernetInterface_TeamMode, using the provided EthernetInterfaceV1122EthernetInterfaceTeamMode1
func (t *EthernetInterfaceV1122EthernetInterface_TeamMode) MergeEthernetInterfaceV1122EthernetInterfaceTeamMode1(v EthernetInterfaceV1122EthernetInterfaceTeamMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceV1122EthernetInterface_TeamMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceV1122EthernetInterface_TeamMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOdataV4IdRef returns the union data inside the EthernetInterfaceV1122Links_NetworkDeviceFunction as a OdataV4IdRef
func (t EthernetInterfaceV1122Links_NetworkDeviceFunction) AsOdataV4IdRef() (OdataV4IdRef, error) {
	var body OdataV4IdRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOdataV4IdRef overwrites any union data inside the EthernetInterfaceV1122Links_NetworkDeviceFunction as the provided OdataV4IdRef
func (t *EthernetInterfaceV1122Links_NetworkDeviceFunction) FromOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOdataV4IdRef performs a merge with any union data inside the EthernetInterfaceV1122Links_NetworkDeviceFunction, using the provided OdataV4IdRef
func (t *EthernetInterfaceV1122Links_NetworkDeviceFunction) MergeOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEthernetInterfaceV1122LinksNetworkDeviceFunction1 returns the union data inside the EthernetInterfaceV1122Links_NetworkDeviceFunction as a EthernetInterfaceV1122LinksNetworkDeviceFunction1
func (t EthernetInterfaceV1122Links_NetworkDeviceFunction) AsEthernetInterfaceV1122LinksNetworkDeviceFunction1() (EthernetInterfaceV1122LinksNetworkDeviceFunction1, error) {
	var body EthernetInterfaceV1122LinksNetworkDeviceFunction1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEthernetInterfaceV1122LinksNetworkDeviceFunction1 overwrites any union data inside the EthernetInterfaceV1122Links_NetworkDeviceFunction as the provided EthernetInterfaceV1122LinksNetworkDeviceFunction1
func (t *EthernetInterfaceV1122Links_NetworkDeviceFunction) FromEthernetInterfaceV1122LinksNetworkDeviceFunction1(v EthernetInterfaceV1122LinksNetworkDeviceFunction1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEthernetInterfaceV1122LinksNetworkDeviceFunction1 performs a merge with any union data inside the EthernetInterfaceV1122Links_NetworkDeviceFunction, using the provided EthernetInterfaceV1122LinksNetworkDeviceFunction1
func (t *EthernetInterfaceV1122Links_NetworkDeviceFunction) MergeEthernetInterfaceV1122LinksNetworkDeviceFunction1(v EthernetInterfaceV1122LinksNetworkDeviceFunction1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EthernetInterfaceV1122Links_NetworkDeviceFunction) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EthernetInterfaceV1122Links_NetworkDeviceFunction) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the FileShareCollectionFileShareCollection_Description as a ResourceDescription
func (t FileShareCollectionFileShareCollection_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the FileShareCollectionFileShareCollection_Description as the provided ResourceDescription
func (t *FileShareCollectionFileShareCollection_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the FileShareCollectionFileShareCollection_Description, using the provided ResourceDescription
func (t *FileShareCollectionFileShareCollection_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFileShareCollectionFileShareCollectionDescription1 returns the union data inside the FileShareCollectionFileShareCollection_Description as a FileShareCollectionFileShareCollectionDescription1
func (t FileShareCollectionFileShareCollection_Description) AsFileShareCollectionFileShareCollectionDescription1() (FileShareCollectionFileShareCollectionDescription1, error) {
	var body FileShareCollectionFileShareCollectionDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileShareCollectionFileShareCollectionDescription1 overwrites any union data inside the FileShareCollectionFileShareCollection_Description as the provided FileShareCollectionFileShareCollectionDescription1
func (t *FileShareCollectionFileShareCollection_Description) FromFileShareCollectionFileShareCollectionDescription1(v FileShareCollectionFileShareCollectionDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileShareCollectionFileShareCollectionDescription1 performs a merge with any union data inside the FileShareCollectionFileShareCollection_Description, using the provided FileShareCollectionFileShareCollectionDescription1
func (t *FileShareCollectionFileShareCollection_Description) MergeFileShareCollectionFileShareCollectionDescription1(v FileShareCollectionFileShareCollectionDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FileShareCollectionFileShareCollection_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FileShareCollectionFileShareCollection_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataStorageLoSCapabilitiesStorageAccessCapability returns the union data inside the FileShareV130FileShare_DefaultAccessCapabilities_Item as a DataStorageLoSCapabilitiesStorageAccessCapability
func (t FileShareV130FileShare_DefaultAccessCapabilities_Item) AsDataStorageLoSCapabilitiesStorageAccessCapability() (DataStorageLoSCapabilitiesStorageAccessCapability, error) {
	var body DataStorageLoSCapabilitiesStorageAccessCapability
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataStorageLoSCapabilitiesStorageAccessCapability overwrites any union data inside the FileShareV130FileShare_DefaultAccessCapabilities_Item as the provided DataStorageLoSCapabilitiesStorageAccessCapability
func (t *FileShareV130FileShare_DefaultAccessCapabilities_Item) FromDataStorageLoSCapabilitiesStorageAccessCapability(v DataStorageLoSCapabilitiesStorageAccessCapability) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataStorageLoSCapabilitiesStorageAccessCapability performs a merge with any union data inside the FileShareV130FileShare_DefaultAccessCapabilities_Item, using the provided DataStorageLoSCapabilitiesStorageAccessCapability
func (t *FileShareV130FileShare_DefaultAccessCapabilities_Item) MergeDataStorageLoSCapabilitiesStorageAccessCapability(v DataStorageLoSCapabilitiesStorageAccessCapability) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFileShareV130FileShareDefaultAccessCapabilities1 returns the union data inside the FileShareV130FileShare_DefaultAccessCapabilities_Item as a FileShareV130FileShareDefaultAccessCapabilities1
func (t FileShareV130FileShare_DefaultAccessCapabilities_Item) AsFileShareV130FileShareDefaultAccessCapabilities1() (FileShareV130FileShareDefaultAccessCapabilities1, error) {
	var body FileShareV130FileShareDefaultAccessCapabilities1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileShareV130FileShareDefaultAccessCapabilities1 overwrites any union data inside the FileShareV130FileShare_DefaultAccessCapabilities_Item as the provided FileShareV130FileShareDefaultAccessCapabilities1
func (t *FileShareV130FileShare_DefaultAccessCapabilities_Item) FromFileShareV130FileShareDefaultAccessCapabilities1(v FileShareV130FileShareDefaultAccessCapabilities1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileShareV130FileShareDefaultAccessCapabilities1 performs a merge with any union data inside the FileShareV130FileShare_DefaultAccessCapabilities_Item, using the provided FileShareV130FileShareDefaultAccessCapabilities1
func (t *FileShareV130FileShare_DefaultAccessCapabilities_Item) MergeFileShareV130FileShareDefaultAccessCapabilities1(v FileShareV130FileShareDefaultAccessCapabilities1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FileShareV130FileShare_DefaultAccessCapabilities_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FileShareV130FileShare_DefaultAccessCapabilities_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the FileShareV130FileShare_Description as a ResourceDescription
func (t FileShareV130FileShare_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the FileShareV130FileShare_Description as the provided ResourceDescription
func (t *FileShareV130FileShare_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the FileShareV130FileShare_Description, using the provided ResourceDescription
func (t *FileShareV130FileShare_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFileShareV130FileShareDescription1 returns the union data inside the FileShareV130FileShare_Description as a FileShareV130FileShareDescription1
func (t FileShareV130FileShare_Description) AsFileShareV130FileShareDescription1() (FileShareV130FileShareDescription1, error) {
	var body FileShareV130FileShareDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileShareV130FileShareDescription1 overwrites any union data inside the FileShareV130FileShare_Description as the provided FileShareV130FileShareDescription1
func (t *FileShareV130FileShare_Description) FromFileShareV130FileShareDescription1(v FileShareV130FileShareDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileShareV130FileShareDescription1 performs a merge with any union data inside the FileShareV130FileShare_Description, using the provided FileShareV130FileShareDescription1
func (t *FileShareV130FileShare_Description) MergeFileShareV130FileShareDescription1(v FileShareV130FileShareDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FileShareV130FileShare_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FileShareV130FileShare_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFileShareV130QuotaType returns the union data inside the FileShareV130FileShare_FileShareQuotaType as a FileShareV130QuotaType
func (t FileShareV130FileShare_FileShareQuotaType) AsFileShareV130QuotaType() (FileShareV130QuotaType, error) {
	var body FileShareV130QuotaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileShareV130QuotaType overwrites any union data inside the FileShareV130FileShare_FileShareQuotaType as the provided FileShareV130QuotaType
func (t *FileShareV130FileShare_FileShareQuotaType) FromFileShareV130QuotaType(v FileShareV130QuotaType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileShareV130QuotaType performs a merge with any union data inside the FileShareV130FileShare_FileShareQuotaType, using the provided FileShareV130QuotaType
func (t *FileShareV130FileShare_FileShareQuotaType) MergeFileShareV130QuotaType(v FileShareV130QuotaType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFileShareV130FileShareFileShareQuotaType1 returns the union data inside the FileShareV130FileShare_FileShareQuotaType as a FileShareV130FileShareFileShareQuotaType1
func (t FileShareV130FileShare_FileShareQuotaType) AsFileShareV130FileShareFileShareQuotaType1() (FileShareV130FileShareFileShareQuotaType1, error) {
	var body FileShareV130FileShareFileShareQuotaType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileShareV130FileShareFileShareQuotaType1 overwrites any union data inside the FileShareV130FileShare_FileShareQuotaType as the provided FileShareV130FileShareFileShareQuotaType1
func (t *FileShareV130FileShare_FileShareQuotaType) FromFileShareV130FileShareFileShareQuotaType1(v FileShareV130FileShareFileShareQuotaType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileShareV130FileShareFileShareQuotaType1 performs a merge with any union data inside the FileShareV130FileShare_FileShareQuotaType, using the provided FileShareV130FileShareFileShareQuotaType1
func (t *FileShareV130FileShare_FileShareQuotaType) MergeFileShareV130FileShareFileShareQuotaType1(v FileShareV130FileShareFileShareQuotaType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FileShareV130FileShare_FileShareQuotaType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FileShareV130FileShare_FileShareQuotaType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFileSystemFileProtocol returns the union data inside the FileShareV130FileShare_FileSharingProtocols_Item as a FileSystemFileProtocol
func (t FileShareV130FileShare_FileSharingProtocols_Item) AsFileSystemFileProtocol() (FileSystemFileProtocol, error) {
	var body FileSystemFileProtocol
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileSystemFileProtocol overwrites any union data inside the FileShareV130FileShare_FileSharingProtocols_Item as the provided FileSystemFileProtocol
func (t *FileShareV130FileShare_FileSharingProtocols_Item) FromFileSystemFileProtocol(v FileSystemFileProtocol) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileSystemFileProtocol performs a merge with any union data inside the FileShareV130FileShare_FileSharingProtocols_Item, using the provided FileSystemFileProtocol
func (t *FileShareV130FileShare_FileSharingProtocols_Item) MergeFileSystemFileProtocol(v FileSystemFileProtocol) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFileShareV130FileShareFileSharingProtocols1 returns the union data inside the FileShareV130FileShare_FileSharingProtocols_Item as a FileShareV130FileShareFileSharingProtocols1
func (t FileShareV130FileShare_FileSharingProtocols_Item) AsFileShareV130FileShareFileSharingProtocols1() (FileShareV130FileShareFileSharingProtocols1, error) {
	var body FileShareV130FileShareFileSharingProtocols1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileShareV130FileShareFileSharingProtocols1 overwrites any union data inside the FileShareV130FileShare_FileSharingProtocols_Item as the provided FileShareV130FileShareFileSharingProtocols1
func (t *FileShareV130FileShare_FileSharingProtocols_Item) FromFileShareV130FileShareFileSharingProtocols1(v FileShareV130FileShareFileSharingProtocols1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileShareV130FileShareFileSharingProtocols1 performs a merge with any union data inside the FileShareV130FileShare_FileSharingProtocols_Item, using the provided FileShareV130FileShareFileSharingProtocols1
func (t *FileShareV130FileShare_FileSharingProtocols_Item) MergeFileShareV130FileShareFileSharingProtocols1(v FileShareV130FileShareFileSharingProtocols1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FileShareV130FileShare_FileSharingProtocols_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FileShareV130FileShare_FileSharingProtocols_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoReplicaUpdateMode returns the union data inside the FileShareV130FileShare_WritePolicy as a StorageReplicaInfoReplicaUpdateMode
func (t FileShareV130FileShare_WritePolicy) AsStorageReplicaInfoReplicaUpdateMode() (StorageReplicaInfoReplicaUpdateMode, error) {
	var body StorageReplicaInfoReplicaUpdateMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoReplicaUpdateMode overwrites any union data inside the FileShareV130FileShare_WritePolicy as the provided StorageReplicaInfoReplicaUpdateMode
func (t *FileShareV130FileShare_WritePolicy) FromStorageReplicaInfoReplicaUpdateMode(v StorageReplicaInfoReplicaUpdateMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoReplicaUpdateMode performs a merge with any union data inside the FileShareV130FileShare_WritePolicy, using the provided StorageReplicaInfoReplicaUpdateMode
func (t *FileShareV130FileShare_WritePolicy) MergeStorageReplicaInfoReplicaUpdateMode(v StorageReplicaInfoReplicaUpdateMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFileShareV130FileShareWritePolicy1 returns the union data inside the FileShareV130FileShare_WritePolicy as a FileShareV130FileShareWritePolicy1
func (t FileShareV130FileShare_WritePolicy) AsFileShareV130FileShareWritePolicy1() (FileShareV130FileShareWritePolicy1, error) {
	var body FileShareV130FileShareWritePolicy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileShareV130FileShareWritePolicy1 overwrites any union data inside the FileShareV130FileShare_WritePolicy as the provided FileShareV130FileShareWritePolicy1
func (t *FileShareV130FileShare_WritePolicy) FromFileShareV130FileShareWritePolicy1(v FileShareV130FileShareWritePolicy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileShareV130FileShareWritePolicy1 performs a merge with any union data inside the FileShareV130FileShare_WritePolicy, using the provided FileShareV130FileShareWritePolicy1
func (t *FileShareV130FileShare_WritePolicy) MergeFileShareV130FileShareWritePolicy1(v FileShareV130FileShareWritePolicy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FileShareV130FileShare_WritePolicy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FileShareV130FileShare_WritePolicy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the FileSystemCollectionFileSystemCollection_Description as a ResourceDescription
func (t FileSystemCollectionFileSystemCollection_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the FileSystemCollectionFileSystemCollection_Description as the provided ResourceDescription
func (t *FileSystemCollectionFileSystemCollection_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the FileSystemCollectionFileSystemCollection_Description, using the provided ResourceDescription
func (t *FileSystemCollectionFileSystemCollection_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFileSystemCollectionFileSystemCollectionDescription1 returns the union data inside the FileSystemCollectionFileSystemCollection_Description as a FileSystemCollectionFileSystemCollectionDescription1
func (t FileSystemCollectionFileSystemCollection_Description) AsFileSystemCollectionFileSystemCollectionDescription1() (FileSystemCollectionFileSystemCollectionDescription1, error) {
	var body FileSystemCollectionFileSystemCollectionDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileSystemCollectionFileSystemCollectionDescription1 overwrites any union data inside the FileSystemCollectionFileSystemCollection_Description as the provided FileSystemCollectionFileSystemCollectionDescription1
func (t *FileSystemCollectionFileSystemCollection_Description) FromFileSystemCollectionFileSystemCollectionDescription1(v FileSystemCollectionFileSystemCollectionDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileSystemCollectionFileSystemCollectionDescription1 performs a merge with any union data inside the FileSystemCollectionFileSystemCollection_Description, using the provided FileSystemCollectionFileSystemCollectionDescription1
func (t *FileSystemCollectionFileSystemCollection_Description) MergeFileSystemCollectionFileSystemCollectionDescription1(v FileSystemCollectionFileSystemCollectionDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FileSystemCollectionFileSystemCollection_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FileSystemCollectionFileSystemCollection_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataStorageLoSCapabilitiesStorageAccessCapability returns the union data inside the FileSystemV141FileSystem_AccessCapabilities_Item as a DataStorageLoSCapabilitiesStorageAccessCapability
func (t FileSystemV141FileSystem_AccessCapabilities_Item) AsDataStorageLoSCapabilitiesStorageAccessCapability() (DataStorageLoSCapabilitiesStorageAccessCapability, error) {
	var body DataStorageLoSCapabilitiesStorageAccessCapability
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataStorageLoSCapabilitiesStorageAccessCapability overwrites any union data inside the FileSystemV141FileSystem_AccessCapabilities_Item as the provided DataStorageLoSCapabilitiesStorageAccessCapability
func (t *FileSystemV141FileSystem_AccessCapabilities_Item) FromDataStorageLoSCapabilitiesStorageAccessCapability(v DataStorageLoSCapabilitiesStorageAccessCapability) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataStorageLoSCapabilitiesStorageAccessCapability performs a merge with any union data inside the FileSystemV141FileSystem_AccessCapabilities_Item, using the provided DataStorageLoSCapabilitiesStorageAccessCapability
func (t *FileSystemV141FileSystem_AccessCapabilities_Item) MergeDataStorageLoSCapabilitiesStorageAccessCapability(v DataStorageLoSCapabilitiesStorageAccessCapability) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFileSystemV141FileSystemAccessCapabilities1 returns the union data inside the FileSystemV141FileSystem_AccessCapabilities_Item as a FileSystemV141FileSystemAccessCapabilities1
func (t FileSystemV141FileSystem_AccessCapabilities_Item) AsFileSystemV141FileSystemAccessCapabilities1() (FileSystemV141FileSystemAccessCapabilities1, error) {
	var body FileSystemV141FileSystemAccessCapabilities1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileSystemV141FileSystemAccessCapabilities1 overwrites any union data inside the FileSystemV141FileSystem_AccessCapabilities_Item as the provided FileSystemV141FileSystemAccessCapabilities1
func (t *FileSystemV141FileSystem_AccessCapabilities_Item) FromFileSystemV141FileSystemAccessCapabilities1(v FileSystemV141FileSystemAccessCapabilities1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileSystemV141FileSystemAccessCapabilities1 performs a merge with any union data inside the FileSystemV141FileSystem_AccessCapabilities_Item, using the provided FileSystemV141FileSystemAccessCapabilities1
func (t *FileSystemV141FileSystem_AccessCapabilities_Item) MergeFileSystemV141FileSystemAccessCapabilities1(v FileSystemV141FileSystemAccessCapabilities1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FileSystemV141FileSystem_AccessCapabilities_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FileSystemV141FileSystem_AccessCapabilities_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFileSystemV141CharacterCodeSet returns the union data inside the FileSystemV141FileSystem_CharacterCodeSet_Item as a FileSystemV141CharacterCodeSet
func (t FileSystemV141FileSystem_CharacterCodeSet_Item) AsFileSystemV141CharacterCodeSet() (FileSystemV141CharacterCodeSet, error) {
	var body FileSystemV141CharacterCodeSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileSystemV141CharacterCodeSet overwrites any union data inside the FileSystemV141FileSystem_CharacterCodeSet_Item as the provided FileSystemV141CharacterCodeSet
func (t *FileSystemV141FileSystem_CharacterCodeSet_Item) FromFileSystemV141CharacterCodeSet(v FileSystemV141CharacterCodeSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileSystemV141CharacterCodeSet performs a merge with any union data inside the FileSystemV141FileSystem_CharacterCodeSet_Item, using the provided FileSystemV141CharacterCodeSet
func (t *FileSystemV141FileSystem_CharacterCodeSet_Item) MergeFileSystemV141CharacterCodeSet(v FileSystemV141CharacterCodeSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFileSystemV141FileSystemCharacterCodeSet1 returns the union data inside the FileSystemV141FileSystem_CharacterCodeSet_Item as a FileSystemV141FileSystemCharacterCodeSet1
func (t FileSystemV141FileSystem_CharacterCodeSet_Item) AsFileSystemV141FileSystemCharacterCodeSet1() (FileSystemV141FileSystemCharacterCodeSet1, error) {
	var body FileSystemV141FileSystemCharacterCodeSet1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileSystemV141FileSystemCharacterCodeSet1 overwrites any union data inside the FileSystemV141FileSystem_CharacterCodeSet_Item as the provided FileSystemV141FileSystemCharacterCodeSet1
func (t *FileSystemV141FileSystem_CharacterCodeSet_Item) FromFileSystemV141FileSystemCharacterCodeSet1(v FileSystemV141FileSystemCharacterCodeSet1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileSystemV141FileSystemCharacterCodeSet1 performs a merge with any union data inside the FileSystemV141FileSystem_CharacterCodeSet_Item, using the provided FileSystemV141FileSystemCharacterCodeSet1
func (t *FileSystemV141FileSystem_CharacterCodeSet_Item) MergeFileSystemV141FileSystemCharacterCodeSet1(v FileSystemV141FileSystemCharacterCodeSet1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FileSystemV141FileSystem_CharacterCodeSet_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FileSystemV141FileSystem_CharacterCodeSet_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the FileSystemV141FileSystem_Description as a ResourceDescription
func (t FileSystemV141FileSystem_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the FileSystemV141FileSystem_Description as the provided ResourceDescription
func (t *FileSystemV141FileSystem_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the FileSystemV141FileSystem_Description, using the provided ResourceDescription
func (t *FileSystemV141FileSystem_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFileSystemV141FileSystemDescription1 returns the union data inside the FileSystemV141FileSystem_Description as a FileSystemV141FileSystemDescription1
func (t FileSystemV141FileSystem_Description) AsFileSystemV141FileSystemDescription1() (FileSystemV141FileSystemDescription1, error) {
	var body FileSystemV141FileSystemDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileSystemV141FileSystemDescription1 overwrites any union data inside the FileSystemV141FileSystem_Description as the provided FileSystemV141FileSystemDescription1
func (t *FileSystemV141FileSystem_Description) FromFileSystemV141FileSystemDescription1(v FileSystemV141FileSystemDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileSystemV141FileSystemDescription1 performs a merge with any union data inside the FileSystemV141FileSystem_Description, using the provided FileSystemV141FileSystemDescription1
func (t *FileSystemV141FileSystem_Description) MergeFileSystemV141FileSystemDescription1(v FileSystemV141FileSystemDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FileSystemV141FileSystem_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FileSystemV141FileSystem_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOdataV4IdRef returns the union data inside the FileSystemV141FileSystem_Metrics as a OdataV4IdRef
func (t FileSystemV141FileSystem_Metrics) AsOdataV4IdRef() (OdataV4IdRef, error) {
	var body OdataV4IdRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOdataV4IdRef overwrites any union data inside the FileSystemV141FileSystem_Metrics as the provided OdataV4IdRef
func (t *FileSystemV141FileSystem_Metrics) FromOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOdataV4IdRef performs a merge with any union data inside the FileSystemV141FileSystem_Metrics, using the provided OdataV4IdRef
func (t *FileSystemV141FileSystem_Metrics) MergeOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFileSystemV141FileSystemMetrics1 returns the union data inside the FileSystemV141FileSystem_Metrics as a FileSystemV141FileSystemMetrics1
func (t FileSystemV141FileSystem_Metrics) AsFileSystemV141FileSystemMetrics1() (FileSystemV141FileSystemMetrics1, error) {
	var body FileSystemV141FileSystemMetrics1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileSystemV141FileSystemMetrics1 overwrites any union data inside the FileSystemV141FileSystem_Metrics as the provided FileSystemV141FileSystemMetrics1
func (t *FileSystemV141FileSystem_Metrics) FromFileSystemV141FileSystemMetrics1(v FileSystemV141FileSystemMetrics1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileSystemV141FileSystemMetrics1 performs a merge with any union data inside the FileSystemV141FileSystem_Metrics, using the provided FileSystemV141FileSystemMetrics1
func (t *FileSystemV141FileSystem_Metrics) MergeFileSystemV141FileSystemMetrics1(v FileSystemV141FileSystemMetrics1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FileSystemV141FileSystem_Metrics) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FileSystemV141FileSystem_Metrics) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIPAddressesV115IPv4AddressOrigin returns the union data inside the IPAddressesV115IPv4Address_AddressOrigin as a IPAddressesV115IPv4AddressOrigin
func (t IPAddressesV115IPv4Address_AddressOrigin) AsIPAddressesV115IPv4AddressOrigin() (IPAddressesV115IPv4AddressOrigin, error) {
	var body IPAddressesV115IPv4AddressOrigin
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115IPv4AddressOrigin overwrites any union data inside the IPAddressesV115IPv4Address_AddressOrigin as the provided IPAddressesV115IPv4AddressOrigin
func (t *IPAddressesV115IPv4Address_AddressOrigin) FromIPAddressesV115IPv4AddressOrigin(v IPAddressesV115IPv4AddressOrigin) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115IPv4AddressOrigin performs a merge with any union data inside the IPAddressesV115IPv4Address_AddressOrigin, using the provided IPAddressesV115IPv4AddressOrigin
func (t *IPAddressesV115IPv4Address_AddressOrigin) MergeIPAddressesV115IPv4AddressOrigin(v IPAddressesV115IPv4AddressOrigin) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIPAddressesV115IPv4AddressAddressOrigin1 returns the union data inside the IPAddressesV115IPv4Address_AddressOrigin as a IPAddressesV115IPv4AddressAddressOrigin1
func (t IPAddressesV115IPv4Address_AddressOrigin) AsIPAddressesV115IPv4AddressAddressOrigin1() (IPAddressesV115IPv4AddressAddressOrigin1, error) {
	var body IPAddressesV115IPv4AddressAddressOrigin1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115IPv4AddressAddressOrigin1 overwrites any union data inside the IPAddressesV115IPv4Address_AddressOrigin as the provided IPAddressesV115IPv4AddressAddressOrigin1
func (t *IPAddressesV115IPv4Address_AddressOrigin) FromIPAddressesV115IPv4AddressAddressOrigin1(v IPAddressesV115IPv4AddressAddressOrigin1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115IPv4AddressAddressOrigin1 performs a merge with any union data inside the IPAddressesV115IPv4Address_AddressOrigin, using the provided IPAddressesV115IPv4AddressAddressOrigin1
func (t *IPAddressesV115IPv4Address_AddressOrigin) MergeIPAddressesV115IPv4AddressAddressOrigin1(v IPAddressesV115IPv4AddressAddressOrigin1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IPAddressesV115IPv4Address_AddressOrigin) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IPAddressesV115IPv4Address_AddressOrigin) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIPAddressesV115SubnetMask returns the union data inside the IPAddressesV115IPv4Address_SubnetMask as a IPAddressesV115SubnetMask
func (t IPAddressesV115IPv4Address_SubnetMask) AsIPAddressesV115SubnetMask() (IPAddressesV115SubnetMask, error) {
	var body IPAddressesV115SubnetMask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115SubnetMask overwrites any union data inside the IPAddressesV115IPv4Address_SubnetMask as the provided IPAddressesV115SubnetMask
func (t *IPAddressesV115IPv4Address_SubnetMask) FromIPAddressesV115SubnetMask(v IPAddressesV115SubnetMask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115SubnetMask performs a merge with any union data inside the IPAddressesV115IPv4Address_SubnetMask, using the provided IPAddressesV115SubnetMask
func (t *IPAddressesV115IPv4Address_SubnetMask) MergeIPAddressesV115SubnetMask(v IPAddressesV115SubnetMask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIPAddressesV115IPv4AddressSubnetMask1 returns the union data inside the IPAddressesV115IPv4Address_SubnetMask as a IPAddressesV115IPv4AddressSubnetMask1
func (t IPAddressesV115IPv4Address_SubnetMask) AsIPAddressesV115IPv4AddressSubnetMask1() (IPAddressesV115IPv4AddressSubnetMask1, error) {
	var body IPAddressesV115IPv4AddressSubnetMask1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115IPv4AddressSubnetMask1 overwrites any union data inside the IPAddressesV115IPv4Address_SubnetMask as the provided IPAddressesV115IPv4AddressSubnetMask1
func (t *IPAddressesV115IPv4Address_SubnetMask) FromIPAddressesV115IPv4AddressSubnetMask1(v IPAddressesV115IPv4AddressSubnetMask1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115IPv4AddressSubnetMask1 performs a merge with any union data inside the IPAddressesV115IPv4Address_SubnetMask, using the provided IPAddressesV115IPv4AddressSubnetMask1
func (t *IPAddressesV115IPv4Address_SubnetMask) MergeIPAddressesV115IPv4AddressSubnetMask1(v IPAddressesV115IPv4AddressSubnetMask1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IPAddressesV115IPv4Address_SubnetMask) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IPAddressesV115IPv4Address_SubnetMask) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIPAddressesV115IPv6AddressOrigin returns the union data inside the IPAddressesV115IPv6Address_AddressOrigin as a IPAddressesV115IPv6AddressOrigin
func (t IPAddressesV115IPv6Address_AddressOrigin) AsIPAddressesV115IPv6AddressOrigin() (IPAddressesV115IPv6AddressOrigin, error) {
	var body IPAddressesV115IPv6AddressOrigin
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115IPv6AddressOrigin overwrites any union data inside the IPAddressesV115IPv6Address_AddressOrigin as the provided IPAddressesV115IPv6AddressOrigin
func (t *IPAddressesV115IPv6Address_AddressOrigin) FromIPAddressesV115IPv6AddressOrigin(v IPAddressesV115IPv6AddressOrigin) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115IPv6AddressOrigin performs a merge with any union data inside the IPAddressesV115IPv6Address_AddressOrigin, using the provided IPAddressesV115IPv6AddressOrigin
func (t *IPAddressesV115IPv6Address_AddressOrigin) MergeIPAddressesV115IPv6AddressOrigin(v IPAddressesV115IPv6AddressOrigin) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIPAddressesV115IPv6AddressAddressOrigin1 returns the union data inside the IPAddressesV115IPv6Address_AddressOrigin as a IPAddressesV115IPv6AddressAddressOrigin1
func (t IPAddressesV115IPv6Address_AddressOrigin) AsIPAddressesV115IPv6AddressAddressOrigin1() (IPAddressesV115IPv6AddressAddressOrigin1, error) {
	var body IPAddressesV115IPv6AddressAddressOrigin1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115IPv6AddressAddressOrigin1 overwrites any union data inside the IPAddressesV115IPv6Address_AddressOrigin as the provided IPAddressesV115IPv6AddressAddressOrigin1
func (t *IPAddressesV115IPv6Address_AddressOrigin) FromIPAddressesV115IPv6AddressAddressOrigin1(v IPAddressesV115IPv6AddressAddressOrigin1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115IPv6AddressAddressOrigin1 performs a merge with any union data inside the IPAddressesV115IPv6Address_AddressOrigin, using the provided IPAddressesV115IPv6AddressAddressOrigin1
func (t *IPAddressesV115IPv6Address_AddressOrigin) MergeIPAddressesV115IPv6AddressAddressOrigin1(v IPAddressesV115IPv6AddressAddressOrigin1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IPAddressesV115IPv6Address_AddressOrigin) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IPAddressesV115IPv6Address_AddressOrigin) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIPAddressesV115AddressState returns the union data inside the IPAddressesV115IPv6Address_AddressState as a IPAddressesV115AddressState
func (t IPAddressesV115IPv6Address_AddressState) AsIPAddressesV115AddressState() (IPAddressesV115AddressState, error) {
	var body IPAddressesV115AddressState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115AddressState overwrites any union data inside the IPAddressesV115IPv6Address_AddressState as the provided IPAddressesV115AddressState
func (t *IPAddressesV115IPv6Address_AddressState) FromIPAddressesV115AddressState(v IPAddressesV115AddressState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115AddressState performs a merge with any union data inside the IPAddressesV115IPv6Address_AddressState, using the provided IPAddressesV115AddressState
func (t *IPAddressesV115IPv6Address_AddressState) MergeIPAddressesV115AddressState(v IPAddressesV115AddressState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIPAddressesV115IPv6AddressAddressState1 returns the union data inside the IPAddressesV115IPv6Address_AddressState as a IPAddressesV115IPv6AddressAddressState1
func (t IPAddressesV115IPv6Address_AddressState) AsIPAddressesV115IPv6AddressAddressState1() (IPAddressesV115IPv6AddressAddressState1, error) {
	var body IPAddressesV115IPv6AddressAddressState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115IPv6AddressAddressState1 overwrites any union data inside the IPAddressesV115IPv6Address_AddressState as the provided IPAddressesV115IPv6AddressAddressState1
func (t *IPAddressesV115IPv6Address_AddressState) FromIPAddressesV115IPv6AddressAddressState1(v IPAddressesV115IPv6AddressAddressState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115IPv6AddressAddressState1 performs a merge with any union data inside the IPAddressesV115IPv6Address_AddressState, using the provided IPAddressesV115IPv6AddressAddressState1
func (t *IPAddressesV115IPv6Address_AddressState) MergeIPAddressesV115IPv6AddressAddressState1(v IPAddressesV115IPv6AddressAddressState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IPAddressesV115IPv6Address_AddressState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IPAddressesV115IPv6Address_AddressState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIPAddressesV115PrefixLength returns the union data inside the IPAddressesV115IPv6Address_PrefixLength as a IPAddressesV115PrefixLength
func (t IPAddressesV115IPv6Address_PrefixLength) AsIPAddressesV115PrefixLength() (IPAddressesV115PrefixLength, error) {
	var body IPAddressesV115PrefixLength
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115PrefixLength overwrites any union data inside the IPAddressesV115IPv6Address_PrefixLength as the provided IPAddressesV115PrefixLength
func (t *IPAddressesV115IPv6Address_PrefixLength) FromIPAddressesV115PrefixLength(v IPAddressesV115PrefixLength) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115PrefixLength performs a merge with any union data inside the IPAddressesV115IPv6Address_PrefixLength, using the provided IPAddressesV115PrefixLength
func (t *IPAddressesV115IPv6Address_PrefixLength) MergeIPAddressesV115PrefixLength(v IPAddressesV115PrefixLength) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIPAddressesV115IPv6AddressPrefixLength1 returns the union data inside the IPAddressesV115IPv6Address_PrefixLength as a IPAddressesV115IPv6AddressPrefixLength1
func (t IPAddressesV115IPv6Address_PrefixLength) AsIPAddressesV115IPv6AddressPrefixLength1() (IPAddressesV115IPv6AddressPrefixLength1, error) {
	var body IPAddressesV115IPv6AddressPrefixLength1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115IPv6AddressPrefixLength1 overwrites any union data inside the IPAddressesV115IPv6Address_PrefixLength as the provided IPAddressesV115IPv6AddressPrefixLength1
func (t *IPAddressesV115IPv6Address_PrefixLength) FromIPAddressesV115IPv6AddressPrefixLength1(v IPAddressesV115IPv6AddressPrefixLength1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115IPv6AddressPrefixLength1 performs a merge with any union data inside the IPAddressesV115IPv6Address_PrefixLength, using the provided IPAddressesV115IPv6AddressPrefixLength1
func (t *IPAddressesV115IPv6Address_PrefixLength) MergeIPAddressesV115IPv6AddressPrefixLength1(v IPAddressesV115IPv6AddressPrefixLength1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IPAddressesV115IPv6Address_PrefixLength) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IPAddressesV115IPv6Address_PrefixLength) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIPAddressesV115PrefixLength returns the union data inside the IPAddressesV115IPv6GatewayStaticAddress_PrefixLength as a IPAddressesV115PrefixLength
func (t IPAddressesV115IPv6GatewayStaticAddress_PrefixLength) AsIPAddressesV115PrefixLength() (IPAddressesV115PrefixLength, error) {
	var body IPAddressesV115PrefixLength
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115PrefixLength overwrites any union data inside the IPAddressesV115IPv6GatewayStaticAddress_PrefixLength as the provided IPAddressesV115PrefixLength
func (t *IPAddressesV115IPv6GatewayStaticAddress_PrefixLength) FromIPAddressesV115PrefixLength(v IPAddressesV115PrefixLength) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115PrefixLength performs a merge with any union data inside the IPAddressesV115IPv6GatewayStaticAddress_PrefixLength, using the provided IPAddressesV115PrefixLength
func (t *IPAddressesV115IPv6GatewayStaticAddress_PrefixLength) MergeIPAddressesV115PrefixLength(v IPAddressesV115PrefixLength) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIPAddressesV115IPv6GatewayStaticAddressPrefixLength1 returns the union data inside the IPAddressesV115IPv6GatewayStaticAddress_PrefixLength as a IPAddressesV115IPv6GatewayStaticAddressPrefixLength1
func (t IPAddressesV115IPv6GatewayStaticAddress_PrefixLength) AsIPAddressesV115IPv6GatewayStaticAddressPrefixLength1() (IPAddressesV115IPv6GatewayStaticAddressPrefixLength1, error) {
	var body IPAddressesV115IPv6GatewayStaticAddressPrefixLength1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115IPv6GatewayStaticAddressPrefixLength1 overwrites any union data inside the IPAddressesV115IPv6GatewayStaticAddress_PrefixLength as the provided IPAddressesV115IPv6GatewayStaticAddressPrefixLength1
func (t *IPAddressesV115IPv6GatewayStaticAddress_PrefixLength) FromIPAddressesV115IPv6GatewayStaticAddressPrefixLength1(v IPAddressesV115IPv6GatewayStaticAddressPrefixLength1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115IPv6GatewayStaticAddressPrefixLength1 performs a merge with any union data inside the IPAddressesV115IPv6GatewayStaticAddress_PrefixLength, using the provided IPAddressesV115IPv6GatewayStaticAddressPrefixLength1
func (t *IPAddressesV115IPv6GatewayStaticAddress_PrefixLength) MergeIPAddressesV115IPv6GatewayStaticAddressPrefixLength1(v IPAddressesV115IPv6GatewayStaticAddressPrefixLength1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IPAddressesV115IPv6GatewayStaticAddress_PrefixLength) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IPAddressesV115IPv6GatewayStaticAddress_PrefixLength) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIPAddressesV115PrefixLength returns the union data inside the IPAddressesV115IPv6StaticAddress_PrefixLength as a IPAddressesV115PrefixLength
func (t IPAddressesV115IPv6StaticAddress_PrefixLength) AsIPAddressesV115PrefixLength() (IPAddressesV115PrefixLength, error) {
	var body IPAddressesV115PrefixLength
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115PrefixLength overwrites any union data inside the IPAddressesV115IPv6StaticAddress_PrefixLength as the provided IPAddressesV115PrefixLength
func (t *IPAddressesV115IPv6StaticAddress_PrefixLength) FromIPAddressesV115PrefixLength(v IPAddressesV115PrefixLength) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115PrefixLength performs a merge with any union data inside the IPAddressesV115IPv6StaticAddress_PrefixLength, using the provided IPAddressesV115PrefixLength
func (t *IPAddressesV115IPv6StaticAddress_PrefixLength) MergeIPAddressesV115PrefixLength(v IPAddressesV115PrefixLength) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIPAddressesV115IPv6StaticAddressPrefixLength1 returns the union data inside the IPAddressesV115IPv6StaticAddress_PrefixLength as a IPAddressesV115IPv6StaticAddressPrefixLength1
func (t IPAddressesV115IPv6StaticAddress_PrefixLength) AsIPAddressesV115IPv6StaticAddressPrefixLength1() (IPAddressesV115IPv6StaticAddressPrefixLength1, error) {
	var body IPAddressesV115IPv6StaticAddressPrefixLength1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIPAddressesV115IPv6StaticAddressPrefixLength1 overwrites any union data inside the IPAddressesV115IPv6StaticAddress_PrefixLength as the provided IPAddressesV115IPv6StaticAddressPrefixLength1
func (t *IPAddressesV115IPv6StaticAddress_PrefixLength) FromIPAddressesV115IPv6StaticAddressPrefixLength1(v IPAddressesV115IPv6StaticAddressPrefixLength1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIPAddressesV115IPv6StaticAddressPrefixLength1 performs a merge with any union data inside the IPAddressesV115IPv6StaticAddress_PrefixLength, using the provided IPAddressesV115IPv6StaticAddressPrefixLength1
func (t *IPAddressesV115IPv6StaticAddress_PrefixLength) MergeIPAddressesV115IPv6StaticAddressPrefixLength1(v IPAddressesV115IPv6StaticAddressPrefixLength1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IPAddressesV115IPv6StaticAddress_PrefixLength) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IPAddressesV115IPv6StaticAddress_PrefixLength) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPCIeDevicePCIeTypes returns the union data inside the PCIeDeviceV1160PCIeInterface_MaxPCIeType as a PCIeDevicePCIeTypes
func (t PCIeDeviceV1160PCIeInterface_MaxPCIeType) AsPCIeDevicePCIeTypes() (PCIeDevicePCIeTypes, error) {
	var body PCIeDevicePCIeTypes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPCIeDevicePCIeTypes overwrites any union data inside the PCIeDeviceV1160PCIeInterface_MaxPCIeType as the provided PCIeDevicePCIeTypes
func (t *PCIeDeviceV1160PCIeInterface_MaxPCIeType) FromPCIeDevicePCIeTypes(v PCIeDevicePCIeTypes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePCIeDevicePCIeTypes performs a merge with any union data inside the PCIeDeviceV1160PCIeInterface_MaxPCIeType, using the provided PCIeDevicePCIeTypes
func (t *PCIeDeviceV1160PCIeInterface_MaxPCIeType) MergePCIeDevicePCIeTypes(v PCIeDevicePCIeTypes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPCIeDeviceV1160PCIeInterfaceMaxPCIeType1 returns the union data inside the PCIeDeviceV1160PCIeInterface_MaxPCIeType as a PCIeDeviceV1160PCIeInterfaceMaxPCIeType1
func (t PCIeDeviceV1160PCIeInterface_MaxPCIeType) AsPCIeDeviceV1160PCIeInterfaceMaxPCIeType1() (PCIeDeviceV1160PCIeInterfaceMaxPCIeType1, error) {
	var body PCIeDeviceV1160PCIeInterfaceMaxPCIeType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPCIeDeviceV1160PCIeInterfaceMaxPCIeType1 overwrites any union data inside the PCIeDeviceV1160PCIeInterface_MaxPCIeType as the provided PCIeDeviceV1160PCIeInterfaceMaxPCIeType1
func (t *PCIeDeviceV1160PCIeInterface_MaxPCIeType) FromPCIeDeviceV1160PCIeInterfaceMaxPCIeType1(v PCIeDeviceV1160PCIeInterfaceMaxPCIeType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePCIeDeviceV1160PCIeInterfaceMaxPCIeType1 performs a merge with any union data inside the PCIeDeviceV1160PCIeInterface_MaxPCIeType, using the provided PCIeDeviceV1160PCIeInterfaceMaxPCIeType1
func (t *PCIeDeviceV1160PCIeInterface_MaxPCIeType) MergePCIeDeviceV1160PCIeInterfaceMaxPCIeType1(v PCIeDeviceV1160PCIeInterfaceMaxPCIeType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PCIeDeviceV1160PCIeInterface_MaxPCIeType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PCIeDeviceV1160PCIeInterface_MaxPCIeType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPCIeDevicePCIeTypes returns the union data inside the PCIeDeviceV1160PCIeInterface_PCIeType as a PCIeDevicePCIeTypes
func (t PCIeDeviceV1160PCIeInterface_PCIeType) AsPCIeDevicePCIeTypes() (PCIeDevicePCIeTypes, error) {
	var body PCIeDevicePCIeTypes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPCIeDevicePCIeTypes overwrites any union data inside the PCIeDeviceV1160PCIeInterface_PCIeType as the provided PCIeDevicePCIeTypes
func (t *PCIeDeviceV1160PCIeInterface_PCIeType) FromPCIeDevicePCIeTypes(v PCIeDevicePCIeTypes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePCIeDevicePCIeTypes performs a merge with any union data inside the PCIeDeviceV1160PCIeInterface_PCIeType, using the provided PCIeDevicePCIeTypes
func (t *PCIeDeviceV1160PCIeInterface_PCIeType) MergePCIeDevicePCIeTypes(v PCIeDevicePCIeTypes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPCIeDeviceV1160PCIeInterfacePCIeType1 returns the union data inside the PCIeDeviceV1160PCIeInterface_PCIeType as a PCIeDeviceV1160PCIeInterfacePCIeType1
func (t PCIeDeviceV1160PCIeInterface_PCIeType) AsPCIeDeviceV1160PCIeInterfacePCIeType1() (PCIeDeviceV1160PCIeInterfacePCIeType1, error) {
	var body PCIeDeviceV1160PCIeInterfacePCIeType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPCIeDeviceV1160PCIeInterfacePCIeType1 overwrites any union data inside the PCIeDeviceV1160PCIeInterface_PCIeType as the provided PCIeDeviceV1160PCIeInterfacePCIeType1
func (t *PCIeDeviceV1160PCIeInterface_PCIeType) FromPCIeDeviceV1160PCIeInterfacePCIeType1(v PCIeDeviceV1160PCIeInterfacePCIeType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePCIeDeviceV1160PCIeInterfacePCIeType1 performs a merge with any union data inside the PCIeDeviceV1160PCIeInterface_PCIeType, using the provided PCIeDeviceV1160PCIeInterfacePCIeType1
func (t *PCIeDeviceV1160PCIeInterface_PCIeType) MergePCIeDeviceV1160PCIeInterfacePCIeType1(v PCIeDeviceV1160PCIeInterfacePCIeType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PCIeDeviceV1160PCIeInterface_PCIeType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PCIeDeviceV1160PCIeInterface_PCIeType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRedundancyV142RedundancyMode returns the union data inside the RedundancyV142Redundancy_Mode as a RedundancyV142RedundancyMode
func (t RedundancyV142Redundancy_Mode) AsRedundancyV142RedundancyMode() (RedundancyV142RedundancyMode, error) {
	var body RedundancyV142RedundancyMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRedundancyV142RedundancyMode overwrites any union data inside the RedundancyV142Redundancy_Mode as the provided RedundancyV142RedundancyMode
func (t *RedundancyV142Redundancy_Mode) FromRedundancyV142RedundancyMode(v RedundancyV142RedundancyMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRedundancyV142RedundancyMode performs a merge with any union data inside the RedundancyV142Redundancy_Mode, using the provided RedundancyV142RedundancyMode
func (t *RedundancyV142Redundancy_Mode) MergeRedundancyV142RedundancyMode(v RedundancyV142RedundancyMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRedundancyV142RedundancyMode1 returns the union data inside the RedundancyV142Redundancy_Mode as a RedundancyV142RedundancyMode1
func (t RedundancyV142Redundancy_Mode) AsRedundancyV142RedundancyMode1() (RedundancyV142RedundancyMode1, error) {
	var body RedundancyV142RedundancyMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRedundancyV142RedundancyMode1 overwrites any union data inside the RedundancyV142Redundancy_Mode as the provided RedundancyV142RedundancyMode1
func (t *RedundancyV142Redundancy_Mode) FromRedundancyV142RedundancyMode1(v RedundancyV142RedundancyMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRedundancyV142RedundancyMode1 performs a merge with any union data inside the RedundancyV142Redundancy_Mode, using the provided RedundancyV142RedundancyMode1
func (t *RedundancyV142Redundancy_Mode) MergeRedundancyV142RedundancyMode1(v RedundancyV142RedundancyMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RedundancyV142Redundancy_Mode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RedundancyV142Redundancy_Mode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActionInfoV142Parameters returns the union data inside the ResolutionStepV101ResolutionStep_ActionParameters_Item as a ActionInfoV142Parameters
func (t ResolutionStepV101ResolutionStep_ActionParameters_Item) AsActionInfoV142Parameters() (ActionInfoV142Parameters, error) {
	var body ActionInfoV142Parameters
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionInfoV142Parameters overwrites any union data inside the ResolutionStepV101ResolutionStep_ActionParameters_Item as the provided ActionInfoV142Parameters
func (t *ResolutionStepV101ResolutionStep_ActionParameters_Item) FromActionInfoV142Parameters(v ActionInfoV142Parameters) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionInfoV142Parameters performs a merge with any union data inside the ResolutionStepV101ResolutionStep_ActionParameters_Item, using the provided ActionInfoV142Parameters
func (t *ResolutionStepV101ResolutionStep_ActionParameters_Item) MergeActionInfoV142Parameters(v ActionInfoV142Parameters) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResolutionStepV101ResolutionStepActionParameters1 returns the union data inside the ResolutionStepV101ResolutionStep_ActionParameters_Item as a ResolutionStepV101ResolutionStepActionParameters1
func (t ResolutionStepV101ResolutionStep_ActionParameters_Item) AsResolutionStepV101ResolutionStepActionParameters1() (ResolutionStepV101ResolutionStepActionParameters1, error) {
	var body ResolutionStepV101ResolutionStepActionParameters1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResolutionStepV101ResolutionStepActionParameters1 overwrites any union data inside the ResolutionStepV101ResolutionStep_ActionParameters_Item as the provided ResolutionStepV101ResolutionStepActionParameters1
func (t *ResolutionStepV101ResolutionStep_ActionParameters_Item) FromResolutionStepV101ResolutionStepActionParameters1(v ResolutionStepV101ResolutionStepActionParameters1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResolutionStepV101ResolutionStepActionParameters1 performs a merge with any union data inside the ResolutionStepV101ResolutionStep_ActionParameters_Item, using the provided ResolutionStepV101ResolutionStepActionParameters1
func (t *ResolutionStepV101ResolutionStep_ActionParameters_Item) MergeResolutionStepV101ResolutionStepActionParameters1(v ResolutionStepV101ResolutionStepActionParameters1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResolutionStepV101ResolutionStep_ActionParameters_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResolutionStepV101ResolutionStep_ActionParameters_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResolutionStepV101ResolutionType returns the union data inside the ResolutionStepV101ResolutionStep_ResolutionType as a ResolutionStepV101ResolutionType
func (t ResolutionStepV101ResolutionStep_ResolutionType) AsResolutionStepV101ResolutionType() (ResolutionStepV101ResolutionType, error) {
	var body ResolutionStepV101ResolutionType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResolutionStepV101ResolutionType overwrites any union data inside the ResolutionStepV101ResolutionStep_ResolutionType as the provided ResolutionStepV101ResolutionType
func (t *ResolutionStepV101ResolutionStep_ResolutionType) FromResolutionStepV101ResolutionType(v ResolutionStepV101ResolutionType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResolutionStepV101ResolutionType performs a merge with any union data inside the ResolutionStepV101ResolutionStep_ResolutionType, using the provided ResolutionStepV101ResolutionType
func (t *ResolutionStepV101ResolutionStep_ResolutionType) MergeResolutionStepV101ResolutionType(v ResolutionStepV101ResolutionType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResolutionStepV101ResolutionStepResolutionType1 returns the union data inside the ResolutionStepV101ResolutionStep_ResolutionType as a ResolutionStepV101ResolutionStepResolutionType1
func (t ResolutionStepV101ResolutionStep_ResolutionType) AsResolutionStepV101ResolutionStepResolutionType1() (ResolutionStepV101ResolutionStepResolutionType1, error) {
	var body ResolutionStepV101ResolutionStepResolutionType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResolutionStepV101ResolutionStepResolutionType1 overwrites any union data inside the ResolutionStepV101ResolutionStep_ResolutionType as the provided ResolutionStepV101ResolutionStepResolutionType1
func (t *ResolutionStepV101ResolutionStep_ResolutionType) FromResolutionStepV101ResolutionStepResolutionType1(v ResolutionStepV101ResolutionStepResolutionType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResolutionStepV101ResolutionStepResolutionType1 performs a merge with any union data inside the ResolutionStepV101ResolutionStep_ResolutionType, using the provided ResolutionStepV101ResolutionStepResolutionType1
func (t *ResolutionStepV101ResolutionStep_ResolutionType) MergeResolutionStepV101ResolutionStepResolutionType1(v ResolutionStepV101ResolutionStepResolutionType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResolutionStepV101ResolutionStep_ResolutionType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResolutionStepV101ResolutionStep_ResolutionType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceCondition returns the union data inside the ResourceStatus_Conditions_Item as a ResourceCondition
func (t ResourceStatus_Conditions_Item) AsResourceCondition() (ResourceCondition, error) {
	var body ResourceCondition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceCondition overwrites any union data inside the ResourceStatus_Conditions_Item as the provided ResourceCondition
func (t *ResourceStatus_Conditions_Item) FromResourceCondition(v ResourceCondition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceCondition performs a merge with any union data inside the ResourceStatus_Conditions_Item, using the provided ResourceCondition
func (t *ResourceStatus_Conditions_Item) MergeResourceCondition(v ResourceCondition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceStatusConditions1 returns the union data inside the ResourceStatus_Conditions_Item as a ResourceStatusConditions1
func (t ResourceStatus_Conditions_Item) AsResourceStatusConditions1() (ResourceStatusConditions1, error) {
	var body ResourceStatusConditions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceStatusConditions1 overwrites any union data inside the ResourceStatus_Conditions_Item as the provided ResourceStatusConditions1
func (t *ResourceStatus_Conditions_Item) FromResourceStatusConditions1(v ResourceStatusConditions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceStatusConditions1 performs a merge with any union data inside the ResourceStatus_Conditions_Item, using the provided ResourceStatusConditions1
func (t *ResourceStatus_Conditions_Item) MergeResourceStatusConditions1(v ResourceStatusConditions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceStatus_Conditions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceStatus_Conditions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceHealth returns the union data inside the ResourceStatus_Health as a ResourceHealth
func (t ResourceStatus_Health) AsResourceHealth() (ResourceHealth, error) {
	var body ResourceHealth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceHealth overwrites any union data inside the ResourceStatus_Health as the provided ResourceHealth
func (t *ResourceStatus_Health) FromResourceHealth(v ResourceHealth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceHealth performs a merge with any union data inside the ResourceStatus_Health, using the provided ResourceHealth
func (t *ResourceStatus_Health) MergeResourceHealth(v ResourceHealth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceStatusHealth1 returns the union data inside the ResourceStatus_Health as a ResourceStatusHealth1
func (t ResourceStatus_Health) AsResourceStatusHealth1() (ResourceStatusHealth1, error) {
	var body ResourceStatusHealth1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceStatusHealth1 overwrites any union data inside the ResourceStatus_Health as the provided ResourceStatusHealth1
func (t *ResourceStatus_Health) FromResourceStatusHealth1(v ResourceStatusHealth1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceStatusHealth1 performs a merge with any union data inside the ResourceStatus_Health, using the provided ResourceStatusHealth1
func (t *ResourceStatus_Health) MergeResourceStatusHealth1(v ResourceStatusHealth1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceStatus_Health) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceStatus_Health) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceHealth returns the union data inside the ResourceStatus_HealthRollup as a ResourceHealth
func (t ResourceStatus_HealthRollup) AsResourceHealth() (ResourceHealth, error) {
	var body ResourceHealth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceHealth overwrites any union data inside the ResourceStatus_HealthRollup as the provided ResourceHealth
func (t *ResourceStatus_HealthRollup) FromResourceHealth(v ResourceHealth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceHealth performs a merge with any union data inside the ResourceStatus_HealthRollup, using the provided ResourceHealth
func (t *ResourceStatus_HealthRollup) MergeResourceHealth(v ResourceHealth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceStatusHealthRollup1 returns the union data inside the ResourceStatus_HealthRollup as a ResourceStatusHealthRollup1
func (t ResourceStatus_HealthRollup) AsResourceStatusHealthRollup1() (ResourceStatusHealthRollup1, error) {
	var body ResourceStatusHealthRollup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceStatusHealthRollup1 overwrites any union data inside the ResourceStatus_HealthRollup as the provided ResourceStatusHealthRollup1
func (t *ResourceStatus_HealthRollup) FromResourceStatusHealthRollup1(v ResourceStatusHealthRollup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceStatusHealthRollup1 performs a merge with any union data inside the ResourceStatus_HealthRollup, using the provided ResourceStatusHealthRollup1
func (t *ResourceStatus_HealthRollup) MergeResourceStatusHealthRollup1(v ResourceStatusHealthRollup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceStatus_HealthRollup) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceStatus_HealthRollup) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceState returns the union data inside the ResourceStatus_State as a ResourceState
func (t ResourceStatus_State) AsResourceState() (ResourceState, error) {
	var body ResourceState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceState overwrites any union data inside the ResourceStatus_State as the provided ResourceState
func (t *ResourceStatus_State) FromResourceState(v ResourceState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceState performs a merge with any union data inside the ResourceStatus_State, using the provided ResourceState
func (t *ResourceStatus_State) MergeResourceState(v ResourceState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceStatusState1 returns the union data inside the ResourceStatus_State as a ResourceStatusState1
func (t ResourceStatus_State) AsResourceStatusState1() (ResourceStatusState1, error) {
	var body ResourceStatusState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceStatusState1 overwrites any union data inside the ResourceStatus_State as the provided ResourceStatusState1
func (t *ResourceStatus_State) FromResourceStatusState1(v ResourceStatusState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceStatusState1 performs a merge with any union data inside the ResourceStatus_State, using the provided ResourceStatusState1
func (t *ResourceStatus_State) MergeResourceStatusState1(v ResourceStatusState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceStatus_State) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceStatus_State) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceV1200DurableNameFormat returns the union data inside the ResourceV1200Identifier_DurableNameFormat as a ResourceV1200DurableNameFormat
func (t ResourceV1200Identifier_DurableNameFormat) AsResourceV1200DurableNameFormat() (ResourceV1200DurableNameFormat, error) {
	var body ResourceV1200DurableNameFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200DurableNameFormat overwrites any union data inside the ResourceV1200Identifier_DurableNameFormat as the provided ResourceV1200DurableNameFormat
func (t *ResourceV1200Identifier_DurableNameFormat) FromResourceV1200DurableNameFormat(v ResourceV1200DurableNameFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200DurableNameFormat performs a merge with any union data inside the ResourceV1200Identifier_DurableNameFormat, using the provided ResourceV1200DurableNameFormat
func (t *ResourceV1200Identifier_DurableNameFormat) MergeResourceV1200DurableNameFormat(v ResourceV1200DurableNameFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceV1200IdentifierDurableNameFormat1 returns the union data inside the ResourceV1200Identifier_DurableNameFormat as a ResourceV1200IdentifierDurableNameFormat1
func (t ResourceV1200Identifier_DurableNameFormat) AsResourceV1200IdentifierDurableNameFormat1() (ResourceV1200IdentifierDurableNameFormat1, error) {
	var body ResourceV1200IdentifierDurableNameFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200IdentifierDurableNameFormat1 overwrites any union data inside the ResourceV1200Identifier_DurableNameFormat as the provided ResourceV1200IdentifierDurableNameFormat1
func (t *ResourceV1200Identifier_DurableNameFormat) FromResourceV1200IdentifierDurableNameFormat1(v ResourceV1200IdentifierDurableNameFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200IdentifierDurableNameFormat1 performs a merge with any union data inside the ResourceV1200Identifier_DurableNameFormat, using the provided ResourceV1200IdentifierDurableNameFormat1
func (t *ResourceV1200Identifier_DurableNameFormat) MergeResourceV1200IdentifierDurableNameFormat1(v ResourceV1200IdentifierDurableNameFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceV1200Identifier_DurableNameFormat) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceV1200Identifier_DurableNameFormat) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceV1200ContactInfo returns the union data inside the ResourceV1200Location_Contacts_Item as a ResourceV1200ContactInfo
func (t ResourceV1200Location_Contacts_Item) AsResourceV1200ContactInfo() (ResourceV1200ContactInfo, error) {
	var body ResourceV1200ContactInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200ContactInfo overwrites any union data inside the ResourceV1200Location_Contacts_Item as the provided ResourceV1200ContactInfo
func (t *ResourceV1200Location_Contacts_Item) FromResourceV1200ContactInfo(v ResourceV1200ContactInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200ContactInfo performs a merge with any union data inside the ResourceV1200Location_Contacts_Item, using the provided ResourceV1200ContactInfo
func (t *ResourceV1200Location_Contacts_Item) MergeResourceV1200ContactInfo(v ResourceV1200ContactInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceV1200LocationContacts1 returns the union data inside the ResourceV1200Location_Contacts_Item as a ResourceV1200LocationContacts1
func (t ResourceV1200Location_Contacts_Item) AsResourceV1200LocationContacts1() (ResourceV1200LocationContacts1, error) {
	var body ResourceV1200LocationContacts1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200LocationContacts1 overwrites any union data inside the ResourceV1200Location_Contacts_Item as the provided ResourceV1200LocationContacts1
func (t *ResourceV1200Location_Contacts_Item) FromResourceV1200LocationContacts1(v ResourceV1200LocationContacts1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200LocationContacts1 performs a merge with any union data inside the ResourceV1200Location_Contacts_Item, using the provided ResourceV1200LocationContacts1
func (t *ResourceV1200Location_Contacts_Item) MergeResourceV1200LocationContacts1(v ResourceV1200LocationContacts1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceV1200Location_Contacts_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceV1200Location_Contacts_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceV1200LocationType returns the union data inside the ResourceV1200PartLocation_LocationType as a ResourceV1200LocationType
func (t ResourceV1200PartLocation_LocationType) AsResourceV1200LocationType() (ResourceV1200LocationType, error) {
	var body ResourceV1200LocationType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200LocationType overwrites any union data inside the ResourceV1200PartLocation_LocationType as the provided ResourceV1200LocationType
func (t *ResourceV1200PartLocation_LocationType) FromResourceV1200LocationType(v ResourceV1200LocationType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200LocationType performs a merge with any union data inside the ResourceV1200PartLocation_LocationType, using the provided ResourceV1200LocationType
func (t *ResourceV1200PartLocation_LocationType) MergeResourceV1200LocationType(v ResourceV1200LocationType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceV1200PartLocationLocationType1 returns the union data inside the ResourceV1200PartLocation_LocationType as a ResourceV1200PartLocationLocationType1
func (t ResourceV1200PartLocation_LocationType) AsResourceV1200PartLocationLocationType1() (ResourceV1200PartLocationLocationType1, error) {
	var body ResourceV1200PartLocationLocationType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200PartLocationLocationType1 overwrites any union data inside the ResourceV1200PartLocation_LocationType as the provided ResourceV1200PartLocationLocationType1
func (t *ResourceV1200PartLocation_LocationType) FromResourceV1200PartLocationLocationType1(v ResourceV1200PartLocationLocationType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200PartLocationLocationType1 performs a merge with any union data inside the ResourceV1200PartLocation_LocationType, using the provided ResourceV1200PartLocationLocationType1
func (t *ResourceV1200PartLocation_LocationType) MergeResourceV1200PartLocationLocationType1(v ResourceV1200PartLocationLocationType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceV1200PartLocation_LocationType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceV1200PartLocation_LocationType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceV1200Orientation returns the union data inside the ResourceV1200PartLocation_Orientation as a ResourceV1200Orientation
func (t ResourceV1200PartLocation_Orientation) AsResourceV1200Orientation() (ResourceV1200Orientation, error) {
	var body ResourceV1200Orientation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200Orientation overwrites any union data inside the ResourceV1200PartLocation_Orientation as the provided ResourceV1200Orientation
func (t *ResourceV1200PartLocation_Orientation) FromResourceV1200Orientation(v ResourceV1200Orientation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200Orientation performs a merge with any union data inside the ResourceV1200PartLocation_Orientation, using the provided ResourceV1200Orientation
func (t *ResourceV1200PartLocation_Orientation) MergeResourceV1200Orientation(v ResourceV1200Orientation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceV1200PartLocationOrientation1 returns the union data inside the ResourceV1200PartLocation_Orientation as a ResourceV1200PartLocationOrientation1
func (t ResourceV1200PartLocation_Orientation) AsResourceV1200PartLocationOrientation1() (ResourceV1200PartLocationOrientation1, error) {
	var body ResourceV1200PartLocationOrientation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200PartLocationOrientation1 overwrites any union data inside the ResourceV1200PartLocation_Orientation as the provided ResourceV1200PartLocationOrientation1
func (t *ResourceV1200PartLocation_Orientation) FromResourceV1200PartLocationOrientation1(v ResourceV1200PartLocationOrientation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200PartLocationOrientation1 performs a merge with any union data inside the ResourceV1200PartLocation_Orientation, using the provided ResourceV1200PartLocationOrientation1
func (t *ResourceV1200PartLocation_Orientation) MergeResourceV1200PartLocationOrientation1(v ResourceV1200PartLocationOrientation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceV1200PartLocation_Orientation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceV1200PartLocation_Orientation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceV1200Reference returns the union data inside the ResourceV1200PartLocation_Reference as a ResourceV1200Reference
func (t ResourceV1200PartLocation_Reference) AsResourceV1200Reference() (ResourceV1200Reference, error) {
	var body ResourceV1200Reference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200Reference overwrites any union data inside the ResourceV1200PartLocation_Reference as the provided ResourceV1200Reference
func (t *ResourceV1200PartLocation_Reference) FromResourceV1200Reference(v ResourceV1200Reference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200Reference performs a merge with any union data inside the ResourceV1200PartLocation_Reference, using the provided ResourceV1200Reference
func (t *ResourceV1200PartLocation_Reference) MergeResourceV1200Reference(v ResourceV1200Reference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceV1200PartLocationReference1 returns the union data inside the ResourceV1200PartLocation_Reference as a ResourceV1200PartLocationReference1
func (t ResourceV1200PartLocation_Reference) AsResourceV1200PartLocationReference1() (ResourceV1200PartLocationReference1, error) {
	var body ResourceV1200PartLocationReference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200PartLocationReference1 overwrites any union data inside the ResourceV1200PartLocation_Reference as the provided ResourceV1200PartLocationReference1
func (t *ResourceV1200PartLocation_Reference) FromResourceV1200PartLocationReference1(v ResourceV1200PartLocationReference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200PartLocationReference1 performs a merge with any union data inside the ResourceV1200PartLocation_Reference, using the provided ResourceV1200PartLocationReference1
func (t *ResourceV1200PartLocation_Reference) MergeResourceV1200PartLocationReference1(v ResourceV1200PartLocationReference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceV1200PartLocation_Reference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceV1200PartLocation_Reference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceV1200RackUnits returns the union data inside the ResourceV1200Placement_RackOffsetUnits as a ResourceV1200RackUnits
func (t ResourceV1200Placement_RackOffsetUnits) AsResourceV1200RackUnits() (ResourceV1200RackUnits, error) {
	var body ResourceV1200RackUnits
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200RackUnits overwrites any union data inside the ResourceV1200Placement_RackOffsetUnits as the provided ResourceV1200RackUnits
func (t *ResourceV1200Placement_RackOffsetUnits) FromResourceV1200RackUnits(v ResourceV1200RackUnits) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200RackUnits performs a merge with any union data inside the ResourceV1200Placement_RackOffsetUnits, using the provided ResourceV1200RackUnits
func (t *ResourceV1200Placement_RackOffsetUnits) MergeResourceV1200RackUnits(v ResourceV1200RackUnits) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceV1200PlacementRackOffsetUnits1 returns the union data inside the ResourceV1200Placement_RackOffsetUnits as a ResourceV1200PlacementRackOffsetUnits1
func (t ResourceV1200Placement_RackOffsetUnits) AsResourceV1200PlacementRackOffsetUnits1() (ResourceV1200PlacementRackOffsetUnits1, error) {
	var body ResourceV1200PlacementRackOffsetUnits1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200PlacementRackOffsetUnits1 overwrites any union data inside the ResourceV1200Placement_RackOffsetUnits as the provided ResourceV1200PlacementRackOffsetUnits1
func (t *ResourceV1200Placement_RackOffsetUnits) FromResourceV1200PlacementRackOffsetUnits1(v ResourceV1200PlacementRackOffsetUnits1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200PlacementRackOffsetUnits1 performs a merge with any union data inside the ResourceV1200Placement_RackOffsetUnits, using the provided ResourceV1200PlacementRackOffsetUnits1
func (t *ResourceV1200Placement_RackOffsetUnits) MergeResourceV1200PlacementRackOffsetUnits1(v ResourceV1200PlacementRackOffsetUnits1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceV1200Placement_RackOffsetUnits) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceV1200Placement_RackOffsetUnits) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStoragePoolV190EndGrpLifetime returns the union data inside the StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime as a StoragePoolV190EndGrpLifetime
func (t StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) AsStoragePoolV190EndGrpLifetime() (StoragePoolV190EndGrpLifetime, error) {
	var body StoragePoolV190EndGrpLifetime
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190EndGrpLifetime overwrites any union data inside the StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime as the provided StoragePoolV190EndGrpLifetime
func (t *StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) FromStoragePoolV190EndGrpLifetime(v StoragePoolV190EndGrpLifetime) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190EndGrpLifetime performs a merge with any union data inside the StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime, using the provided StoragePoolV190EndGrpLifetime
func (t *StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) MergeStoragePoolV190EndGrpLifetime(v StoragePoolV190EndGrpLifetime) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1 returns the union data inside the StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime as a StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1
func (t StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) AsStoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1() (StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1, error) {
	var body StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1 overwrites any union data inside the StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime as the provided StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1
func (t *StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) FromStoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1(v StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1 performs a merge with any union data inside the StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime, using the provided StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1
func (t *StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) MergeStoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1(v StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStoragePoolNVMePoolType returns the union data inside the StoragePoolV190NVMeProperties_NVMePoolType as a StoragePoolNVMePoolType
func (t StoragePoolV190NVMeProperties_NVMePoolType) AsStoragePoolNVMePoolType() (StoragePoolNVMePoolType, error) {
	var body StoragePoolNVMePoolType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolNVMePoolType overwrites any union data inside the StoragePoolV190NVMeProperties_NVMePoolType as the provided StoragePoolNVMePoolType
func (t *StoragePoolV190NVMeProperties_NVMePoolType) FromStoragePoolNVMePoolType(v StoragePoolNVMePoolType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolNVMePoolType performs a merge with any union data inside the StoragePoolV190NVMeProperties_NVMePoolType, using the provided StoragePoolNVMePoolType
func (t *StoragePoolV190NVMeProperties_NVMePoolType) MergeStoragePoolNVMePoolType(v StoragePoolNVMePoolType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190NVMePropertiesNVMePoolType1 returns the union data inside the StoragePoolV190NVMeProperties_NVMePoolType as a StoragePoolV190NVMePropertiesNVMePoolType1
func (t StoragePoolV190NVMeProperties_NVMePoolType) AsStoragePoolV190NVMePropertiesNVMePoolType1() (StoragePoolV190NVMePropertiesNVMePoolType1, error) {
	var body StoragePoolV190NVMePropertiesNVMePoolType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190NVMePropertiesNVMePoolType1 overwrites any union data inside the StoragePoolV190NVMeProperties_NVMePoolType as the provided StoragePoolV190NVMePropertiesNVMePoolType1
func (t *StoragePoolV190NVMeProperties_NVMePoolType) FromStoragePoolV190NVMePropertiesNVMePoolType1(v StoragePoolV190NVMePropertiesNVMePoolType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190NVMePropertiesNVMePoolType1 performs a merge with any union data inside the StoragePoolV190NVMeProperties_NVMePoolType, using the provided StoragePoolV190NVMePropertiesNVMePoolType1
func (t *StoragePoolV190NVMeProperties_NVMePoolType) MergeStoragePoolV190NVMePropertiesNVMePoolType1(v StoragePoolV190NVMePropertiesNVMePoolType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190NVMeProperties_NVMePoolType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190NVMeProperties_NVMePoolType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the StoragePoolV190StoragePool_Description as a ResourceDescription
func (t StoragePoolV190StoragePool_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the StoragePoolV190StoragePool_Description as the provided ResourceDescription
func (t *StoragePoolV190StoragePool_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the StoragePoolV190StoragePool_Description, using the provided ResourceDescription
func (t *StoragePoolV190StoragePool_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolDescription1 returns the union data inside the StoragePoolV190StoragePool_Description as a StoragePoolV190StoragePoolDescription1
func (t StoragePoolV190StoragePool_Description) AsStoragePoolV190StoragePoolDescription1() (StoragePoolV190StoragePoolDescription1, error) {
	var body StoragePoolV190StoragePoolDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolDescription1 overwrites any union data inside the StoragePoolV190StoragePool_Description as the provided StoragePoolV190StoragePoolDescription1
func (t *StoragePoolV190StoragePool_Description) FromStoragePoolV190StoragePoolDescription1(v StoragePoolV190StoragePoolDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolDescription1 performs a merge with any union data inside the StoragePoolV190StoragePool_Description, using the provided StoragePoolV190StoragePoolDescription1
func (t *StoragePoolV190StoragePool_Description) MergeStoragePoolV190StoragePoolDescription1(v StoragePoolV190StoragePoolDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOdataV4IdRef returns the union data inside the StoragePoolV190StoragePool_Metrics as a OdataV4IdRef
func (t StoragePoolV190StoragePool_Metrics) AsOdataV4IdRef() (OdataV4IdRef, error) {
	var body OdataV4IdRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOdataV4IdRef overwrites any union data inside the StoragePoolV190StoragePool_Metrics as the provided OdataV4IdRef
func (t *StoragePoolV190StoragePool_Metrics) FromOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOdataV4IdRef performs a merge with any union data inside the StoragePoolV190StoragePool_Metrics, using the provided OdataV4IdRef
func (t *StoragePoolV190StoragePool_Metrics) MergeOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolMetrics1 returns the union data inside the StoragePoolV190StoragePool_Metrics as a StoragePoolV190StoragePoolMetrics1
func (t StoragePoolV190StoragePool_Metrics) AsStoragePoolV190StoragePoolMetrics1() (StoragePoolV190StoragePoolMetrics1, error) {
	var body StoragePoolV190StoragePoolMetrics1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolMetrics1 overwrites any union data inside the StoragePoolV190StoragePool_Metrics as the provided StoragePoolV190StoragePoolMetrics1
func (t *StoragePoolV190StoragePool_Metrics) FromStoragePoolV190StoragePoolMetrics1(v StoragePoolV190StoragePoolMetrics1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolMetrics1 performs a merge with any union data inside the StoragePoolV190StoragePool_Metrics, using the provided StoragePoolV190StoragePoolMetrics1
func (t *StoragePoolV190StoragePool_Metrics) MergeStoragePoolV190StoragePoolMetrics1(v StoragePoolV190StoragePoolMetrics1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_Metrics) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_Metrics) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStoragePoolV190NVMeEnduranceGroupProperties returns the union data inside the StoragePoolV190StoragePool_NVMeEnduranceGroupProperties as a StoragePoolV190NVMeEnduranceGroupProperties
func (t StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) AsStoragePoolV190NVMeEnduranceGroupProperties() (StoragePoolV190NVMeEnduranceGroupProperties, error) {
	var body StoragePoolV190NVMeEnduranceGroupProperties
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190NVMeEnduranceGroupProperties overwrites any union data inside the StoragePoolV190StoragePool_NVMeEnduranceGroupProperties as the provided StoragePoolV190NVMeEnduranceGroupProperties
func (t *StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) FromStoragePoolV190NVMeEnduranceGroupProperties(v StoragePoolV190NVMeEnduranceGroupProperties) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190NVMeEnduranceGroupProperties performs a merge with any union data inside the StoragePoolV190StoragePool_NVMeEnduranceGroupProperties, using the provided StoragePoolV190NVMeEnduranceGroupProperties
func (t *StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) MergeStoragePoolV190NVMeEnduranceGroupProperties(v StoragePoolV190NVMeEnduranceGroupProperties) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolNVMeEnduranceGroupProperties1 returns the union data inside the StoragePoolV190StoragePool_NVMeEnduranceGroupProperties as a StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1
func (t StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) AsStoragePoolV190StoragePoolNVMeEnduranceGroupProperties1() (StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1, error) {
	var body StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolNVMeEnduranceGroupProperties1 overwrites any union data inside the StoragePoolV190StoragePool_NVMeEnduranceGroupProperties as the provided StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1
func (t *StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) FromStoragePoolV190StoragePoolNVMeEnduranceGroupProperties1(v StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolNVMeEnduranceGroupProperties1 performs a merge with any union data inside the StoragePoolV190StoragePool_NVMeEnduranceGroupProperties, using the provided StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1
func (t *StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) MergeStoragePoolV190StoragePoolNVMeEnduranceGroupProperties1(v StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStoragePoolV190NVMeProperties returns the union data inside the StoragePoolV190StoragePool_NVMeProperties as a StoragePoolV190NVMeProperties
func (t StoragePoolV190StoragePool_NVMeProperties) AsStoragePoolV190NVMeProperties() (StoragePoolV190NVMeProperties, error) {
	var body StoragePoolV190NVMeProperties
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190NVMeProperties overwrites any union data inside the StoragePoolV190StoragePool_NVMeProperties as the provided StoragePoolV190NVMeProperties
func (t *StoragePoolV190StoragePool_NVMeProperties) FromStoragePoolV190NVMeProperties(v StoragePoolV190NVMeProperties) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190NVMeProperties performs a merge with any union data inside the StoragePoolV190StoragePool_NVMeProperties, using the provided StoragePoolV190NVMeProperties
func (t *StoragePoolV190StoragePool_NVMeProperties) MergeStoragePoolV190NVMeProperties(v StoragePoolV190NVMeProperties) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolNVMeProperties1 returns the union data inside the StoragePoolV190StoragePool_NVMeProperties as a StoragePoolV190StoragePoolNVMeProperties1
func (t StoragePoolV190StoragePool_NVMeProperties) AsStoragePoolV190StoragePoolNVMeProperties1() (StoragePoolV190StoragePoolNVMeProperties1, error) {
	var body StoragePoolV190StoragePoolNVMeProperties1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolNVMeProperties1 overwrites any union data inside the StoragePoolV190StoragePool_NVMeProperties as the provided StoragePoolV190StoragePoolNVMeProperties1
func (t *StoragePoolV190StoragePool_NVMeProperties) FromStoragePoolV190StoragePoolNVMeProperties1(v StoragePoolV190StoragePoolNVMeProperties1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolNVMeProperties1 performs a merge with any union data inside the StoragePoolV190StoragePool_NVMeProperties, using the provided StoragePoolV190StoragePoolNVMeProperties1
func (t *StoragePoolV190StoragePool_NVMeProperties) MergeStoragePoolV190StoragePoolNVMeProperties1(v StoragePoolV190StoragePoolNVMeProperties1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_NVMeProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_NVMeProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStoragePoolV190NVMeSetProperties returns the union data inside the StoragePoolV190StoragePool_NVMeSetProperties as a StoragePoolV190NVMeSetProperties
func (t StoragePoolV190StoragePool_NVMeSetProperties) AsStoragePoolV190NVMeSetProperties() (StoragePoolV190NVMeSetProperties, error) {
	var body StoragePoolV190NVMeSetProperties
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190NVMeSetProperties overwrites any union data inside the StoragePoolV190StoragePool_NVMeSetProperties as the provided StoragePoolV190NVMeSetProperties
func (t *StoragePoolV190StoragePool_NVMeSetProperties) FromStoragePoolV190NVMeSetProperties(v StoragePoolV190NVMeSetProperties) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190NVMeSetProperties performs a merge with any union data inside the StoragePoolV190StoragePool_NVMeSetProperties, using the provided StoragePoolV190NVMeSetProperties
func (t *StoragePoolV190StoragePool_NVMeSetProperties) MergeStoragePoolV190NVMeSetProperties(v StoragePoolV190NVMeSetProperties) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolNVMeSetProperties1 returns the union data inside the StoragePoolV190StoragePool_NVMeSetProperties as a StoragePoolV190StoragePoolNVMeSetProperties1
func (t StoragePoolV190StoragePool_NVMeSetProperties) AsStoragePoolV190StoragePoolNVMeSetProperties1() (StoragePoolV190StoragePoolNVMeSetProperties1, error) {
	var body StoragePoolV190StoragePoolNVMeSetProperties1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolNVMeSetProperties1 overwrites any union data inside the StoragePoolV190StoragePool_NVMeSetProperties as the provided StoragePoolV190StoragePoolNVMeSetProperties1
func (t *StoragePoolV190StoragePool_NVMeSetProperties) FromStoragePoolV190StoragePoolNVMeSetProperties1(v StoragePoolV190StoragePoolNVMeSetProperties1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolNVMeSetProperties1 performs a merge with any union data inside the StoragePoolV190StoragePool_NVMeSetProperties, using the provided StoragePoolV190StoragePoolNVMeSetProperties1
func (t *StoragePoolV190StoragePool_NVMeSetProperties) MergeStoragePoolV190StoragePoolNVMeSetProperties1(v StoragePoolV190StoragePoolNVMeSetProperties1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_NVMeSetProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_NVMeSetProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStoragePoolPoolType returns the union data inside the StoragePoolV190StoragePool_PoolType_Item as a StoragePoolPoolType
func (t StoragePoolV190StoragePool_PoolType_Item) AsStoragePoolPoolType() (StoragePoolPoolType, error) {
	var body StoragePoolPoolType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolPoolType overwrites any union data inside the StoragePoolV190StoragePool_PoolType_Item as the provided StoragePoolPoolType
func (t *StoragePoolV190StoragePool_PoolType_Item) FromStoragePoolPoolType(v StoragePoolPoolType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolPoolType performs a merge with any union data inside the StoragePoolV190StoragePool_PoolType_Item, using the provided StoragePoolPoolType
func (t *StoragePoolV190StoragePool_PoolType_Item) MergeStoragePoolPoolType(v StoragePoolPoolType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolPoolType1 returns the union data inside the StoragePoolV190StoragePool_PoolType_Item as a StoragePoolV190StoragePoolPoolType1
func (t StoragePoolV190StoragePool_PoolType_Item) AsStoragePoolV190StoragePoolPoolType1() (StoragePoolV190StoragePoolPoolType1, error) {
	var body StoragePoolV190StoragePoolPoolType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolPoolType1 overwrites any union data inside the StoragePoolV190StoragePool_PoolType_Item as the provided StoragePoolV190StoragePoolPoolType1
func (t *StoragePoolV190StoragePool_PoolType_Item) FromStoragePoolV190StoragePoolPoolType1(v StoragePoolV190StoragePoolPoolType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolPoolType1 performs a merge with any union data inside the StoragePoolV190StoragePool_PoolType_Item, using the provided StoragePoolV190StoragePoolPoolType1
func (t *StoragePoolV190StoragePool_PoolType_Item) MergeStoragePoolV190StoragePoolPoolType1(v StoragePoolV190StoragePoolPoolType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_PoolType_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_PoolType_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStoragePoolPoolType returns the union data inside the StoragePoolV190StoragePool_SupportedPoolTypes_Item as a StoragePoolPoolType
func (t StoragePoolV190StoragePool_SupportedPoolTypes_Item) AsStoragePoolPoolType() (StoragePoolPoolType, error) {
	var body StoragePoolPoolType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolPoolType overwrites any union data inside the StoragePoolV190StoragePool_SupportedPoolTypes_Item as the provided StoragePoolPoolType
func (t *StoragePoolV190StoragePool_SupportedPoolTypes_Item) FromStoragePoolPoolType(v StoragePoolPoolType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolPoolType performs a merge with any union data inside the StoragePoolV190StoragePool_SupportedPoolTypes_Item, using the provided StoragePoolPoolType
func (t *StoragePoolV190StoragePool_SupportedPoolTypes_Item) MergeStoragePoolPoolType(v StoragePoolPoolType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolSupportedPoolTypes1 returns the union data inside the StoragePoolV190StoragePool_SupportedPoolTypes_Item as a StoragePoolV190StoragePoolSupportedPoolTypes1
func (t StoragePoolV190StoragePool_SupportedPoolTypes_Item) AsStoragePoolV190StoragePoolSupportedPoolTypes1() (StoragePoolV190StoragePoolSupportedPoolTypes1, error) {
	var body StoragePoolV190StoragePoolSupportedPoolTypes1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolSupportedPoolTypes1 overwrites any union data inside the StoragePoolV190StoragePool_SupportedPoolTypes_Item as the provided StoragePoolV190StoragePoolSupportedPoolTypes1
func (t *StoragePoolV190StoragePool_SupportedPoolTypes_Item) FromStoragePoolV190StoragePoolSupportedPoolTypes1(v StoragePoolV190StoragePoolSupportedPoolTypes1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolSupportedPoolTypes1 performs a merge with any union data inside the StoragePoolV190StoragePool_SupportedPoolTypes_Item, using the provided StoragePoolV190StoragePoolSupportedPoolTypes1
func (t *StoragePoolV190StoragePool_SupportedPoolTypes_Item) MergeStoragePoolV190StoragePoolSupportedPoolTypes1(v StoragePoolV190StoragePoolSupportedPoolTypes1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_SupportedPoolTypes_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_SupportedPoolTypes_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataStorageLoSCapabilitiesProvisioningPolicy returns the union data inside the StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item as a DataStorageLoSCapabilitiesProvisioningPolicy
func (t StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) AsDataStorageLoSCapabilitiesProvisioningPolicy() (DataStorageLoSCapabilitiesProvisioningPolicy, error) {
	var body DataStorageLoSCapabilitiesProvisioningPolicy
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataStorageLoSCapabilitiesProvisioningPolicy overwrites any union data inside the StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item as the provided DataStorageLoSCapabilitiesProvisioningPolicy
func (t *StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) FromDataStorageLoSCapabilitiesProvisioningPolicy(v DataStorageLoSCapabilitiesProvisioningPolicy) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataStorageLoSCapabilitiesProvisioningPolicy performs a merge with any union data inside the StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item, using the provided DataStorageLoSCapabilitiesProvisioningPolicy
func (t *StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) MergeDataStorageLoSCapabilitiesProvisioningPolicy(v DataStorageLoSCapabilitiesProvisioningPolicy) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolSupportedProvisioningPolicies1 returns the union data inside the StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item as a StoragePoolV190StoragePoolSupportedProvisioningPolicies1
func (t StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) AsStoragePoolV190StoragePoolSupportedProvisioningPolicies1() (StoragePoolV190StoragePoolSupportedProvisioningPolicies1, error) {
	var body StoragePoolV190StoragePoolSupportedProvisioningPolicies1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolSupportedProvisioningPolicies1 overwrites any union data inside the StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item as the provided StoragePoolV190StoragePoolSupportedProvisioningPolicies1
func (t *StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) FromStoragePoolV190StoragePoolSupportedProvisioningPolicies1(v StoragePoolV190StoragePoolSupportedProvisioningPolicies1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolSupportedProvisioningPolicies1 performs a merge with any union data inside the StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item, using the provided StoragePoolV190StoragePoolSupportedProvisioningPolicies1
func (t *StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) MergeStoragePoolV190StoragePoolSupportedProvisioningPolicies1(v StoragePoolV190StoragePoolSupportedProvisioningPolicies1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeRAIDType returns the union data inside the StoragePoolV190StoragePool_SupportedRAIDTypes_Item as a VolumeRAIDType
func (t StoragePoolV190StoragePool_SupportedRAIDTypes_Item) AsVolumeRAIDType() (VolumeRAIDType, error) {
	var body VolumeRAIDType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeRAIDType overwrites any union data inside the StoragePoolV190StoragePool_SupportedRAIDTypes_Item as the provided VolumeRAIDType
func (t *StoragePoolV190StoragePool_SupportedRAIDTypes_Item) FromVolumeRAIDType(v VolumeRAIDType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeRAIDType performs a merge with any union data inside the StoragePoolV190StoragePool_SupportedRAIDTypes_Item, using the provided VolumeRAIDType
func (t *StoragePoolV190StoragePool_SupportedRAIDTypes_Item) MergeVolumeRAIDType(v VolumeRAIDType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolSupportedRAIDTypes1 returns the union data inside the StoragePoolV190StoragePool_SupportedRAIDTypes_Item as a StoragePoolV190StoragePoolSupportedRAIDTypes1
func (t StoragePoolV190StoragePool_SupportedRAIDTypes_Item) AsStoragePoolV190StoragePoolSupportedRAIDTypes1() (StoragePoolV190StoragePoolSupportedRAIDTypes1, error) {
	var body StoragePoolV190StoragePoolSupportedRAIDTypes1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolSupportedRAIDTypes1 overwrites any union data inside the StoragePoolV190StoragePool_SupportedRAIDTypes_Item as the provided StoragePoolV190StoragePoolSupportedRAIDTypes1
func (t *StoragePoolV190StoragePool_SupportedRAIDTypes_Item) FromStoragePoolV190StoragePoolSupportedRAIDTypes1(v StoragePoolV190StoragePoolSupportedRAIDTypes1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolSupportedRAIDTypes1 performs a merge with any union data inside the StoragePoolV190StoragePool_SupportedRAIDTypes_Item, using the provided StoragePoolV190StoragePoolSupportedRAIDTypes1
func (t *StoragePoolV190StoragePool_SupportedRAIDTypes_Item) MergeStoragePoolV190StoragePoolSupportedRAIDTypes1(v StoragePoolV190StoragePoolSupportedRAIDTypes1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_SupportedRAIDTypes_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_SupportedRAIDTypes_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ConsistencyState returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyState as a StorageReplicaInfoV140ConsistencyState
func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyState) AsStorageReplicaInfoV140ConsistencyState() (StorageReplicaInfoV140ConsistencyState, error) {
	var body StorageReplicaInfoV140ConsistencyState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ConsistencyState overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyState as the provided StorageReplicaInfoV140ConsistencyState
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyState) FromStorageReplicaInfoV140ConsistencyState(v StorageReplicaInfoV140ConsistencyState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ConsistencyState performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyState, using the provided StorageReplicaInfoV140ConsistencyState
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyState) MergeStorageReplicaInfoV140ConsistencyState(v StorageReplicaInfoV140ConsistencyState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoConsistencyState1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyState as a StorageReplicaInfoV140ReplicaInfoConsistencyState1
func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyState) AsStorageReplicaInfoV140ReplicaInfoConsistencyState1() (StorageReplicaInfoV140ReplicaInfoConsistencyState1, error) {
	var body StorageReplicaInfoV140ReplicaInfoConsistencyState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoConsistencyState1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyState as the provided StorageReplicaInfoV140ReplicaInfoConsistencyState1
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyState) FromStorageReplicaInfoV140ReplicaInfoConsistencyState1(v StorageReplicaInfoV140ReplicaInfoConsistencyState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoConsistencyState1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyState, using the provided StorageReplicaInfoV140ReplicaInfoConsistencyState1
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyState) MergeStorageReplicaInfoV140ReplicaInfoConsistencyState1(v StorageReplicaInfoV140ReplicaInfoConsistencyState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ConsistencyStatus returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus as a StorageReplicaInfoV140ConsistencyStatus
func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) AsStorageReplicaInfoV140ConsistencyStatus() (StorageReplicaInfoV140ConsistencyStatus, error) {
	var body StorageReplicaInfoV140ConsistencyStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ConsistencyStatus overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus as the provided StorageReplicaInfoV140ConsistencyStatus
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) FromStorageReplicaInfoV140ConsistencyStatus(v StorageReplicaInfoV140ConsistencyStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ConsistencyStatus performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus, using the provided StorageReplicaInfoV140ConsistencyStatus
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) MergeStorageReplicaInfoV140ConsistencyStatus(v StorageReplicaInfoV140ConsistencyStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoConsistencyStatus1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus as a StorageReplicaInfoV140ReplicaInfoConsistencyStatus1
func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) AsStorageReplicaInfoV140ReplicaInfoConsistencyStatus1() (StorageReplicaInfoV140ReplicaInfoConsistencyStatus1, error) {
	var body StorageReplicaInfoV140ReplicaInfoConsistencyStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoConsistencyStatus1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus as the provided StorageReplicaInfoV140ReplicaInfoConsistencyStatus1
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) FromStorageReplicaInfoV140ReplicaInfoConsistencyStatus1(v StorageReplicaInfoV140ReplicaInfoConsistencyStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoConsistencyStatus1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus, using the provided StorageReplicaInfoV140ReplicaInfoConsistencyStatus1
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) MergeStorageReplicaInfoV140ReplicaInfoConsistencyStatus1(v StorageReplicaInfoV140ReplicaInfoConsistencyStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ConsistencyType returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyType as a StorageReplicaInfoV140ConsistencyType
func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyType) AsStorageReplicaInfoV140ConsistencyType() (StorageReplicaInfoV140ConsistencyType, error) {
	var body StorageReplicaInfoV140ConsistencyType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ConsistencyType overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyType as the provided StorageReplicaInfoV140ConsistencyType
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyType) FromStorageReplicaInfoV140ConsistencyType(v StorageReplicaInfoV140ConsistencyType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ConsistencyType performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyType, using the provided StorageReplicaInfoV140ConsistencyType
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyType) MergeStorageReplicaInfoV140ConsistencyType(v StorageReplicaInfoV140ConsistencyType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoConsistencyType1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyType as a StorageReplicaInfoV140ReplicaInfoConsistencyType1
func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyType) AsStorageReplicaInfoV140ReplicaInfoConsistencyType1() (StorageReplicaInfoV140ReplicaInfoConsistencyType1, error) {
	var body StorageReplicaInfoV140ReplicaInfoConsistencyType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoConsistencyType1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyType as the provided StorageReplicaInfoV140ReplicaInfoConsistencyType1
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyType) FromStorageReplicaInfoV140ReplicaInfoConsistencyType1(v StorageReplicaInfoV140ReplicaInfoConsistencyType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoConsistencyType1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyType, using the provided StorageReplicaInfoV140ReplicaInfoConsistencyType1
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyType) MergeStorageReplicaInfoV140ReplicaInfoConsistencyType1(v StorageReplicaInfoV140ReplicaInfoConsistencyType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoReplicaFaultDomain returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain as a StorageReplicaInfoReplicaFaultDomain
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) AsStorageReplicaInfoReplicaFaultDomain() (StorageReplicaInfoReplicaFaultDomain, error) {
	var body StorageReplicaInfoReplicaFaultDomain
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoReplicaFaultDomain overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain as the provided StorageReplicaInfoReplicaFaultDomain
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) FromStorageReplicaInfoReplicaFaultDomain(v StorageReplicaInfoReplicaFaultDomain) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoReplicaFaultDomain performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain, using the provided StorageReplicaInfoReplicaFaultDomain
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) MergeStorageReplicaInfoReplicaFaultDomain(v StorageReplicaInfoReplicaFaultDomain) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain as a StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) AsStorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1() (StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain as the provided StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) FromStorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1(v StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain, using the provided StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) MergeStorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1(v StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ReplicaPriority returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaPriority as a StorageReplicaInfoV140ReplicaPriority
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) AsStorageReplicaInfoV140ReplicaPriority() (StorageReplicaInfoV140ReplicaPriority, error) {
	var body StorageReplicaInfoV140ReplicaPriority
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaPriority overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaPriority as the provided StorageReplicaInfoV140ReplicaPriority
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) FromStorageReplicaInfoV140ReplicaPriority(v StorageReplicaInfoV140ReplicaPriority) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaPriority performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaPriority, using the provided StorageReplicaInfoV140ReplicaPriority
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) MergeStorageReplicaInfoV140ReplicaPriority(v StorageReplicaInfoV140ReplicaPriority) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaPriority1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaPriority as a StorageReplicaInfoV140ReplicaInfoReplicaPriority1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) AsStorageReplicaInfoV140ReplicaInfoReplicaPriority1() (StorageReplicaInfoV140ReplicaInfoReplicaPriority1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaPriority1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaPriority1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaPriority as the provided StorageReplicaInfoV140ReplicaInfoReplicaPriority1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) FromStorageReplicaInfoV140ReplicaInfoReplicaPriority1(v StorageReplicaInfoV140ReplicaInfoReplicaPriority1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaPriority1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaPriority, using the provided StorageReplicaInfoV140ReplicaInfoReplicaPriority1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) MergeStorageReplicaInfoV140ReplicaInfoReplicaPriority1(v StorageReplicaInfoV140ReplicaInfoReplicaPriority1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ReplicaProgressStatus returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus as a StorageReplicaInfoV140ReplicaProgressStatus
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) AsStorageReplicaInfoV140ReplicaProgressStatus() (StorageReplicaInfoV140ReplicaProgressStatus, error) {
	var body StorageReplicaInfoV140ReplicaProgressStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaProgressStatus overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus as the provided StorageReplicaInfoV140ReplicaProgressStatus
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) FromStorageReplicaInfoV140ReplicaProgressStatus(v StorageReplicaInfoV140ReplicaProgressStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaProgressStatus performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus, using the provided StorageReplicaInfoV140ReplicaProgressStatus
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) MergeStorageReplicaInfoV140ReplicaProgressStatus(v StorageReplicaInfoV140ReplicaProgressStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus as a StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) AsStorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1() (StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus as the provided StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) FromStorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1(v StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus, using the provided StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) MergeStorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1(v StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ReplicaReadOnlyAccess returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess as a StorageReplicaInfoV140ReplicaReadOnlyAccess
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) AsStorageReplicaInfoV140ReplicaReadOnlyAccess() (StorageReplicaInfoV140ReplicaReadOnlyAccess, error) {
	var body StorageReplicaInfoV140ReplicaReadOnlyAccess
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaReadOnlyAccess overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess as the provided StorageReplicaInfoV140ReplicaReadOnlyAccess
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) FromStorageReplicaInfoV140ReplicaReadOnlyAccess(v StorageReplicaInfoV140ReplicaReadOnlyAccess) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaReadOnlyAccess performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess, using the provided StorageReplicaInfoV140ReplicaReadOnlyAccess
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) MergeStorageReplicaInfoV140ReplicaReadOnlyAccess(v StorageReplicaInfoV140ReplicaReadOnlyAccess) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess as a StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) AsStorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1() (StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess as the provided StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) FromStorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1(v StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess, using the provided StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) MergeStorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1(v StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ReplicaRecoveryMode returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode as a StorageReplicaInfoV140ReplicaRecoveryMode
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) AsStorageReplicaInfoV140ReplicaRecoveryMode() (StorageReplicaInfoV140ReplicaRecoveryMode, error) {
	var body StorageReplicaInfoV140ReplicaRecoveryMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaRecoveryMode overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode as the provided StorageReplicaInfoV140ReplicaRecoveryMode
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) FromStorageReplicaInfoV140ReplicaRecoveryMode(v StorageReplicaInfoV140ReplicaRecoveryMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaRecoveryMode performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode, using the provided StorageReplicaInfoV140ReplicaRecoveryMode
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) MergeStorageReplicaInfoV140ReplicaRecoveryMode(v StorageReplicaInfoV140ReplicaRecoveryMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode as a StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) AsStorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1() (StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode as the provided StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) FromStorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1(v StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode, using the provided StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) MergeStorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1(v StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ReplicaRole returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRole as a StorageReplicaInfoV140ReplicaRole
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaRole) AsStorageReplicaInfoV140ReplicaRole() (StorageReplicaInfoV140ReplicaRole, error) {
	var body StorageReplicaInfoV140ReplicaRole
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaRole overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRole as the provided StorageReplicaInfoV140ReplicaRole
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRole) FromStorageReplicaInfoV140ReplicaRole(v StorageReplicaInfoV140ReplicaRole) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaRole performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRole, using the provided StorageReplicaInfoV140ReplicaRole
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRole) MergeStorageReplicaInfoV140ReplicaRole(v StorageReplicaInfoV140ReplicaRole) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaRole1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRole as a StorageReplicaInfoV140ReplicaInfoReplicaRole1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaRole) AsStorageReplicaInfoV140ReplicaInfoReplicaRole1() (StorageReplicaInfoV140ReplicaInfoReplicaRole1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaRole1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaRole1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRole as the provided StorageReplicaInfoV140ReplicaInfoReplicaRole1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRole) FromStorageReplicaInfoV140ReplicaInfoReplicaRole1(v StorageReplicaInfoV140ReplicaInfoReplicaRole1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaRole1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRole, using the provided StorageReplicaInfoV140ReplicaInfoReplicaRole1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRole) MergeStorageReplicaInfoV140ReplicaInfoReplicaRole1(v StorageReplicaInfoV140ReplicaInfoReplicaRole1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaRole) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRole) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ReplicaState returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaState as a StorageReplicaInfoV140ReplicaState
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaState) AsStorageReplicaInfoV140ReplicaState() (StorageReplicaInfoV140ReplicaState, error) {
	var body StorageReplicaInfoV140ReplicaState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaState overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaState as the provided StorageReplicaInfoV140ReplicaState
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaState) FromStorageReplicaInfoV140ReplicaState(v StorageReplicaInfoV140ReplicaState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaState performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaState, using the provided StorageReplicaInfoV140ReplicaState
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaState) MergeStorageReplicaInfoV140ReplicaState(v StorageReplicaInfoV140ReplicaState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaState1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaState as a StorageReplicaInfoV140ReplicaInfoReplicaState1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaState) AsStorageReplicaInfoV140ReplicaInfoReplicaState1() (StorageReplicaInfoV140ReplicaInfoReplicaState1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaState1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaState as the provided StorageReplicaInfoV140ReplicaInfoReplicaState1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaState) FromStorageReplicaInfoV140ReplicaInfoReplicaState1(v StorageReplicaInfoV140ReplicaInfoReplicaState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaState1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaState, using the provided StorageReplicaInfoV140ReplicaInfoReplicaState1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaState) MergeStorageReplicaInfoV140ReplicaInfoReplicaState1(v StorageReplicaInfoV140ReplicaInfoReplicaState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoReplicaType returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaType as a StorageReplicaInfoReplicaType
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaType) AsStorageReplicaInfoReplicaType() (StorageReplicaInfoReplicaType, error) {
	var body StorageReplicaInfoReplicaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoReplicaType overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaType as the provided StorageReplicaInfoReplicaType
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaType) FromStorageReplicaInfoReplicaType(v StorageReplicaInfoReplicaType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoReplicaType performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaType, using the provided StorageReplicaInfoReplicaType
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaType) MergeStorageReplicaInfoReplicaType(v StorageReplicaInfoReplicaType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaType1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaType as a StorageReplicaInfoV140ReplicaInfoReplicaType1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaType) AsStorageReplicaInfoV140ReplicaInfoReplicaType1() (StorageReplicaInfoV140ReplicaInfoReplicaType1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaType1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaType as the provided StorageReplicaInfoV140ReplicaInfoReplicaType1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaType) FromStorageReplicaInfoV140ReplicaInfoReplicaType1(v StorageReplicaInfoV140ReplicaInfoReplicaType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaType1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaType, using the provided StorageReplicaInfoV140ReplicaInfoReplicaType1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaType) MergeStorageReplicaInfoV140ReplicaInfoReplicaType1(v StorageReplicaInfoV140ReplicaInfoReplicaType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoReplicaUpdateMode returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode as a StorageReplicaInfoReplicaUpdateMode
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) AsStorageReplicaInfoReplicaUpdateMode() (StorageReplicaInfoReplicaUpdateMode, error) {
	var body StorageReplicaInfoReplicaUpdateMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoReplicaUpdateMode overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode as the provided StorageReplicaInfoReplicaUpdateMode
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) FromStorageReplicaInfoReplicaUpdateMode(v StorageReplicaInfoReplicaUpdateMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoReplicaUpdateMode performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode, using the provided StorageReplicaInfoReplicaUpdateMode
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) MergeStorageReplicaInfoReplicaUpdateMode(v StorageReplicaInfoReplicaUpdateMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode as a StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) AsStorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1() (StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode as the provided StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) FromStorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1(v StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode, using the provided StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) MergeStorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1(v StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ReplicaState returns the union data inside the StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState as a StorageReplicaInfoV140ReplicaState
func (t StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) AsStorageReplicaInfoV140ReplicaState() (StorageReplicaInfoV140ReplicaState, error) {
	var body StorageReplicaInfoV140ReplicaState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaState overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState as the provided StorageReplicaInfoV140ReplicaState
func (t *StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) FromStorageReplicaInfoV140ReplicaState(v StorageReplicaInfoV140ReplicaState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaState performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState, using the provided StorageReplicaInfoV140ReplicaState
func (t *StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) MergeStorageReplicaInfoV140ReplicaState(v StorageReplicaInfoV140ReplicaState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoRequestedReplicaState1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState as a StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1
func (t StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) AsStorageReplicaInfoV140ReplicaInfoRequestedReplicaState1() (StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1, error) {
	var body StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoRequestedReplicaState1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState as the provided StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1
func (t *StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) FromStorageReplicaInfoV140ReplicaInfoRequestedReplicaState1(v StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoRequestedReplicaState1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState, using the provided StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1
func (t *StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) MergeStorageReplicaInfoV140ReplicaInfoRequestedReplicaState1(v StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140UndiscoveredElement returns the union data inside the StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement as a StorageReplicaInfoV140UndiscoveredElement
func (t StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) AsStorageReplicaInfoV140UndiscoveredElement() (StorageReplicaInfoV140UndiscoveredElement, error) {
	var body StorageReplicaInfoV140UndiscoveredElement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140UndiscoveredElement overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement as the provided StorageReplicaInfoV140UndiscoveredElement
func (t *StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) FromStorageReplicaInfoV140UndiscoveredElement(v StorageReplicaInfoV140UndiscoveredElement) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140UndiscoveredElement performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement, using the provided StorageReplicaInfoV140UndiscoveredElement
func (t *StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) MergeStorageReplicaInfoV140UndiscoveredElement(v StorageReplicaInfoV140UndiscoveredElement) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoUndiscoveredElement1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement as a StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1
func (t StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) AsStorageReplicaInfoV140ReplicaInfoUndiscoveredElement1() (StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1, error) {
	var body StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoUndiscoveredElement1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement as the provided StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1
func (t *StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) FromStorageReplicaInfoV140ReplicaInfoUndiscoveredElement1(v StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoUndiscoveredElement1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement, using the provided StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1
func (t *StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) MergeStorageReplicaInfoV140ReplicaInfoUndiscoveredElement1(v StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the StorageServiceCollectionStorageServiceCollection_Description as a ResourceDescription
func (t StorageServiceCollectionStorageServiceCollection_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the StorageServiceCollectionStorageServiceCollection_Description as the provided ResourceDescription
func (t *StorageServiceCollectionStorageServiceCollection_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the StorageServiceCollectionStorageServiceCollection_Description, using the provided ResourceDescription
func (t *StorageServiceCollectionStorageServiceCollection_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageServiceCollectionStorageServiceCollectionDescription1 returns the union data inside the StorageServiceCollectionStorageServiceCollection_Description as a StorageServiceCollectionStorageServiceCollectionDescription1
func (t StorageServiceCollectionStorageServiceCollection_Description) AsStorageServiceCollectionStorageServiceCollectionDescription1() (StorageServiceCollectionStorageServiceCollectionDescription1, error) {
	var body StorageServiceCollectionStorageServiceCollectionDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageServiceCollectionStorageServiceCollectionDescription1 overwrites any union data inside the StorageServiceCollectionStorageServiceCollection_Description as the provided StorageServiceCollectionStorageServiceCollectionDescription1
func (t *StorageServiceCollectionStorageServiceCollection_Description) FromStorageServiceCollectionStorageServiceCollectionDescription1(v StorageServiceCollectionStorageServiceCollectionDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageServiceCollectionStorageServiceCollectionDescription1 performs a merge with any union data inside the StorageServiceCollectionStorageServiceCollection_Description, using the provided StorageServiceCollectionStorageServiceCollectionDescription1
func (t *StorageServiceCollectionStorageServiceCollection_Description) MergeStorageServiceCollectionStorageServiceCollectionDescription1(v StorageServiceCollectionStorageServiceCollectionDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageServiceCollectionStorageServiceCollection_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageServiceCollectionStorageServiceCollection_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the StorageServiceV170StorageService_Description as a ResourceDescription
func (t StorageServiceV170StorageService_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the StorageServiceV170StorageService_Description as the provided ResourceDescription
func (t *StorageServiceV170StorageService_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the StorageServiceV170StorageService_Description, using the provided ResourceDescription
func (t *StorageServiceV170StorageService_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageServiceV170StorageServiceDescription1 returns the union data inside the StorageServiceV170StorageService_Description as a StorageServiceV170StorageServiceDescription1
func (t StorageServiceV170StorageService_Description) AsStorageServiceV170StorageServiceDescription1() (StorageServiceV170StorageServiceDescription1, error) {
	var body StorageServiceV170StorageServiceDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageServiceV170StorageServiceDescription1 overwrites any union data inside the StorageServiceV170StorageService_Description as the provided StorageServiceV170StorageServiceDescription1
func (t *StorageServiceV170StorageService_Description) FromStorageServiceV170StorageServiceDescription1(v StorageServiceV170StorageServiceDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageServiceV170StorageServiceDescription1 performs a merge with any union data inside the StorageServiceV170StorageService_Description, using the provided StorageServiceV170StorageServiceDescription1
func (t *StorageServiceV170StorageService_Description) MergeStorageServiceV170StorageServiceDescription1(v StorageServiceV170StorageServiceDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageServiceV170StorageService_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageServiceV170StorageService_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOdataV4IdRef returns the union data inside the StorageServiceV170StorageService_Metrics as a OdataV4IdRef
func (t StorageServiceV170StorageService_Metrics) AsOdataV4IdRef() (OdataV4IdRef, error) {
	var body OdataV4IdRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOdataV4IdRef overwrites any union data inside the StorageServiceV170StorageService_Metrics as the provided OdataV4IdRef
func (t *StorageServiceV170StorageService_Metrics) FromOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOdataV4IdRef performs a merge with any union data inside the StorageServiceV170StorageService_Metrics, using the provided OdataV4IdRef
func (t *StorageServiceV170StorageService_Metrics) MergeOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageServiceV170StorageServiceMetrics1 returns the union data inside the StorageServiceV170StorageService_Metrics as a StorageServiceV170StorageServiceMetrics1
func (t StorageServiceV170StorageService_Metrics) AsStorageServiceV170StorageServiceMetrics1() (StorageServiceV170StorageServiceMetrics1, error) {
	var body StorageServiceV170StorageServiceMetrics1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageServiceV170StorageServiceMetrics1 overwrites any union data inside the StorageServiceV170StorageService_Metrics as the provided StorageServiceV170StorageServiceMetrics1
func (t *StorageServiceV170StorageService_Metrics) FromStorageServiceV170StorageServiceMetrics1(v StorageServiceV170StorageServiceMetrics1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageServiceV170StorageServiceMetrics1 performs a merge with any union data inside the StorageServiceV170StorageService_Metrics, using the provided StorageServiceV170StorageServiceMetrics1
func (t *StorageServiceV170StorageService_Metrics) MergeStorageServiceV170StorageServiceMetrics1(v StorageServiceV170StorageServiceMetrics1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageServiceV170StorageService_Metrics) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageServiceV170StorageService_Metrics) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVLanNetworkInterfaceV131VLANId returns the union data inside the VLanNetworkInterfaceV131VLAN_VLANId as a VLanNetworkInterfaceV131VLANId
func (t VLanNetworkInterfaceV131VLAN_VLANId) AsVLanNetworkInterfaceV131VLANId() (VLanNetworkInterfaceV131VLANId, error) {
	var body VLanNetworkInterfaceV131VLANId
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVLanNetworkInterfaceV131VLANId overwrites any union data inside the VLanNetworkInterfaceV131VLAN_VLANId as the provided VLanNetworkInterfaceV131VLANId
func (t *VLanNetworkInterfaceV131VLAN_VLANId) FromVLanNetworkInterfaceV131VLANId(v VLanNetworkInterfaceV131VLANId) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVLanNetworkInterfaceV131VLANId performs a merge with any union data inside the VLanNetworkInterfaceV131VLAN_VLANId, using the provided VLanNetworkInterfaceV131VLANId
func (t *VLanNetworkInterfaceV131VLAN_VLANId) MergeVLanNetworkInterfaceV131VLANId(v VLanNetworkInterfaceV131VLANId) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVLanNetworkInterfaceV131VLANVLANId1 returns the union data inside the VLanNetworkInterfaceV131VLAN_VLANId as a VLanNetworkInterfaceV131VLANVLANId1
func (t VLanNetworkInterfaceV131VLAN_VLANId) AsVLanNetworkInterfaceV131VLANVLANId1() (VLanNetworkInterfaceV131VLANVLANId1, error) {
	var body VLanNetworkInterfaceV131VLANVLANId1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVLanNetworkInterfaceV131VLANVLANId1 overwrites any union data inside the VLanNetworkInterfaceV131VLAN_VLANId as the provided VLanNetworkInterfaceV131VLANVLANId1
func (t *VLanNetworkInterfaceV131VLAN_VLANId) FromVLanNetworkInterfaceV131VLANVLANId1(v VLanNetworkInterfaceV131VLANVLANId1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVLanNetworkInterfaceV131VLANVLANId1 performs a merge with any union data inside the VLanNetworkInterfaceV131VLAN_VLANId, using the provided VLanNetworkInterfaceV131VLANVLANId1
func (t *VLanNetworkInterfaceV131VLAN_VLANId) MergeVLanNetworkInterfaceV131VLANVLANId1(v VLanNetworkInterfaceV131VLANVLANId1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VLanNetworkInterfaceV131VLAN_VLANId) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VLanNetworkInterfaceV131VLAN_VLANId) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVLanNetworkInterfaceV131VLANPriority returns the union data inside the VLanNetworkInterfaceV131VLAN_VLANPriority as a VLanNetworkInterfaceV131VLANPriority
func (t VLanNetworkInterfaceV131VLAN_VLANPriority) AsVLanNetworkInterfaceV131VLANPriority() (VLanNetworkInterfaceV131VLANPriority, error) {
	var body VLanNetworkInterfaceV131VLANPriority
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVLanNetworkInterfaceV131VLANPriority overwrites any union data inside the VLanNetworkInterfaceV131VLAN_VLANPriority as the provided VLanNetworkInterfaceV131VLANPriority
func (t *VLanNetworkInterfaceV131VLAN_VLANPriority) FromVLanNetworkInterfaceV131VLANPriority(v VLanNetworkInterfaceV131VLANPriority) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVLanNetworkInterfaceV131VLANPriority performs a merge with any union data inside the VLanNetworkInterfaceV131VLAN_VLANPriority, using the provided VLanNetworkInterfaceV131VLANPriority
func (t *VLanNetworkInterfaceV131VLAN_VLANPriority) MergeVLanNetworkInterfaceV131VLANPriority(v VLanNetworkInterfaceV131VLANPriority) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVLanNetworkInterfaceV131VLANVLANPriority1 returns the union data inside the VLanNetworkInterfaceV131VLAN_VLANPriority as a VLanNetworkInterfaceV131VLANVLANPriority1
func (t VLanNetworkInterfaceV131VLAN_VLANPriority) AsVLanNetworkInterfaceV131VLANVLANPriority1() (VLanNetworkInterfaceV131VLANVLANPriority1, error) {
	var body VLanNetworkInterfaceV131VLANVLANPriority1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVLanNetworkInterfaceV131VLANVLANPriority1 overwrites any union data inside the VLanNetworkInterfaceV131VLAN_VLANPriority as the provided VLanNetworkInterfaceV131VLANVLANPriority1
func (t *VLanNetworkInterfaceV131VLAN_VLANPriority) FromVLanNetworkInterfaceV131VLANVLANPriority1(v VLanNetworkInterfaceV131VLANVLANPriority1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVLanNetworkInterfaceV131VLANVLANPriority1 performs a merge with any union data inside the VLanNetworkInterfaceV131VLAN_VLANPriority, using the provided VLanNetworkInterfaceV131VLANVLANPriority1
func (t *VLanNetworkInterfaceV131VLAN_VLANPriority) MergeVLanNetworkInterfaceV131VLANVLANPriority1(v VLanNetworkInterfaceV131VLANVLANPriority1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VLanNetworkInterfaceV131VLAN_VLANPriority) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VLanNetworkInterfaceV131VLAN_VLANPriority) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeLBAFormatType returns the union data inside the VolumeV1100LBAFormat_LBAFormatType as a VolumeLBAFormatType
func (t VolumeV1100LBAFormat_LBAFormatType) AsVolumeLBAFormatType() (VolumeLBAFormatType, error) {
	var body VolumeLBAFormatType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeLBAFormatType overwrites any union data inside the VolumeV1100LBAFormat_LBAFormatType as the provided VolumeLBAFormatType
func (t *VolumeV1100LBAFormat_LBAFormatType) FromVolumeLBAFormatType(v VolumeLBAFormatType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeLBAFormatType performs a merge with any union data inside the VolumeV1100LBAFormat_LBAFormatType, using the provided VolumeLBAFormatType
func (t *VolumeV1100LBAFormat_LBAFormatType) MergeVolumeLBAFormatType(v VolumeLBAFormatType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100LBAFormatLBAFormatType1 returns the union data inside the VolumeV1100LBAFormat_LBAFormatType as a VolumeV1100LBAFormatLBAFormatType1
func (t VolumeV1100LBAFormat_LBAFormatType) AsVolumeV1100LBAFormatLBAFormatType1() (VolumeV1100LBAFormatLBAFormatType1, error) {
	var body VolumeV1100LBAFormatLBAFormatType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100LBAFormatLBAFormatType1 overwrites any union data inside the VolumeV1100LBAFormat_LBAFormatType as the provided VolumeV1100LBAFormatLBAFormatType1
func (t *VolumeV1100LBAFormat_LBAFormatType) FromVolumeV1100LBAFormatLBAFormatType1(v VolumeV1100LBAFormatLBAFormatType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100LBAFormatLBAFormatType1 performs a merge with any union data inside the VolumeV1100LBAFormat_LBAFormatType, using the provided VolumeV1100LBAFormatLBAFormatType1
func (t *VolumeV1100LBAFormat_LBAFormatType) MergeVolumeV1100LBAFormatLBAFormatType1(v VolumeV1100LBAFormatLBAFormatType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100LBAFormat_LBAFormatType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100LBAFormat_LBAFormatType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeLBARelativePerformanceType returns the union data inside the VolumeV1100LBAFormat_RelativePerformance as a VolumeLBARelativePerformanceType
func (t VolumeV1100LBAFormat_RelativePerformance) AsVolumeLBARelativePerformanceType() (VolumeLBARelativePerformanceType, error) {
	var body VolumeLBARelativePerformanceType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeLBARelativePerformanceType overwrites any union data inside the VolumeV1100LBAFormat_RelativePerformance as the provided VolumeLBARelativePerformanceType
func (t *VolumeV1100LBAFormat_RelativePerformance) FromVolumeLBARelativePerformanceType(v VolumeLBARelativePerformanceType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeLBARelativePerformanceType performs a merge with any union data inside the VolumeV1100LBAFormat_RelativePerformance, using the provided VolumeLBARelativePerformanceType
func (t *VolumeV1100LBAFormat_RelativePerformance) MergeVolumeLBARelativePerformanceType(v VolumeLBARelativePerformanceType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100LBAFormatRelativePerformance1 returns the union data inside the VolumeV1100LBAFormat_RelativePerformance as a VolumeV1100LBAFormatRelativePerformance1
func (t VolumeV1100LBAFormat_RelativePerformance) AsVolumeV1100LBAFormatRelativePerformance1() (VolumeV1100LBAFormatRelativePerformance1, error) {
	var body VolumeV1100LBAFormatRelativePerformance1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100LBAFormatRelativePerformance1 overwrites any union data inside the VolumeV1100LBAFormat_RelativePerformance as the provided VolumeV1100LBAFormatRelativePerformance1
func (t *VolumeV1100LBAFormat_RelativePerformance) FromVolumeV1100LBAFormatRelativePerformance1(v VolumeV1100LBAFormatRelativePerformance1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100LBAFormatRelativePerformance1 performs a merge with any union data inside the VolumeV1100LBAFormat_RelativePerformance, using the provided VolumeV1100LBAFormatRelativePerformance1
func (t *VolumeV1100LBAFormat_RelativePerformance) MergeVolumeV1100LBAFormatRelativePerformance1(v VolumeV1100LBAFormatRelativePerformance1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100LBAFormat_RelativePerformance) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100LBAFormat_RelativePerformance) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOdataV4IdRef returns the union data inside the VolumeV1100Links_CacheVolumeSource as a OdataV4IdRef
func (t VolumeV1100Links_CacheVolumeSource) AsOdataV4IdRef() (OdataV4IdRef, error) {
	var body OdataV4IdRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOdataV4IdRef overwrites any union data inside the VolumeV1100Links_CacheVolumeSource as the provided OdataV4IdRef
func (t *VolumeV1100Links_CacheVolumeSource) FromOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOdataV4IdRef performs a merge with any union data inside the VolumeV1100Links_CacheVolumeSource, using the provided OdataV4IdRef
func (t *VolumeV1100Links_CacheVolumeSource) MergeOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100LinksCacheVolumeSource1 returns the union data inside the VolumeV1100Links_CacheVolumeSource as a VolumeV1100LinksCacheVolumeSource1
func (t VolumeV1100Links_CacheVolumeSource) AsVolumeV1100LinksCacheVolumeSource1() (VolumeV1100LinksCacheVolumeSource1, error) {
	var body VolumeV1100LinksCacheVolumeSource1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100LinksCacheVolumeSource1 overwrites any union data inside the VolumeV1100Links_CacheVolumeSource as the provided VolumeV1100LinksCacheVolumeSource1
func (t *VolumeV1100Links_CacheVolumeSource) FromVolumeV1100LinksCacheVolumeSource1(v VolumeV1100LinksCacheVolumeSource1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100LinksCacheVolumeSource1 performs a merge with any union data inside the VolumeV1100Links_CacheVolumeSource, using the provided VolumeV1100LinksCacheVolumeSource1
func (t *VolumeV1100Links_CacheVolumeSource) MergeVolumeV1100LinksCacheVolumeSource1(v VolumeV1100LinksCacheVolumeSource1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Links_CacheVolumeSource) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Links_CacheVolumeSource) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOdataV4IdRef returns the union data inside the VolumeV1100Links_JournalingMedia as a OdataV4IdRef
func (t VolumeV1100Links_JournalingMedia) AsOdataV4IdRef() (OdataV4IdRef, error) {
	var body OdataV4IdRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOdataV4IdRef overwrites any union data inside the VolumeV1100Links_JournalingMedia as the provided OdataV4IdRef
func (t *VolumeV1100Links_JournalingMedia) FromOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOdataV4IdRef performs a merge with any union data inside the VolumeV1100Links_JournalingMedia, using the provided OdataV4IdRef
func (t *VolumeV1100Links_JournalingMedia) MergeOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100LinksJournalingMedia1 returns the union data inside the VolumeV1100Links_JournalingMedia as a VolumeV1100LinksJournalingMedia1
func (t VolumeV1100Links_JournalingMedia) AsVolumeV1100LinksJournalingMedia1() (VolumeV1100LinksJournalingMedia1, error) {
	var body VolumeV1100LinksJournalingMedia1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100LinksJournalingMedia1 overwrites any union data inside the VolumeV1100Links_JournalingMedia as the provided VolumeV1100LinksJournalingMedia1
func (t *VolumeV1100Links_JournalingMedia) FromVolumeV1100LinksJournalingMedia1(v VolumeV1100LinksJournalingMedia1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100LinksJournalingMedia1 performs a merge with any union data inside the VolumeV1100Links_JournalingMedia, using the provided VolumeV1100LinksJournalingMedia1
func (t *VolumeV1100Links_JournalingMedia) MergeVolumeV1100LinksJournalingMedia1(v VolumeV1100LinksJournalingMedia1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Links_JournalingMedia) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Links_JournalingMedia) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOdataV4IdRef returns the union data inside the VolumeV1100Links_ProvidingStoragePool as a OdataV4IdRef
func (t VolumeV1100Links_ProvidingStoragePool) AsOdataV4IdRef() (OdataV4IdRef, error) {
	var body OdataV4IdRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOdataV4IdRef overwrites any union data inside the VolumeV1100Links_ProvidingStoragePool as the provided OdataV4IdRef
func (t *VolumeV1100Links_ProvidingStoragePool) FromOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOdataV4IdRef performs a merge with any union data inside the VolumeV1100Links_ProvidingStoragePool, using the provided OdataV4IdRef
func (t *VolumeV1100Links_ProvidingStoragePool) MergeOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100LinksProvidingStoragePool1 returns the union data inside the VolumeV1100Links_ProvidingStoragePool as a VolumeV1100LinksProvidingStoragePool1
func (t VolumeV1100Links_ProvidingStoragePool) AsVolumeV1100LinksProvidingStoragePool1() (VolumeV1100LinksProvidingStoragePool1, error) {
	var body VolumeV1100LinksProvidingStoragePool1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100LinksProvidingStoragePool1 overwrites any union data inside the VolumeV1100Links_ProvidingStoragePool as the provided VolumeV1100LinksProvidingStoragePool1
func (t *VolumeV1100Links_ProvidingStoragePool) FromVolumeV1100LinksProvidingStoragePool1(v VolumeV1100LinksProvidingStoragePool1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100LinksProvidingStoragePool1 performs a merge with any union data inside the VolumeV1100Links_ProvidingStoragePool, using the provided VolumeV1100LinksProvidingStoragePool1
func (t *VolumeV1100Links_ProvidingStoragePool) MergeVolumeV1100LinksProvidingStoragePool1(v VolumeV1100LinksProvidingStoragePool1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Links_ProvidingStoragePool) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Links_ProvidingStoragePool) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeV1100LBAFormat returns the union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormat as a VolumeV1100LBAFormat
func (t VolumeV1100NVMeNamespaceProperties_LBAFormat) AsVolumeV1100LBAFormat() (VolumeV1100LBAFormat, error) {
	var body VolumeV1100LBAFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100LBAFormat overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormat as the provided VolumeV1100LBAFormat
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormat) FromVolumeV1100LBAFormat(v VolumeV1100LBAFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100LBAFormat performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormat, using the provided VolumeV1100LBAFormat
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormat) MergeVolumeV1100LBAFormat(v VolumeV1100LBAFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100NVMeNamespacePropertiesLBAFormat1 returns the union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormat as a VolumeV1100NVMeNamespacePropertiesLBAFormat1
func (t VolumeV1100NVMeNamespaceProperties_LBAFormat) AsVolumeV1100NVMeNamespacePropertiesLBAFormat1() (VolumeV1100NVMeNamespacePropertiesLBAFormat1, error) {
	var body VolumeV1100NVMeNamespacePropertiesLBAFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NVMeNamespacePropertiesLBAFormat1 overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormat as the provided VolumeV1100NVMeNamespacePropertiesLBAFormat1
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormat) FromVolumeV1100NVMeNamespacePropertiesLBAFormat1(v VolumeV1100NVMeNamespacePropertiesLBAFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NVMeNamespacePropertiesLBAFormat1 performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormat, using the provided VolumeV1100NVMeNamespacePropertiesLBAFormat1
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormat) MergeVolumeV1100NVMeNamespacePropertiesLBAFormat1(v VolumeV1100NVMeNamespacePropertiesLBAFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100NVMeNamespaceProperties_LBAFormat) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100NVMeNamespaceProperties_LBAFormat) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeV1100LBAFormat returns the union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormats_Item as a VolumeV1100LBAFormat
func (t VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) AsVolumeV1100LBAFormat() (VolumeV1100LBAFormat, error) {
	var body VolumeV1100LBAFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100LBAFormat overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormats_Item as the provided VolumeV1100LBAFormat
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) FromVolumeV1100LBAFormat(v VolumeV1100LBAFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100LBAFormat performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormats_Item, using the provided VolumeV1100LBAFormat
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) MergeVolumeV1100LBAFormat(v VolumeV1100LBAFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100NVMeNamespacePropertiesLBAFormats1 returns the union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormats_Item as a VolumeV1100NVMeNamespacePropertiesLBAFormats1
func (t VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) AsVolumeV1100NVMeNamespacePropertiesLBAFormats1() (VolumeV1100NVMeNamespacePropertiesLBAFormats1, error) {
	var body VolumeV1100NVMeNamespacePropertiesLBAFormats1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NVMeNamespacePropertiesLBAFormats1 overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormats_Item as the provided VolumeV1100NVMeNamespacePropertiesLBAFormats1
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) FromVolumeV1100NVMeNamespacePropertiesLBAFormats1(v VolumeV1100NVMeNamespacePropertiesLBAFormats1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NVMeNamespacePropertiesLBAFormats1 performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormats_Item, using the provided VolumeV1100NVMeNamespacePropertiesLBAFormats1
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) MergeVolumeV1100NVMeNamespacePropertiesLBAFormats1(v VolumeV1100NVMeNamespacePropertiesLBAFormats1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeLBAFormatType returns the union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item as a VolumeLBAFormatType
func (t VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) AsVolumeLBAFormatType() (VolumeLBAFormatType, error) {
	var body VolumeLBAFormatType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeLBAFormatType overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item as the provided VolumeLBAFormatType
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) FromVolumeLBAFormatType(v VolumeLBAFormatType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeLBAFormatType performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item, using the provided VolumeLBAFormatType
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) MergeVolumeLBAFormatType(v VolumeLBAFormatType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1 returns the union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item as a VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1
func (t VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) AsVolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1() (VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1, error) {
	var body VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1 overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item as the provided VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) FromVolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1(v VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1 performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item, using the provided VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) MergeVolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1(v VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeV1100NamespaceFeatures returns the union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceFeatures as a VolumeV1100NamespaceFeatures
func (t VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) AsVolumeV1100NamespaceFeatures() (VolumeV1100NamespaceFeatures, error) {
	var body VolumeV1100NamespaceFeatures
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NamespaceFeatures overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceFeatures as the provided VolumeV1100NamespaceFeatures
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) FromVolumeV1100NamespaceFeatures(v VolumeV1100NamespaceFeatures) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NamespaceFeatures performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceFeatures, using the provided VolumeV1100NamespaceFeatures
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) MergeVolumeV1100NamespaceFeatures(v VolumeV1100NamespaceFeatures) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100NVMeNamespacePropertiesNamespaceFeatures1 returns the union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceFeatures as a VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1
func (t VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) AsVolumeV1100NVMeNamespacePropertiesNamespaceFeatures1() (VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1, error) {
	var body VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NVMeNamespacePropertiesNamespaceFeatures1 overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceFeatures as the provided VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) FromVolumeV1100NVMeNamespacePropertiesNamespaceFeatures1(v VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NVMeNamespacePropertiesNamespaceFeatures1 performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceFeatures, using the provided VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) MergeVolumeV1100NVMeNamespacePropertiesNamespaceFeatures1(v VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeNamespaceType returns the union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceType as a VolumeNamespaceType
func (t VolumeV1100NVMeNamespaceProperties_NamespaceType) AsVolumeNamespaceType() (VolumeNamespaceType, error) {
	var body VolumeNamespaceType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeNamespaceType overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceType as the provided VolumeNamespaceType
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceType) FromVolumeNamespaceType(v VolumeNamespaceType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeNamespaceType performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceType, using the provided VolumeNamespaceType
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceType) MergeVolumeNamespaceType(v VolumeNamespaceType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100NVMeNamespacePropertiesNamespaceType1 returns the union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceType as a VolumeV1100NVMeNamespacePropertiesNamespaceType1
func (t VolumeV1100NVMeNamespaceProperties_NamespaceType) AsVolumeV1100NVMeNamespacePropertiesNamespaceType1() (VolumeV1100NVMeNamespacePropertiesNamespaceType1, error) {
	var body VolumeV1100NVMeNamespacePropertiesNamespaceType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NVMeNamespacePropertiesNamespaceType1 overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceType as the provided VolumeV1100NVMeNamespacePropertiesNamespaceType1
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceType) FromVolumeV1100NVMeNamespacePropertiesNamespaceType1(v VolumeV1100NVMeNamespacePropertiesNamespaceType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NVMeNamespacePropertiesNamespaceType1 performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceType, using the provided VolumeV1100NVMeNamespacePropertiesNamespaceType1
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceType) MergeVolumeV1100NVMeNamespacePropertiesNamespaceType1(v VolumeV1100NVMeNamespacePropertiesNamespaceType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100NVMeNamespaceProperties_NamespaceType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100NVMeNamespaceProperties_NamespaceType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeNamespaceType returns the union data inside the VolumeV1100NVMeNamespaceProperties_Type as a VolumeNamespaceType
func (t VolumeV1100NVMeNamespaceProperties_Type) AsVolumeNamespaceType() (VolumeNamespaceType, error) {
	var body VolumeNamespaceType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeNamespaceType overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_Type as the provided VolumeNamespaceType
func (t *VolumeV1100NVMeNamespaceProperties_Type) FromVolumeNamespaceType(v VolumeNamespaceType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeNamespaceType performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_Type, using the provided VolumeNamespaceType
func (t *VolumeV1100NVMeNamespaceProperties_Type) MergeVolumeNamespaceType(v VolumeNamespaceType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100NVMeNamespacePropertiesType1 returns the union data inside the VolumeV1100NVMeNamespaceProperties_Type as a VolumeV1100NVMeNamespacePropertiesType1
func (t VolumeV1100NVMeNamespaceProperties_Type) AsVolumeV1100NVMeNamespacePropertiesType1() (VolumeV1100NVMeNamespacePropertiesType1, error) {
	var body VolumeV1100NVMeNamespacePropertiesType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NVMeNamespacePropertiesType1 overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_Type as the provided VolumeV1100NVMeNamespacePropertiesType1
func (t *VolumeV1100NVMeNamespaceProperties_Type) FromVolumeV1100NVMeNamespacePropertiesType1(v VolumeV1100NVMeNamespacePropertiesType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NVMeNamespacePropertiesType1 performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_Type, using the provided VolumeV1100NVMeNamespacePropertiesType1
func (t *VolumeV1100NVMeNamespaceProperties_Type) MergeVolumeV1100NVMeNamespacePropertiesType1(v VolumeV1100NVMeNamespacePropertiesType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100NVMeNamespaceProperties_Type) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100NVMeNamespaceProperties_Type) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeOperationType returns the union data inside the VolumeV1100Operation_Operation as a VolumeOperationType
func (t VolumeV1100Operation_Operation) AsVolumeOperationType() (VolumeOperationType, error) {
	var body VolumeOperationType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeOperationType overwrites any union data inside the VolumeV1100Operation_Operation as the provided VolumeOperationType
func (t *VolumeV1100Operation_Operation) FromVolumeOperationType(v VolumeOperationType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeOperationType performs a merge with any union data inside the VolumeV1100Operation_Operation, using the provided VolumeOperationType
func (t *VolumeV1100Operation_Operation) MergeVolumeOperationType(v VolumeOperationType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100OperationOperation1 returns the union data inside the VolumeV1100Operation_Operation as a VolumeV1100OperationOperation1
func (t VolumeV1100Operation_Operation) AsVolumeV1100OperationOperation1() (VolumeV1100OperationOperation1, error) {
	var body VolumeV1100OperationOperation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100OperationOperation1 overwrites any union data inside the VolumeV1100Operation_Operation as the provided VolumeV1100OperationOperation1
func (t *VolumeV1100Operation_Operation) FromVolumeV1100OperationOperation1(v VolumeV1100OperationOperation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100OperationOperation1 performs a merge with any union data inside the VolumeV1100Operation_Operation, using the provided VolumeV1100OperationOperation1
func (t *VolumeV1100Operation_Operation) MergeVolumeV1100OperationOperation1(v VolumeV1100OperationOperation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Operation_Operation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Operation_Operation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeV1100ALUA returns the union data inside the VolumeV1100Volume_ALUA as a VolumeV1100ALUA
func (t VolumeV1100Volume_ALUA) AsVolumeV1100ALUA() (VolumeV1100ALUA, error) {
	var body VolumeV1100ALUA
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100ALUA overwrites any union data inside the VolumeV1100Volume_ALUA as the provided VolumeV1100ALUA
func (t *VolumeV1100Volume_ALUA) FromVolumeV1100ALUA(v VolumeV1100ALUA) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100ALUA performs a merge with any union data inside the VolumeV1100Volume_ALUA, using the provided VolumeV1100ALUA
func (t *VolumeV1100Volume_ALUA) MergeVolumeV1100ALUA(v VolumeV1100ALUA) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeALUA1 returns the union data inside the VolumeV1100Volume_ALUA as a VolumeV1100VolumeALUA1
func (t VolumeV1100Volume_ALUA) AsVolumeV1100VolumeALUA1() (VolumeV1100VolumeALUA1, error) {
	var body VolumeV1100VolumeALUA1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeALUA1 overwrites any union data inside the VolumeV1100Volume_ALUA as the provided VolumeV1100VolumeALUA1
func (t *VolumeV1100Volume_ALUA) FromVolumeV1100VolumeALUA1(v VolumeV1100VolumeALUA1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeALUA1 performs a merge with any union data inside the VolumeV1100Volume_ALUA, using the provided VolumeV1100VolumeALUA1
func (t *VolumeV1100Volume_ALUA) MergeVolumeV1100VolumeALUA1(v VolumeV1100VolumeALUA1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_ALUA) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_ALUA) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataStorageLoSCapabilitiesStorageAccessCapability returns the union data inside the VolumeV1100Volume_AccessCapabilities_Item as a DataStorageLoSCapabilitiesStorageAccessCapability
func (t VolumeV1100Volume_AccessCapabilities_Item) AsDataStorageLoSCapabilitiesStorageAccessCapability() (DataStorageLoSCapabilitiesStorageAccessCapability, error) {
	var body DataStorageLoSCapabilitiesStorageAccessCapability
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataStorageLoSCapabilitiesStorageAccessCapability overwrites any union data inside the VolumeV1100Volume_AccessCapabilities_Item as the provided DataStorageLoSCapabilitiesStorageAccessCapability
func (t *VolumeV1100Volume_AccessCapabilities_Item) FromDataStorageLoSCapabilitiesStorageAccessCapability(v DataStorageLoSCapabilitiesStorageAccessCapability) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataStorageLoSCapabilitiesStorageAccessCapability performs a merge with any union data inside the VolumeV1100Volume_AccessCapabilities_Item, using the provided DataStorageLoSCapabilitiesStorageAccessCapability
func (t *VolumeV1100Volume_AccessCapabilities_Item) MergeDataStorageLoSCapabilitiesStorageAccessCapability(v DataStorageLoSCapabilitiesStorageAccessCapability) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeAccessCapabilities1 returns the union data inside the VolumeV1100Volume_AccessCapabilities_Item as a VolumeV1100VolumeAccessCapabilities1
func (t VolumeV1100Volume_AccessCapabilities_Item) AsVolumeV1100VolumeAccessCapabilities1() (VolumeV1100VolumeAccessCapabilities1, error) {
	var body VolumeV1100VolumeAccessCapabilities1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeAccessCapabilities1 overwrites any union data inside the VolumeV1100Volume_AccessCapabilities_Item as the provided VolumeV1100VolumeAccessCapabilities1
func (t *VolumeV1100Volume_AccessCapabilities_Item) FromVolumeV1100VolumeAccessCapabilities1(v VolumeV1100VolumeAccessCapabilities1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeAccessCapabilities1 performs a merge with any union data inside the VolumeV1100Volume_AccessCapabilities_Item, using the provided VolumeV1100VolumeAccessCapabilities1
func (t *VolumeV1100Volume_AccessCapabilities_Item) MergeVolumeV1100VolumeAccessCapabilities1(v VolumeV1100VolumeAccessCapabilities1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_AccessCapabilities_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_AccessCapabilities_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the VolumeV1100Volume_Description as a ResourceDescription
func (t VolumeV1100Volume_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the VolumeV1100Volume_Description as the provided ResourceDescription
func (t *VolumeV1100Volume_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the VolumeV1100Volume_Description, using the provided ResourceDescription
func (t *VolumeV1100Volume_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeDescription1 returns the union data inside the VolumeV1100Volume_Description as a VolumeV1100VolumeDescription1
func (t VolumeV1100Volume_Description) AsVolumeV1100VolumeDescription1() (VolumeV1100VolumeDescription1, error) {
	var body VolumeV1100VolumeDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeDescription1 overwrites any union data inside the VolumeV1100Volume_Description as the provided VolumeV1100VolumeDescription1
func (t *VolumeV1100Volume_Description) FromVolumeV1100VolumeDescription1(v VolumeV1100VolumeDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeDescription1 performs a merge with any union data inside the VolumeV1100Volume_Description, using the provided VolumeV1100VolumeDescription1
func (t *VolumeV1100Volume_Description) MergeVolumeV1100VolumeDescription1(v VolumeV1100VolumeDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeInitializeMethod returns the union data inside the VolumeV1100Volume_InitializeMethod as a VolumeInitializeMethod
func (t VolumeV1100Volume_InitializeMethod) AsVolumeInitializeMethod() (VolumeInitializeMethod, error) {
	var body VolumeInitializeMethod
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeInitializeMethod overwrites any union data inside the VolumeV1100Volume_InitializeMethod as the provided VolumeInitializeMethod
func (t *VolumeV1100Volume_InitializeMethod) FromVolumeInitializeMethod(v VolumeInitializeMethod) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeInitializeMethod performs a merge with any union data inside the VolumeV1100Volume_InitializeMethod, using the provided VolumeInitializeMethod
func (t *VolumeV1100Volume_InitializeMethod) MergeVolumeInitializeMethod(v VolumeInitializeMethod) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeInitializeMethod1 returns the union data inside the VolumeV1100Volume_InitializeMethod as a VolumeV1100VolumeInitializeMethod1
func (t VolumeV1100Volume_InitializeMethod) AsVolumeV1100VolumeInitializeMethod1() (VolumeV1100VolumeInitializeMethod1, error) {
	var body VolumeV1100VolumeInitializeMethod1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeInitializeMethod1 overwrites any union data inside the VolumeV1100Volume_InitializeMethod as the provided VolumeV1100VolumeInitializeMethod1
func (t *VolumeV1100Volume_InitializeMethod) FromVolumeV1100VolumeInitializeMethod1(v VolumeV1100VolumeInitializeMethod1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeInitializeMethod1 performs a merge with any union data inside the VolumeV1100Volume_InitializeMethod, using the provided VolumeV1100VolumeInitializeMethod1
func (t *VolumeV1100Volume_InitializeMethod) MergeVolumeV1100VolumeInitializeMethod1(v VolumeV1100VolumeInitializeMethod1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_InitializeMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_InitializeMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeV1100NVMeNamespaceProperties returns the union data inside the VolumeV1100Volume_NVMeNamespaceProperties as a VolumeV1100NVMeNamespaceProperties
func (t VolumeV1100Volume_NVMeNamespaceProperties) AsVolumeV1100NVMeNamespaceProperties() (VolumeV1100NVMeNamespaceProperties, error) {
	var body VolumeV1100NVMeNamespaceProperties
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NVMeNamespaceProperties overwrites any union data inside the VolumeV1100Volume_NVMeNamespaceProperties as the provided VolumeV1100NVMeNamespaceProperties
func (t *VolumeV1100Volume_NVMeNamespaceProperties) FromVolumeV1100NVMeNamespaceProperties(v VolumeV1100NVMeNamespaceProperties) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NVMeNamespaceProperties performs a merge with any union data inside the VolumeV1100Volume_NVMeNamespaceProperties, using the provided VolumeV1100NVMeNamespaceProperties
func (t *VolumeV1100Volume_NVMeNamespaceProperties) MergeVolumeV1100NVMeNamespaceProperties(v VolumeV1100NVMeNamespaceProperties) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeNVMeNamespaceProperties1 returns the union data inside the VolumeV1100Volume_NVMeNamespaceProperties as a VolumeV1100VolumeNVMeNamespaceProperties1
func (t VolumeV1100Volume_NVMeNamespaceProperties) AsVolumeV1100VolumeNVMeNamespaceProperties1() (VolumeV1100VolumeNVMeNamespaceProperties1, error) {
	var body VolumeV1100VolumeNVMeNamespaceProperties1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeNVMeNamespaceProperties1 overwrites any union data inside the VolumeV1100Volume_NVMeNamespaceProperties as the provided VolumeV1100VolumeNVMeNamespaceProperties1
func (t *VolumeV1100Volume_NVMeNamespaceProperties) FromVolumeV1100VolumeNVMeNamespaceProperties1(v VolumeV1100VolumeNVMeNamespaceProperties1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeNVMeNamespaceProperties1 performs a merge with any union data inside the VolumeV1100Volume_NVMeNamespaceProperties, using the provided VolumeV1100VolumeNVMeNamespaceProperties1
func (t *VolumeV1100Volume_NVMeNamespaceProperties) MergeVolumeV1100VolumeNVMeNamespaceProperties1(v VolumeV1100VolumeNVMeNamespaceProperties1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_NVMeNamespaceProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_NVMeNamespaceProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataStorageLoSCapabilitiesProvisioningPolicy returns the union data inside the VolumeV1100Volume_ProvisioningPolicy as a DataStorageLoSCapabilitiesProvisioningPolicy
func (t VolumeV1100Volume_ProvisioningPolicy) AsDataStorageLoSCapabilitiesProvisioningPolicy() (DataStorageLoSCapabilitiesProvisioningPolicy, error) {
	var body DataStorageLoSCapabilitiesProvisioningPolicy
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataStorageLoSCapabilitiesProvisioningPolicy overwrites any union data inside the VolumeV1100Volume_ProvisioningPolicy as the provided DataStorageLoSCapabilitiesProvisioningPolicy
func (t *VolumeV1100Volume_ProvisioningPolicy) FromDataStorageLoSCapabilitiesProvisioningPolicy(v DataStorageLoSCapabilitiesProvisioningPolicy) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataStorageLoSCapabilitiesProvisioningPolicy performs a merge with any union data inside the VolumeV1100Volume_ProvisioningPolicy, using the provided DataStorageLoSCapabilitiesProvisioningPolicy
func (t *VolumeV1100Volume_ProvisioningPolicy) MergeDataStorageLoSCapabilitiesProvisioningPolicy(v DataStorageLoSCapabilitiesProvisioningPolicy) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeProvisioningPolicy1 returns the union data inside the VolumeV1100Volume_ProvisioningPolicy as a VolumeV1100VolumeProvisioningPolicy1
func (t VolumeV1100Volume_ProvisioningPolicy) AsVolumeV1100VolumeProvisioningPolicy1() (VolumeV1100VolumeProvisioningPolicy1, error) {
	var body VolumeV1100VolumeProvisioningPolicy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeProvisioningPolicy1 overwrites any union data inside the VolumeV1100Volume_ProvisioningPolicy as the provided VolumeV1100VolumeProvisioningPolicy1
func (t *VolumeV1100Volume_ProvisioningPolicy) FromVolumeV1100VolumeProvisioningPolicy1(v VolumeV1100VolumeProvisioningPolicy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeProvisioningPolicy1 performs a merge with any union data inside the VolumeV1100Volume_ProvisioningPolicy, using the provided VolumeV1100VolumeProvisioningPolicy1
func (t *VolumeV1100Volume_ProvisioningPolicy) MergeVolumeV1100VolumeProvisioningPolicy1(v VolumeV1100VolumeProvisioningPolicy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_ProvisioningPolicy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_ProvisioningPolicy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeRAIDType returns the union data inside the VolumeV1100Volume_RAIDType as a VolumeRAIDType
func (t VolumeV1100Volume_RAIDType) AsVolumeRAIDType() (VolumeRAIDType, error) {
	var body VolumeRAIDType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeRAIDType overwrites any union data inside the VolumeV1100Volume_RAIDType as the provided VolumeRAIDType
func (t *VolumeV1100Volume_RAIDType) FromVolumeRAIDType(v VolumeRAIDType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeRAIDType performs a merge with any union data inside the VolumeV1100Volume_RAIDType, using the provided VolumeRAIDType
func (t *VolumeV1100Volume_RAIDType) MergeVolumeRAIDType(v VolumeRAIDType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeRAIDType1 returns the union data inside the VolumeV1100Volume_RAIDType as a VolumeV1100VolumeRAIDType1
func (t VolumeV1100Volume_RAIDType) AsVolumeV1100VolumeRAIDType1() (VolumeV1100VolumeRAIDType1, error) {
	var body VolumeV1100VolumeRAIDType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeRAIDType1 overwrites any union data inside the VolumeV1100Volume_RAIDType as the provided VolumeV1100VolumeRAIDType1
func (t *VolumeV1100Volume_RAIDType) FromVolumeV1100VolumeRAIDType1(v VolumeV1100VolumeRAIDType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeRAIDType1 performs a merge with any union data inside the VolumeV1100Volume_RAIDType, using the provided VolumeV1100VolumeRAIDType1
func (t *VolumeV1100Volume_RAIDType) MergeVolumeV1100VolumeRAIDType1(v VolumeV1100VolumeRAIDType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_RAIDType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_RAIDType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeReadCachePolicyType returns the union data inside the VolumeV1100Volume_ReadCachePolicy as a VolumeReadCachePolicyType
func (t VolumeV1100Volume_ReadCachePolicy) AsVolumeReadCachePolicyType() (VolumeReadCachePolicyType, error) {
	var body VolumeReadCachePolicyType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeReadCachePolicyType overwrites any union data inside the VolumeV1100Volume_ReadCachePolicy as the provided VolumeReadCachePolicyType
func (t *VolumeV1100Volume_ReadCachePolicy) FromVolumeReadCachePolicyType(v VolumeReadCachePolicyType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeReadCachePolicyType performs a merge with any union data inside the VolumeV1100Volume_ReadCachePolicy, using the provided VolumeReadCachePolicyType
func (t *VolumeV1100Volume_ReadCachePolicy) MergeVolumeReadCachePolicyType(v VolumeReadCachePolicyType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeReadCachePolicy1 returns the union data inside the VolumeV1100Volume_ReadCachePolicy as a VolumeV1100VolumeReadCachePolicy1
func (t VolumeV1100Volume_ReadCachePolicy) AsVolumeV1100VolumeReadCachePolicy1() (VolumeV1100VolumeReadCachePolicy1, error) {
	var body VolumeV1100VolumeReadCachePolicy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeReadCachePolicy1 overwrites any union data inside the VolumeV1100Volume_ReadCachePolicy as the provided VolumeV1100VolumeReadCachePolicy1
func (t *VolumeV1100Volume_ReadCachePolicy) FromVolumeV1100VolumeReadCachePolicy1(v VolumeV1100VolumeReadCachePolicy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeReadCachePolicy1 performs a merge with any union data inside the VolumeV1100Volume_ReadCachePolicy, using the provided VolumeV1100VolumeReadCachePolicy1
func (t *VolumeV1100Volume_ReadCachePolicy) MergeVolumeV1100VolumeReadCachePolicy1(v VolumeV1100VolumeReadCachePolicy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_ReadCachePolicy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_ReadCachePolicy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeVolumeType returns the union data inside the VolumeV1100Volume_VolumeType as a VolumeVolumeType
func (t VolumeV1100Volume_VolumeType) AsVolumeVolumeType() (VolumeVolumeType, error) {
	var body VolumeVolumeType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeVolumeType overwrites any union data inside the VolumeV1100Volume_VolumeType as the provided VolumeVolumeType
func (t *VolumeV1100Volume_VolumeType) FromVolumeVolumeType(v VolumeVolumeType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeVolumeType performs a merge with any union data inside the VolumeV1100Volume_VolumeType, using the provided VolumeVolumeType
func (t *VolumeV1100Volume_VolumeType) MergeVolumeVolumeType(v VolumeVolumeType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeVolumeType1 returns the union data inside the VolumeV1100Volume_VolumeType as a VolumeV1100VolumeVolumeType1
func (t VolumeV1100Volume_VolumeType) AsVolumeV1100VolumeVolumeType1() (VolumeV1100VolumeVolumeType1, error) {
	var body VolumeV1100VolumeVolumeType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeVolumeType1 overwrites any union data inside the VolumeV1100Volume_VolumeType as the provided VolumeV1100VolumeVolumeType1
func (t *VolumeV1100Volume_VolumeType) FromVolumeV1100VolumeVolumeType1(v VolumeV1100VolumeVolumeType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeVolumeType1 performs a merge with any union data inside the VolumeV1100Volume_VolumeType, using the provided VolumeV1100VolumeVolumeType1
func (t *VolumeV1100Volume_VolumeType) MergeVolumeV1100VolumeVolumeType1(v VolumeV1100VolumeVolumeType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_VolumeType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_VolumeType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeVolumeUsageType returns the union data inside the VolumeV1100Volume_VolumeUsage as a VolumeVolumeUsageType
func (t VolumeV1100Volume_VolumeUsage) AsVolumeVolumeUsageType() (VolumeVolumeUsageType, error) {
	var body VolumeVolumeUsageType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeVolumeUsageType overwrites any union data inside the VolumeV1100Volume_VolumeUsage as the provided VolumeVolumeUsageType
func (t *VolumeV1100Volume_VolumeUsage) FromVolumeVolumeUsageType(v VolumeVolumeUsageType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeVolumeUsageType performs a merge with any union data inside the VolumeV1100Volume_VolumeUsage, using the provided VolumeVolumeUsageType
func (t *VolumeV1100Volume_VolumeUsage) MergeVolumeVolumeUsageType(v VolumeVolumeUsageType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeVolumeUsage1 returns the union data inside the VolumeV1100Volume_VolumeUsage as a VolumeV1100VolumeVolumeUsage1
func (t VolumeV1100Volume_VolumeUsage) AsVolumeV1100VolumeVolumeUsage1() (VolumeV1100VolumeVolumeUsage1, error) {
	var body VolumeV1100VolumeVolumeUsage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeVolumeUsage1 overwrites any union data inside the VolumeV1100Volume_VolumeUsage as the provided VolumeV1100VolumeVolumeUsage1
func (t *VolumeV1100Volume_VolumeUsage) FromVolumeV1100VolumeVolumeUsage1(v VolumeV1100VolumeVolumeUsage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeVolumeUsage1 performs a merge with any union data inside the VolumeV1100Volume_VolumeUsage, using the provided VolumeV1100VolumeVolumeUsage1
func (t *VolumeV1100Volume_VolumeUsage) MergeVolumeV1100VolumeVolumeUsage1(v VolumeV1100VolumeVolumeUsage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_VolumeUsage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_VolumeUsage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeWriteCachePolicyType returns the union data inside the VolumeV1100Volume_WriteCachePolicy as a VolumeWriteCachePolicyType
func (t VolumeV1100Volume_WriteCachePolicy) AsVolumeWriteCachePolicyType() (VolumeWriteCachePolicyType, error) {
	var body VolumeWriteCachePolicyType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeWriteCachePolicyType overwrites any union data inside the VolumeV1100Volume_WriteCachePolicy as the provided VolumeWriteCachePolicyType
func (t *VolumeV1100Volume_WriteCachePolicy) FromVolumeWriteCachePolicyType(v VolumeWriteCachePolicyType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeWriteCachePolicyType performs a merge with any union data inside the VolumeV1100Volume_WriteCachePolicy, using the provided VolumeWriteCachePolicyType
func (t *VolumeV1100Volume_WriteCachePolicy) MergeVolumeWriteCachePolicyType(v VolumeWriteCachePolicyType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeWriteCachePolicy1 returns the union data inside the VolumeV1100Volume_WriteCachePolicy as a VolumeV1100VolumeWriteCachePolicy1
func (t VolumeV1100Volume_WriteCachePolicy) AsVolumeV1100VolumeWriteCachePolicy1() (VolumeV1100VolumeWriteCachePolicy1, error) {
	var body VolumeV1100VolumeWriteCachePolicy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeWriteCachePolicy1 overwrites any union data inside the VolumeV1100Volume_WriteCachePolicy as the provided VolumeV1100VolumeWriteCachePolicy1
func (t *VolumeV1100Volume_WriteCachePolicy) FromVolumeV1100VolumeWriteCachePolicy1(v VolumeV1100VolumeWriteCachePolicy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeWriteCachePolicy1 performs a merge with any union data inside the VolumeV1100Volume_WriteCachePolicy, using the provided VolumeV1100VolumeWriteCachePolicy1
func (t *VolumeV1100Volume_WriteCachePolicy) MergeVolumeV1100VolumeWriteCachePolicy1(v VolumeV1100VolumeWriteCachePolicy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_WriteCachePolicy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_WriteCachePolicy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeWriteCacheStateType returns the union data inside the VolumeV1100Volume_WriteCacheState as a VolumeWriteCacheStateType
func (t VolumeV1100Volume_WriteCacheState) AsVolumeWriteCacheStateType() (VolumeWriteCacheStateType, error) {
	var body VolumeWriteCacheStateType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeWriteCacheStateType overwrites any union data inside the VolumeV1100Volume_WriteCacheState as the provided VolumeWriteCacheStateType
func (t *VolumeV1100Volume_WriteCacheState) FromVolumeWriteCacheStateType(v VolumeWriteCacheStateType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeWriteCacheStateType performs a merge with any union data inside the VolumeV1100Volume_WriteCacheState, using the provided VolumeWriteCacheStateType
func (t *VolumeV1100Volume_WriteCacheState) MergeVolumeWriteCacheStateType(v VolumeWriteCacheStateType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeWriteCacheState1 returns the union data inside the VolumeV1100Volume_WriteCacheState as a VolumeV1100VolumeWriteCacheState1
func (t VolumeV1100Volume_WriteCacheState) AsVolumeV1100VolumeWriteCacheState1() (VolumeV1100VolumeWriteCacheState1, error) {
	var body VolumeV1100VolumeWriteCacheState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeWriteCacheState1 overwrites any union data inside the VolumeV1100Volume_WriteCacheState as the provided VolumeV1100VolumeWriteCacheState1
func (t *VolumeV1100Volume_WriteCacheState) FromVolumeV1100VolumeWriteCacheState1(v VolumeV1100VolumeWriteCacheState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeWriteCacheState1 performs a merge with any union data inside the VolumeV1100Volume_WriteCacheState, using the provided VolumeV1100VolumeWriteCacheState1
func (t *VolumeV1100Volume_WriteCacheState) MergeVolumeV1100VolumeWriteCacheState1(v VolumeV1100VolumeWriteCacheState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_WriteCacheState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_WriteCacheState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
