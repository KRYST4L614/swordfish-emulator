// Package domain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package domain

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ActionInfoV142ParameterTypes.
const (
	ActionInfoV142ParameterTypesBoolean     ActionInfoV142ParameterTypes = "Boolean"
	ActionInfoV142ParameterTypesNumber      ActionInfoV142ParameterTypes = "Number"
	ActionInfoV142ParameterTypesNumberArray ActionInfoV142ParameterTypes = "NumberArray"
	ActionInfoV142ParameterTypesObject      ActionInfoV142ParameterTypes = "Object"
	ActionInfoV142ParameterTypesObjectArray ActionInfoV142ParameterTypes = "ObjectArray"
	ActionInfoV142ParameterTypesString      ActionInfoV142ParameterTypes = "String"
	ActionInfoV142ParameterTypesStringArray ActionInfoV142ParameterTypes = "StringArray"
)

// Defines values for ChassisV1250ChassisType.
const (
	Blade            ChassisV1250ChassisType = "Blade"
	Card             ChassisV1250ChassisType = "Card"
	Cartridge        ChassisV1250ChassisType = "Cartridge"
	Component        ChassisV1250ChassisType = "Component"
	Drawer           ChassisV1250ChassisType = "Drawer"
	Enclosure        ChassisV1250ChassisType = "Enclosure"
	Expansion        ChassisV1250ChassisType = "Expansion"
	HeatExchanger    ChassisV1250ChassisType = "HeatExchanger"
	IPBasedDrive     ChassisV1250ChassisType = "IPBasedDrive"
	ImmersionTank    ChassisV1250ChassisType = "ImmersionTank"
	Module           ChassisV1250ChassisType = "Module"
	Other            ChassisV1250ChassisType = "Other"
	Pod              ChassisV1250ChassisType = "Pod"
	PowerStrip       ChassisV1250ChassisType = "PowerStrip"
	Rack             ChassisV1250ChassisType = "Rack"
	RackGroup        ChassisV1250ChassisType = "RackGroup"
	RackMount        ChassisV1250ChassisType = "RackMount"
	Row              ChassisV1250ChassisType = "Row"
	Shelf            ChassisV1250ChassisType = "Shelf"
	Sidecar          ChassisV1250ChassisType = "Sidecar"
	Sled             ChassisV1250ChassisType = "Sled"
	StandAlone       ChassisV1250ChassisType = "StandAlone"
	StorageEnclosure ChassisV1250ChassisType = "StorageEnclosure"
	Zone             ChassisV1250ChassisType = "Zone"
)

// Defines values for ChassisV1250DoorState.
const (
	Closed        ChassisV1250DoorState = "Closed"
	Locked        ChassisV1250DoorState = "Locked"
	LockedAndOpen ChassisV1250DoorState = "LockedAndOpen"
	Open          ChassisV1250DoorState = "Open"
)

// Defines values for ChassisV1250EnvironmentalClass.
const (
	A1 ChassisV1250EnvironmentalClass = "A1"
	A2 ChassisV1250EnvironmentalClass = "A2"
	A3 ChassisV1250EnvironmentalClass = "A3"
	A4 ChassisV1250EnvironmentalClass = "A4"
)

// Defines values for ChassisV1250IndicatorLED.
const (
	ChassisV1250IndicatorLEDBlinking ChassisV1250IndicatorLED = "Blinking"
	ChassisV1250IndicatorLEDLit      ChassisV1250IndicatorLED = "Lit"
	ChassisV1250IndicatorLEDOff      ChassisV1250IndicatorLED = "Off"
	ChassisV1250IndicatorLEDUnknown  ChassisV1250IndicatorLED = "Unknown"
)

// Defines values for ChassisV1250IntrusionSensor.
const (
	HardwareIntrusion ChassisV1250IntrusionSensor = "HardwareIntrusion"
	Normal            ChassisV1250IntrusionSensor = "Normal"
	TamperingDetected ChassisV1250IntrusionSensor = "TamperingDetected"
)

// Defines values for ChassisV1250IntrusionSensorReArm.
const (
	ChassisV1250IntrusionSensorReArmAutomatic ChassisV1250IntrusionSensorReArm = "Automatic"
	ChassisV1250IntrusionSensorReArmManual    ChassisV1250IntrusionSensorReArm = "Manual"
)

// Defines values for ChassisV1250ThermalDirection.
const (
	ChassisV1250ThermalDirectionBackToFront ChassisV1250ThermalDirection = "BackToFront"
	ChassisV1250ThermalDirectionFrontToBack ChassisV1250ThermalDirection = "FrontToBack"
	ChassisV1250ThermalDirectionSealed      ChassisV1250ThermalDirection = "Sealed"
	ChassisV1250ThermalDirectionTopExhaust  ChassisV1250ThermalDirection = "TopExhaust"
)

// Defines values for DataStorageLoSCapabilitiesProvisioningPolicy.
const (
	Fixed DataStorageLoSCapabilitiesProvisioningPolicy = "Fixed"
	Thin  DataStorageLoSCapabilitiesProvisioningPolicy = "Thin"
)

// Defines values for DataStorageLoSCapabilitiesStorageAccessCapability.
const (
	Append    DataStorageLoSCapabilitiesStorageAccessCapability = "Append"
	Execute   DataStorageLoSCapabilitiesStorageAccessCapability = "Execute"
	Read      DataStorageLoSCapabilitiesStorageAccessCapability = "Read"
	Streaming DataStorageLoSCapabilitiesStorageAccessCapability = "Streaming"
	Write     DataStorageLoSCapabilitiesStorageAccessCapability = "Write"
	WriteOnce DataStorageLoSCapabilitiesStorageAccessCapability = "WriteOnce"
)

// Defines values for PCIeDevicePCIeTypes.
const (
	Gen1 PCIeDevicePCIeTypes = "Gen1"
	Gen2 PCIeDevicePCIeTypes = "Gen2"
	Gen3 PCIeDevicePCIeTypes = "Gen3"
	Gen4 PCIeDevicePCIeTypes = "Gen4"
	Gen5 PCIeDevicePCIeTypes = "Gen5"
	Gen6 PCIeDevicePCIeTypes = "Gen6"
)

// Defines values for ProtocolProtocol.
const (
	ProtocolProtocolAHCI            ProtocolProtocol = "AHCI"
	ProtocolProtocolCXL             ProtocolProtocol = "CXL"
	ProtocolProtocolDVI             ProtocolProtocol = "DVI"
	ProtocolProtocolDisplayPort     ProtocolProtocol = "DisplayPort"
	ProtocolProtocolEMMC            ProtocolProtocol = "eMMC"
	ProtocolProtocolEthernet        ProtocolProtocol = "Ethernet"
	ProtocolProtocolFC              ProtocolProtocol = "FC"
	ProtocolProtocolFCP             ProtocolProtocol = "FCP"
	ProtocolProtocolFCoE            ProtocolProtocol = "FCoE"
	ProtocolProtocolFICON           ProtocolProtocol = "FICON"
	ProtocolProtocolFTP             ProtocolProtocol = "FTP"
	ProtocolProtocolGenZ            ProtocolProtocol = "GenZ"
	ProtocolProtocolHDMI            ProtocolProtocol = "HDMI"
	ProtocolProtocolHTTP            ProtocolProtocol = "HTTP"
	ProtocolProtocolHTTPS           ProtocolProtocol = "HTTPS"
	ProtocolProtocolI2C             ProtocolProtocol = "I2C"
	ProtocolProtocolISCSI           ProtocolProtocol = "iSCSI"
	ProtocolProtocolIWARP           ProtocolProtocol = "iWARP"
	ProtocolProtocolInfiniBand      ProtocolProtocol = "InfiniBand"
	ProtocolProtocolMultiProtocol   ProtocolProtocol = "MultiProtocol"
	ProtocolProtocolNFSv3           ProtocolProtocol = "NFSv3"
	ProtocolProtocolNFSv4           ProtocolProtocol = "NFSv4"
	ProtocolProtocolNVLink          ProtocolProtocol = "NVLink"
	ProtocolProtocolNVMe            ProtocolProtocol = "NVMe"
	ProtocolProtocolNVMeOverFabrics ProtocolProtocol = "NVMeOverFabrics"
	ProtocolProtocolOEM             ProtocolProtocol = "OEM"
	ProtocolProtocolPCIe            ProtocolProtocol = "PCIe"
	ProtocolProtocolQPI             ProtocolProtocol = "QPI"
	ProtocolProtocolRoCE            ProtocolProtocol = "RoCE"
	ProtocolProtocolRoCEv2          ProtocolProtocol = "RoCEv2"
	ProtocolProtocolSAS             ProtocolProtocol = "SAS"
	ProtocolProtocolSATA            ProtocolProtocol = "SATA"
	ProtocolProtocolSFTP            ProtocolProtocol = "SFTP"
	ProtocolProtocolSMB             ProtocolProtocol = "SMB"
	ProtocolProtocolTCP             ProtocolProtocol = "TCP"
	ProtocolProtocolTFTP            ProtocolProtocol = "TFTP"
	ProtocolProtocolUDP             ProtocolProtocol = "UDP"
	ProtocolProtocolUHCI            ProtocolProtocol = "UHCI"
	ProtocolProtocolUPI             ProtocolProtocol = "UPI"
	ProtocolProtocolUSB             ProtocolProtocol = "USB"
	ProtocolProtocolVGA             ProtocolProtocol = "VGA"
)

// Defines values for RedundancyV142RedundancyMode.
const (
	Failover     RedundancyV142RedundancyMode = "Failover"
	NM           RedundancyV142RedundancyMode = "N+m"
	NotRedundant RedundancyV142RedundancyMode = "NotRedundant"
	Sharing      RedundancyV142RedundancyMode = "Sharing"
	Sparing      RedundancyV142RedundancyMode = "Sparing"
)

// Defines values for ResolutionStepV101ResolutionType.
const (
	ResolutionStepV101ResolutionTypeCollectDiagnosticData ResolutionStepV101ResolutionType = "CollectDiagnosticData"
	ResolutionStepV101ResolutionTypeContactVendor         ResolutionStepV101ResolutionType = "ContactVendor"
	ResolutionStepV101ResolutionTypeFirmwareUpdate        ResolutionStepV101ResolutionType = "FirmwareUpdate"
	ResolutionStepV101ResolutionTypeOEM                   ResolutionStepV101ResolutionType = "OEM"
	ResolutionStepV101ResolutionTypePowerCycle            ResolutionStepV101ResolutionType = "PowerCycle"
	ResolutionStepV101ResolutionTypeReplaceComponent      ResolutionStepV101ResolutionType = "ReplaceComponent"
	ResolutionStepV101ResolutionTypeReset                 ResolutionStepV101ResolutionType = "Reset"
	ResolutionStepV101ResolutionTypeResetToDefaults       ResolutionStepV101ResolutionType = "ResetToDefaults"
)

// Defines values for ResourceHealth.
const (
	Critical ResourceHealth = "Critical"
	OK       ResourceHealth = "OK"
	Warning  ResourceHealth = "Warning"
)

// Defines values for ResourcePowerState.
const (
	ResourcePowerStateOff         ResourcePowerState = "Off"
	ResourcePowerStateOn          ResourcePowerState = "On"
	ResourcePowerStatePaused      ResourcePowerState = "Paused"
	ResourcePowerStatePoweringOff ResourcePowerState = "PoweringOff"
	ResourcePowerStatePoweringOn  ResourcePowerState = "PoweringOn"
)

// Defines values for ResourceState.
const (
	ResourceStateAbsent             ResourceState = "Absent"
	ResourceStateDeferring          ResourceState = "Deferring"
	ResourceStateDegraded           ResourceState = "Degraded"
	ResourceStateDisabled           ResourceState = "Disabled"
	ResourceStateEnabled            ResourceState = "Enabled"
	ResourceStateInTest             ResourceState = "InTest"
	ResourceStateQualified          ResourceState = "Qualified"
	ResourceStateQuiesced           ResourceState = "Quiesced"
	ResourceStateStandbyOffline     ResourceState = "StandbyOffline"
	ResourceStateStandbySpare       ResourceState = "StandbySpare"
	ResourceStateStarting           ResourceState = "Starting"
	ResourceStateUnavailableOffline ResourceState = "UnavailableOffline"
	ResourceStateUpdating           ResourceState = "Updating"
)

// Defines values for ResourceV1200DurableNameFormat.
const (
	EUI        ResourceV1200DurableNameFormat = "EUI"
	FCWWN      ResourceV1200DurableNameFormat = "FC_WWN"
	GCXLID     ResourceV1200DurableNameFormat = "GCXLID"
	IQN        ResourceV1200DurableNameFormat = "iQN"
	MACAddress ResourceV1200DurableNameFormat = "MACAddress"
	NAA        ResourceV1200DurableNameFormat = "NAA"
	NGUID      ResourceV1200DurableNameFormat = "NGUID"
	NQN        ResourceV1200DurableNameFormat = "NQN"
	NSID       ResourceV1200DurableNameFormat = "NSID"
	UUID       ResourceV1200DurableNameFormat = "UUID"
)

// Defines values for ResourceV1200LocationType.
const (
	Backplane ResourceV1200LocationType = "Backplane"
	Bay       ResourceV1200LocationType = "Bay"
	Connector ResourceV1200LocationType = "Connector"
	Embedded  ResourceV1200LocationType = "Embedded"
	Slot      ResourceV1200LocationType = "Slot"
	Socket    ResourceV1200LocationType = "Socket"
)

// Defines values for ResourceV1200Orientation.
const (
	ResourceV1200OrientationBackToFront ResourceV1200Orientation = "BackToFront"
	ResourceV1200OrientationBottomToTop ResourceV1200Orientation = "BottomToTop"
	ResourceV1200OrientationFrontToBack ResourceV1200Orientation = "FrontToBack"
	ResourceV1200OrientationLeftToRight ResourceV1200Orientation = "LeftToRight"
	ResourceV1200OrientationRightToLeft ResourceV1200Orientation = "RightToLeft"
	ResourceV1200OrientationTopToBottom ResourceV1200Orientation = "TopToBottom"
)

// Defines values for ResourceV1200RackUnits.
const (
	EIA310 ResourceV1200RackUnits = "EIA_310"
	OpenU  ResourceV1200RackUnits = "OpenU"
)

// Defines values for ResourceV1200Reference.
const (
	Bottom ResourceV1200Reference = "Bottom"
	Front  ResourceV1200Reference = "Front"
	Left   ResourceV1200Reference = "Left"
	Middle ResourceV1200Reference = "Middle"
	Rear   ResourceV1200Reference = "Rear"
	Right  ResourceV1200Reference = "Right"
	Top    ResourceV1200Reference = "Top"
)

// Defines values for StoragePoolNVMePoolType.
const (
	EnduranceGroup StoragePoolNVMePoolType = "EnduranceGroup"
	NVMSet         StoragePoolNVMePoolType = "NVMSet"
)

// Defines values for StoragePoolPoolType.
const (
	StoragePoolPoolTypeBlock  StoragePoolPoolType = "Block"
	StoragePoolPoolTypeFile   StoragePoolPoolType = "File"
	StoragePoolPoolTypeObject StoragePoolPoolType = "Object"
	StoragePoolPoolTypePool   StoragePoolPoolType = "Pool"
)

// Defines values for StorageReplicaInfoReplicaFaultDomain.
const (
	Local  StorageReplicaInfoReplicaFaultDomain = "Local"
	Remote StorageReplicaInfoReplicaFaultDomain = "Remote"
)

// Defines values for StorageReplicaInfoReplicaType.
const (
	Clone          StorageReplicaInfoReplicaType = "Clone"
	Mirror         StorageReplicaInfoReplicaType = "Mirror"
	Snapshot       StorageReplicaInfoReplicaType = "Snapshot"
	TokenizedClone StorageReplicaInfoReplicaType = "TokenizedClone"
)

// Defines values for StorageReplicaInfoReplicaUpdateMode.
const (
	Active       StorageReplicaInfoReplicaUpdateMode = "Active"
	Adaptive     StorageReplicaInfoReplicaUpdateMode = "Adaptive"
	Asynchronous StorageReplicaInfoReplicaUpdateMode = "Asynchronous"
	Synchronous  StorageReplicaInfoReplicaUpdateMode = "Synchronous"
)

// Defines values for StorageReplicaInfoV140ConsistencyState.
const (
	Consistent   StorageReplicaInfoV140ConsistencyState = "Consistent"
	Inconsistent StorageReplicaInfoV140ConsistencyState = "Inconsistent"
)

// Defines values for StorageReplicaInfoV140ConsistencyStatus.
const (
	StorageReplicaInfoV140ConsistencyStatusConsistent StorageReplicaInfoV140ConsistencyStatus = "Consistent"
	StorageReplicaInfoV140ConsistencyStatusDisabled   StorageReplicaInfoV140ConsistencyStatus = "Disabled"
	StorageReplicaInfoV140ConsistencyStatusInError    StorageReplicaInfoV140ConsistencyStatus = "InError"
	StorageReplicaInfoV140ConsistencyStatusInProgress StorageReplicaInfoV140ConsistencyStatus = "InProgress"
)

// Defines values for StorageReplicaInfoV140ConsistencyType.
const (
	SequentiallyConsistent StorageReplicaInfoV140ConsistencyType = "SequentiallyConsistent"
)

// Defines values for StorageReplicaInfoV140ReplicaPriority.
const (
	High   StorageReplicaInfoV140ReplicaPriority = "High"
	Low    StorageReplicaInfoV140ReplicaPriority = "Low"
	Same   StorageReplicaInfoV140ReplicaPriority = "Same"
	Urgent StorageReplicaInfoV140ReplicaPriority = "Urgent"
)

// Defines values for StorageReplicaInfoV140ReplicaProgressStatus.
const (
	StorageReplicaInfoV140ReplicaProgressStatusAborting         StorageReplicaInfoV140ReplicaProgressStatus = "Aborting"
	StorageReplicaInfoV140ReplicaProgressStatusCompleted        StorageReplicaInfoV140ReplicaProgressStatus = "Completed"
	StorageReplicaInfoV140ReplicaProgressStatusDetaching        StorageReplicaInfoV140ReplicaProgressStatus = "Detaching"
	StorageReplicaInfoV140ReplicaProgressStatusDormant          StorageReplicaInfoV140ReplicaProgressStatus = "Dormant"
	StorageReplicaInfoV140ReplicaProgressStatusFailingBack      StorageReplicaInfoV140ReplicaProgressStatus = "FailingBack"
	StorageReplicaInfoV140ReplicaProgressStatusFailingOver      StorageReplicaInfoV140ReplicaProgressStatus = "FailingOver"
	StorageReplicaInfoV140ReplicaProgressStatusFracturing       StorageReplicaInfoV140ReplicaProgressStatus = "Fracturing"
	StorageReplicaInfoV140ReplicaProgressStatusInitializing     StorageReplicaInfoV140ReplicaProgressStatus = "Initializing"
	StorageReplicaInfoV140ReplicaProgressStatusMixed            StorageReplicaInfoV140ReplicaProgressStatus = "Mixed"
	StorageReplicaInfoV140ReplicaProgressStatusPending          StorageReplicaInfoV140ReplicaProgressStatus = "Pending"
	StorageReplicaInfoV140ReplicaProgressStatusPreparing        StorageReplicaInfoV140ReplicaProgressStatus = "Preparing"
	StorageReplicaInfoV140ReplicaProgressStatusRequiresActivate StorageReplicaInfoV140ReplicaProgressStatus = "RequiresActivate"
	StorageReplicaInfoV140ReplicaProgressStatusRequiresDetach   StorageReplicaInfoV140ReplicaProgressStatus = "RequiresDetach"
	StorageReplicaInfoV140ReplicaProgressStatusRequiresFracture StorageReplicaInfoV140ReplicaProgressStatus = "RequiresFracture"
	StorageReplicaInfoV140ReplicaProgressStatusRequiresResume   StorageReplicaInfoV140ReplicaProgressStatus = "RequiresResume"
	StorageReplicaInfoV140ReplicaProgressStatusRequiresResync   StorageReplicaInfoV140ReplicaProgressStatus = "RequiresResync"
	StorageReplicaInfoV140ReplicaProgressStatusRequiresSplit    StorageReplicaInfoV140ReplicaProgressStatus = "RequiresSplit"
	StorageReplicaInfoV140ReplicaProgressStatusRestoring        StorageReplicaInfoV140ReplicaProgressStatus = "Restoring"
	StorageReplicaInfoV140ReplicaProgressStatusResyncing        StorageReplicaInfoV140ReplicaProgressStatus = "Resyncing"
	StorageReplicaInfoV140ReplicaProgressStatusSplitting        StorageReplicaInfoV140ReplicaProgressStatus = "Splitting"
	StorageReplicaInfoV140ReplicaProgressStatusSuspending       StorageReplicaInfoV140ReplicaProgressStatus = "Suspending"
	StorageReplicaInfoV140ReplicaProgressStatusSynchronizing    StorageReplicaInfoV140ReplicaProgressStatus = "Synchronizing"
	StorageReplicaInfoV140ReplicaProgressStatusTerminating      StorageReplicaInfoV140ReplicaProgressStatus = "Terminating"
)

// Defines values for StorageReplicaInfoV140ReplicaReadOnlyAccess.
const (
	StorageReplicaInfoV140ReplicaReadOnlyAccessBoth           StorageReplicaInfoV140ReplicaReadOnlyAccess = "Both"
	StorageReplicaInfoV140ReplicaReadOnlyAccessReplicaElement StorageReplicaInfoV140ReplicaReadOnlyAccess = "ReplicaElement"
	StorageReplicaInfoV140ReplicaReadOnlyAccessSourceElement  StorageReplicaInfoV140ReplicaReadOnlyAccess = "SourceElement"
)

// Defines values for StorageReplicaInfoV140ReplicaRecoveryMode.
const (
	StorageReplicaInfoV140ReplicaRecoveryModeAutomatic StorageReplicaInfoV140ReplicaRecoveryMode = "Automatic"
	StorageReplicaInfoV140ReplicaRecoveryModeManual    StorageReplicaInfoV140ReplicaRecoveryMode = "Manual"
)

// Defines values for StorageReplicaInfoV140ReplicaRole.
const (
	Source StorageReplicaInfoV140ReplicaRole = "Source"
	Target StorageReplicaInfoV140ReplicaRole = "Target"
)

// Defines values for StorageReplicaInfoV140ReplicaState.
const (
	StorageReplicaInfoV140ReplicaStateAborted        StorageReplicaInfoV140ReplicaState = "Aborted"
	StorageReplicaInfoV140ReplicaStateBroken         StorageReplicaInfoV140ReplicaState = "Broken"
	StorageReplicaInfoV140ReplicaStateFailedover     StorageReplicaInfoV140ReplicaState = "Failedover"
	StorageReplicaInfoV140ReplicaStateFractured      StorageReplicaInfoV140ReplicaState = "Fractured"
	StorageReplicaInfoV140ReplicaStateInactive       StorageReplicaInfoV140ReplicaState = "Inactive"
	StorageReplicaInfoV140ReplicaStateInitialized    StorageReplicaInfoV140ReplicaState = "Initialized"
	StorageReplicaInfoV140ReplicaStateInvalid        StorageReplicaInfoV140ReplicaState = "Invalid"
	StorageReplicaInfoV140ReplicaStateMixed          StorageReplicaInfoV140ReplicaState = "Mixed"
	StorageReplicaInfoV140ReplicaStatePartitioned    StorageReplicaInfoV140ReplicaState = "Partitioned"
	StorageReplicaInfoV140ReplicaStatePrepared       StorageReplicaInfoV140ReplicaState = "Prepared"
	StorageReplicaInfoV140ReplicaStateRestored       StorageReplicaInfoV140ReplicaState = "Restored"
	StorageReplicaInfoV140ReplicaStateSkewed         StorageReplicaInfoV140ReplicaState = "Skewed"
	StorageReplicaInfoV140ReplicaStateSplit          StorageReplicaInfoV140ReplicaState = "Split"
	StorageReplicaInfoV140ReplicaStateSuspended      StorageReplicaInfoV140ReplicaState = "Suspended"
	StorageReplicaInfoV140ReplicaStateSynchronized   StorageReplicaInfoV140ReplicaState = "Synchronized"
	StorageReplicaInfoV140ReplicaStateUnsynchronized StorageReplicaInfoV140ReplicaState = "Unsynchronized"
)

// Defines values for StorageReplicaInfoV140UndiscoveredElement.
const (
	StorageReplicaInfoV140UndiscoveredElementReplicaElement StorageReplicaInfoV140UndiscoveredElement = "ReplicaElement"
	StorageReplicaInfoV140UndiscoveredElementSourceElement  StorageReplicaInfoV140UndiscoveredElement = "SourceElement"
)

// Defines values for StorageV1151AutoVolumeCreate.
const (
	StorageV1151AutoVolumeCreateDisabled StorageV1151AutoVolumeCreate = "Disabled"
	StorageV1151AutoVolumeCreateNonRAID  StorageV1151AutoVolumeCreate = "NonRAID"
	StorageV1151AutoVolumeCreateRAID0    StorageV1151AutoVolumeCreate = "RAID0"
	StorageV1151AutoVolumeCreateRAID1    StorageV1151AutoVolumeCreate = "RAID1"
)

// Defines values for StorageV1151EncryptionMode.
const (
	StorageV1151EncryptionModeDisabled       StorageV1151EncryptionMode = "Disabled"
	StorageV1151EncryptionModeUseExternalKey StorageV1151EncryptionMode = "UseExternalKey"
	StorageV1151EncryptionModeUseLocalKey    StorageV1151EncryptionMode = "UseLocalKey"
)

// Defines values for StorageV1151HotspareActivationPolicy.
const (
	OEM                     StorageV1151HotspareActivationPolicy = "OEM"
	OnDriveFailure          StorageV1151HotspareActivationPolicy = "OnDriveFailure"
	OnDrivePredictedFailure StorageV1151HotspareActivationPolicy = "OnDrivePredictedFailure"
)

// Defines values for VolumeEncryptionTypes.
const (
	ControllerAssisted    VolumeEncryptionTypes = "ControllerAssisted"
	NativeDriveEncryption VolumeEncryptionTypes = "NativeDriveEncryption"
	SoftwareAssisted      VolumeEncryptionTypes = "SoftwareAssisted"
)

// Defines values for VolumeInitializeMethod.
const (
	Background VolumeInitializeMethod = "Background"
	Foreground VolumeInitializeMethod = "Foreground"
	Skip       VolumeInitializeMethod = "Skip"
)

// Defines values for VolumeLBAFormatType.
const (
	LBAFormat0  VolumeLBAFormatType = "LBAFormat0"
	LBAFormat1  VolumeLBAFormatType = "LBAFormat1"
	LBAFormat10 VolumeLBAFormatType = "LBAFormat10"
	LBAFormat11 VolumeLBAFormatType = "LBAFormat11"
	LBAFormat12 VolumeLBAFormatType = "LBAFormat12"
	LBAFormat13 VolumeLBAFormatType = "LBAFormat13"
	LBAFormat14 VolumeLBAFormatType = "LBAFormat14"
	LBAFormat15 VolumeLBAFormatType = "LBAFormat15"
	LBAFormat2  VolumeLBAFormatType = "LBAFormat2"
	LBAFormat3  VolumeLBAFormatType = "LBAFormat3"
	LBAFormat4  VolumeLBAFormatType = "LBAFormat4"
	LBAFormat5  VolumeLBAFormatType = "LBAFormat5"
	LBAFormat6  VolumeLBAFormatType = "LBAFormat6"
	LBAFormat7  VolumeLBAFormatType = "LBAFormat7"
	LBAFormat8  VolumeLBAFormatType = "LBAFormat8"
	LBAFormat9  VolumeLBAFormatType = "LBAFormat9"
)

// Defines values for VolumeLBARelativePerformanceType.
const (
	VolumeLBARelativePerformanceTypeBest     VolumeLBARelativePerformanceType = "Best"
	VolumeLBARelativePerformanceTypeBetter   VolumeLBARelativePerformanceType = "Better"
	VolumeLBARelativePerformanceTypeDegraded VolumeLBARelativePerformanceType = "Degraded"
	VolumeLBARelativePerformanceTypeGood     VolumeLBARelativePerformanceType = "Good"
)

// Defines values for VolumeNamespaceType.
const (
	Block         VolumeNamespaceType = "Block"
	Computational VolumeNamespaceType = "Computational"
	KeyValue      VolumeNamespaceType = "KeyValue"
	ZNS           VolumeNamespaceType = "ZNS"
)

// Defines values for VolumeOperationType.
const (
	ChangeRAIDType   VolumeOperationType = "ChangeRAIDType"
	ChangeStripSize  VolumeOperationType = "ChangeStripSize"
	CheckConsistency VolumeOperationType = "CheckConsistency"
	Compress         VolumeOperationType = "Compress"
	Decrypt          VolumeOperationType = "Decrypt"
	Deduplicate      VolumeOperationType = "Deduplicate"
	Delete           VolumeOperationType = "Delete"
	Encrypt          VolumeOperationType = "Encrypt"
	Format           VolumeOperationType = "Format"
	Initialize       VolumeOperationType = "Initialize"
	Rebuild          VolumeOperationType = "Rebuild"
	Replicate        VolumeOperationType = "Replicate"
	Resize           VolumeOperationType = "Resize"
	Sanitize         VolumeOperationType = "Sanitize"
)

// Defines values for VolumeRAIDType.
const (
	None         VolumeRAIDType = "None"
	RAID0        VolumeRAIDType = "RAID0"
	RAID00       VolumeRAIDType = "RAID00"
	RAID01       VolumeRAIDType = "RAID01"
	RAID1        VolumeRAIDType = "RAID1"
	RAID10       VolumeRAIDType = "RAID10"
	RAID10E      VolumeRAIDType = "RAID10E"
	RAID10Triple VolumeRAIDType = "RAID10Triple"
	RAID1E       VolumeRAIDType = "RAID1E"
	RAID1Triple  VolumeRAIDType = "RAID1Triple"
	RAID3        VolumeRAIDType = "RAID3"
	RAID4        VolumeRAIDType = "RAID4"
	RAID5        VolumeRAIDType = "RAID5"
	RAID50       VolumeRAIDType = "RAID50"
	RAID6        VolumeRAIDType = "RAID6"
	RAID60       VolumeRAIDType = "RAID60"
	RAID6TP      VolumeRAIDType = "RAID6TP"
)

// Defines values for VolumeReadCachePolicyType.
const (
	VolumeReadCachePolicyTypeAdaptiveReadAhead VolumeReadCachePolicyType = "AdaptiveReadAhead"
	VolumeReadCachePolicyTypeOff               VolumeReadCachePolicyType = "Off"
	VolumeReadCachePolicyTypeReadAhead         VolumeReadCachePolicyType = "ReadAhead"
)

// Defines values for VolumeVolumeType.
const (
	Mirrored                 VolumeVolumeType = "Mirrored"
	NonRedundant             VolumeVolumeType = "NonRedundant"
	RawDevice                VolumeVolumeType = "RawDevice"
	SpannedMirrors           VolumeVolumeType = "SpannedMirrors"
	SpannedStripesWithParity VolumeVolumeType = "SpannedStripesWithParity"
	StripedWithParity        VolumeVolumeType = "StripedWithParity"
)

// Defines values for VolumeVolumeUsageType.
const (
	CacheOnly          VolumeVolumeUsageType = "CacheOnly"
	Data               VolumeVolumeUsageType = "Data"
	ReplicationReserve VolumeVolumeUsageType = "ReplicationReserve"
	SystemData         VolumeVolumeUsageType = "SystemData"
	SystemReserve      VolumeVolumeUsageType = "SystemReserve"
)

// Defines values for VolumeWriteCachePolicyType.
const (
	VolumeWriteCachePolicyTypeOff                  VolumeWriteCachePolicyType = "Off"
	VolumeWriteCachePolicyTypeProtectedWriteBack   VolumeWriteCachePolicyType = "ProtectedWriteBack"
	VolumeWriteCachePolicyTypeUnprotectedWriteBack VolumeWriteCachePolicyType = "UnprotectedWriteBack"
	VolumeWriteCachePolicyTypeWriteThrough         VolumeWriteCachePolicyType = "WriteThrough"
)

// Defines values for VolumeWriteCacheStateType.
const (
	VolumeWriteCacheStateTypeDegraded    VolumeWriteCacheStateType = "Degraded"
	VolumeWriteCacheStateTypeProtected   VolumeWriteCacheStateType = "Protected"
	VolumeWriteCacheStateTypeUnprotected VolumeWriteCacheStateType = "Unprotected"
)

// Defines values for VolumeWriteHoleProtectionPolicyType.
const (
	DistributedLog VolumeWriteHoleProtectionPolicyType = "DistributedLog"
	Journaling     VolumeWriteHoleProtectionPolicyType = "Journaling"
	Oem            VolumeWriteHoleProtectionPolicyType = "Oem"
	Off            VolumeWriteHoleProtectionPolicyType = "Off"
)

// ActionInfoV142ParameterTypes defines model for ActionInfo_v1_4_2_ParameterTypes.
type ActionInfoV142ParameterTypes string

// ActionInfoV142Parameters The information about a parameter included in a Redfish action for this resource.
type ActionInfoV142Parameters struct {
	// AllowableNumbers The allowable numeric values or duration values, inclusive ranges of values, and incremental step values for this parameter as applied to this action target.
	AllowableNumbers *[]string `json:"AllowableNumbers,omitempty"`

	// AllowablePattern The allowable pattern for this parameter as applied to this action target.
	AllowablePattern *string `json:"AllowablePattern"`

	// AllowableValueDescriptions Descriptions of allowable values for this parameter.
	AllowableValueDescriptions *[]string `json:"AllowableValueDescriptions,omitempty"`

	// AllowableValues The allowable values for this parameter as applied to this action target.
	AllowableValues *[]string `json:"AllowableValues,omitempty"`

	// ArraySizeMaximum The maximum number of array elements allowed for this parameter.
	ArraySizeMaximum *int64 `json:"ArraySizeMaximum"`

	// ArraySizeMinimum The minimum number of array elements required for this parameter.
	ArraySizeMinimum *int64 `json:"ArraySizeMinimum"`

	// DataType The JSON property type for this parameter.
	DataType *ActionInfoV142Parameters_DataType `json:"DataType,omitempty"`

	// MaximumValue The maximum supported value for this parameter.
	MaximumValue *float32 `json:"MaximumValue"`

	// MinimumValue The minimum supported value for this parameter.
	MinimumValue *float32 `json:"MinimumValue"`

	// Name The name of the parameter for this action.
	Name *string `json:"Name,omitempty"`

	// ObjectDataType The data type of an object-based parameter.
	ObjectDataType *string `json:"ObjectDataType"`

	// Required An indication of whether the parameter is required to complete this action.
	Required *bool `json:"Required,omitempty"`
}

// ActionInfoV142ParametersDataType1 defines model for .
type ActionInfoV142ParametersDataType1 = interface{}

// ActionInfoV142Parameters_DataType The JSON property type for this parameter.
type ActionInfoV142Parameters_DataType struct {
	union json.RawMessage
}

// CapacityV100Capacity This is the schema definition for the Capacity of a device. It represents the properties for capacity for any data store.
type CapacityV100Capacity struct {
	// Data The capacity of specific data type in a data store.
	Data *CapacityV100CapacityInfo `json:"Data,omitempty"`

	// IsThinProvisioned Marks that the capacity is not necessarily fully allocated.
	IsThinProvisioned *bool `json:"IsThinProvisioned"`

	// Metadata The capacity of specific data type in a data store.
	Metadata *CapacityV100CapacityInfo `json:"Metadata,omitempty"`

	// Snapshot The capacity of specific data type in a data store.
	Snapshot *CapacityV100CapacityInfo `json:"Snapshot,omitempty"`
}

// CapacityV100CapacityInfo The capacity of specific data type in a data store.
type CapacityV100CapacityInfo struct {
	// AllocatedBytes The number of bytes currently allocated by the storage system in this data store for this data type.
	AllocatedBytes *int64 `json:"AllocatedBytes"`

	// ConsumedBytes The number of bytes consumed in this data store for this data type.
	ConsumedBytes *int64 `json:"ConsumedBytes"`

	// GuaranteedBytes The number of bytes the storage system guarantees can be allocated in this data store for this data type.
	GuaranteedBytes *int64 `json:"GuaranteedBytes"`

	// ProvisionedBytes The maximum number of bytes that can be allocated in this data store for this data type.
	ProvisionedBytes *int64 `json:"ProvisionedBytes"`
}

// CapacityV121Actions The available actions for this resource.
type CapacityV121Actions struct {
	// Oem The available OEM specific actions for this resource.
	Oem *CapacityV121OemActions `json:"Oem,omitempty"`
}

// CapacityV121Capacity This is the schema definition for the Capacity of a device. It represents the properties for capacity for any data store.
type CapacityV121Capacity struct {
	// Data The capacity of specific data type in a data store.
	Data *CapacityV121CapacityInfo `json:"Data,omitempty"`

	// IsThinProvisioned Marks that the capacity is not necessarily fully allocated.
	IsThinProvisioned *bool `json:"IsThinProvisioned"`

	// Metadata The capacity of specific data type in a data store.
	Metadata *CapacityV121CapacityInfo `json:"Metadata,omitempty"`

	// Snapshot The capacity of specific data type in a data store.
	Snapshot *CapacityV121CapacityInfo `json:"Snapshot,omitempty"`
}

// CapacityV121CapacityInfo The capacity of specific data type in a data store.
type CapacityV121CapacityInfo struct {
	// AllocatedBytes The number of bytes currently allocated by the storage system in this data store for this data type.
	AllocatedBytes *int64 `json:"AllocatedBytes"`

	// ConsumedBytes The number of bytes consumed in this data store for this data type.
	ConsumedBytes *int64 `json:"ConsumedBytes"`

	// GuaranteedBytes The number of bytes the storage system guarantees can be allocated in this data store for this data type.
	GuaranteedBytes *int64 `json:"GuaranteedBytes"`

	// ProvisionedBytes The maximum number of bytes that can be allocated in this data store for this data type.
	ProvisionedBytes *int64 `json:"ProvisionedBytes"`
}

// CapacityV121CapacitySource A description of the type and source of storage.
type CapacityV121CapacitySource struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Actions The available actions for this resource.
	Actions     *CapacityV121Actions                    `json:"Actions,omitempty"`
	Description *CapacityV121CapacitySource_Description `json:"Description,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// ProvidedCapacity This is the schema definition for the Capacity of a device. It represents the properties for capacity for any data store.
	ProvidedCapacity *CapacityV121Capacity `json:"ProvidedCapacity,omitempty"`

	// ProvidedClassOfService A reference to a resource.
	ProvidedClassOfService *OdataV4IdRef `json:"ProvidedClassOfService,omitempty"`

	// ProvidingDrives A reference to a resource.
	ProvidingDrives *OdataV4IdRef `json:"ProvidingDrives,omitempty"`

	// ProvidingMemory A reference to a resource.
	ProvidingMemory *OdataV4IdRef `json:"ProvidingMemory,omitempty"`

	// ProvidingMemoryChunks A reference to a resource.
	ProvidingMemoryChunks *OdataV4IdRef `json:"ProvidingMemoryChunks,omitempty"`

	// ProvidingPools A reference to a resource.
	ProvidingPools *OdataV4IdRef `json:"ProvidingPools,omitempty"`

	// ProvidingVolumes A reference to a resource.
	ProvidingVolumes *OdataV4IdRef `json:"ProvidingVolumes,omitempty"`
}

// CapacityV121CapacitySourceDescription1 defines model for .
type CapacityV121CapacitySourceDescription1 = interface{}

// CapacityV121CapacitySource_Description defines model for CapacityV121CapacitySource.Description.
type CapacityV121CapacitySource_Description struct {
	union json.RawMessage
}

// CapacityV121OemActions The available OEM specific actions for this resource.
type CapacityV121OemActions map[string]interface{}

// Chassis The Chassis schema represents the physical components of a system.  This resource represents the sheet-metal confined spaces and logical zones such as racks, enclosures, chassis and all other containers.  Subsystems, such as sensors, that operate outside of a system's data plane are linked either directly or indirectly through this resource.  A subsystem that operates outside of a system's data plane are not accessible to software that runs on the system.  It also describes the location, such as a slot, socket, or bay, where a unit can be installed, by populating a resource instance with an absent state if a unit is not present.
type Chassis = ChassisV1250Chassis

// ChassisV1250Actions The available actions for this resource.
type ChassisV1250Actions struct {
	// HashChassisReset This action resets the chassis.  Additionally, it could reset systems or other contained resources depending on the ResetType used to invoke this action.
	HashChassisReset *ChassisV1250Reset `json:"#Chassis.Reset,omitempty"`

	// Oem The available OEM-specific actions for this resource.
	Oem *ChassisV1250OemActions `json:"Oem,omitempty"`
}

// ChassisV1250Chassis The Chassis schema represents the physical components of a system.  This resource represents the sheet-metal confined spaces and logical zones such as racks, enclosures, chassis and all other containers.  Subsystems, such as sensors, that operate outside of a system's data plane are linked either directly or indirectly through this resource.  A subsystem that operates outside of a system's data plane are not accessible to software that runs on the system.  It also describes the location, such as a slot, socket, or bay, where a unit can be installed, by populating a resource instance with an absent state if a unit is not present.
type ChassisV1250Chassis struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Actions The available actions for this resource.
	Actions *ChassisV1250Actions `json:"Actions,omitempty"`

	// Assembly A reference to a resource.
	Assembly *OdataV4IdRef `json:"Assembly,omitempty"`

	// AssetTag The user-assigned asset tag of this chassis.
	AssetTag *string `json:"AssetTag"`

	// Certificates A reference to a resource.
	Certificates *OdataV4IdRef           `json:"Certificates,omitempty"`
	ChassisType  ChassisV1250ChassisType `json:"ChassisType"`

	// Controls A reference to a resource.
	Controls *OdataV4IdRef `json:"Controls,omitempty"`

	// DepthMm The depth of the chassis.
	DepthMm *float32 `json:"DepthMm"`

	// Description The description of this resource.  Used for commonality in the schema definitions.
	Description *ResourceDescription `json:"Description,omitempty"`

	// Doors The doors or access panels of the chassis.
	Doors *ChassisV1250Doors `json:"Doors,omitempty"`

	// Drives A reference to a resource.
	Drives *OdataV4IdRef `json:"Drives,omitempty"`

	// ElectricalSourceManagerURIs The URIs of the management interfaces for the external electrical source connections for this chassis.
	ElectricalSourceManagerURIs *[]string `json:"ElectricalSourceManagerURIs,omitempty"`

	// ElectricalSourceNames The names of the external electrical sources, such as circuits or outlets, connected to this chassis.
	ElectricalSourceNames *[]string `json:"ElectricalSourceNames,omitempty"`

	// EnvironmentMetrics A reference to a resource.
	EnvironmentMetrics *OdataV4IdRef                   `json:"EnvironmentMetrics,omitempty"`
	EnvironmentalClass *ChassisV1250EnvironmentalClass `json:"EnvironmentalClass,omitempty"`

	// FabricAdapters A reference to a resource.
	FabricAdapters *OdataV4IdRef `json:"FabricAdapters,omitempty"`

	// HeatingCoolingEquipmentNames The names of the external heating or cooling equipment, such as coolant distribution units, connected to this chassis.
	HeatingCoolingEquipmentNames *[]string `json:"HeatingCoolingEquipmentNames,omitempty"`

	// HeatingCoolingManagerURIs The URIs of the management interfaces for the external heating or cooling equipment for this chassis.
	HeatingCoolingManagerURIs *[]string `json:"HeatingCoolingManagerURIs,omitempty"`

	// HeightMm The height of the chassis.
	HeightMm *float32 `json:"HeightMm"`

	// HotPluggable An indication of whether this component can be inserted or removed while the equipment is in operation.
	HotPluggable *bool `json:"HotPluggable"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id           ResourceId                `json:"Id"`
	IndicatorLED *ChassisV1250IndicatorLED `json:"IndicatorLED,omitempty"`

	// Links The links to other resources that are related to this resource.
	Links *ChassisV1250Links `json:"Links,omitempty"`

	// Location The location of a resource.
	Location *ResourceV1200Location `json:"Location,omitempty"`

	// LocationIndicatorActive An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive"`

	// LogServices A reference to a resource.
	LogServices *OdataV4IdRef `json:"LogServices,omitempty"`

	// Manufacturer The manufacturer of this chassis.
	Manufacturer *string `json:"Manufacturer"`

	// MaxPowerWatts The upper bound of the total power consumed by the chassis.
	MaxPowerWatts *float32 `json:"MaxPowerWatts"`

	// Measurements An array of DSP0274-defined measurement blocks.
	// Deprecated:
	Measurements *[]SoftwareInventoryV1102MeasurementBlock `json:"Measurements,omitempty"`

	// MediaControllers A reference to a resource.
	MediaControllers *OdataV4IdRef `json:"MediaControllers,omitempty"`

	// Memory A reference to a resource.
	Memory *OdataV4IdRef `json:"Memory,omitempty"`

	// MemoryDomains A reference to a resource.
	MemoryDomains *OdataV4IdRef `json:"MemoryDomains,omitempty"`

	// MinPowerWatts The lower bound of the total power consumed by the chassis.
	MinPowerWatts *float32 `json:"MinPowerWatts"`

	// Model The model number of the chassis.
	Model *string `json:"Model"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// NetworkAdapters A reference to a resource.
	NetworkAdapters *OdataV4IdRef `json:"NetworkAdapters,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PCIeDevices A reference to a resource.
	PCIeDevices *OdataV4IdRef `json:"PCIeDevices,omitempty"`

	// PCIeSlots A reference to a resource.
	PCIeSlots *OdataV4IdRef `json:"PCIeSlots,omitempty"`

	// PartNumber The part number of the chassis.
	PartNumber *string `json:"PartNumber"`

	// PhysicalSecurity The physical security state of the chassis.
	PhysicalSecurity *ChassisV1250PhysicalSecurity `json:"PhysicalSecurity,omitempty"`

	// Power A reference to a resource.
	Power      *OdataV4IdRef       `json:"Power,omitempty"`
	PowerState *ResourcePowerState `json:"PowerState,omitempty"`

	// PowerSubsystem A reference to a resource.
	PowerSubsystem *OdataV4IdRef `json:"PowerSubsystem,omitempty"`

	// PoweredByParent Indicates that the chassis receives power from the containing chassis.
	PoweredByParent *bool `json:"PoweredByParent"`

	// Processors A reference to a resource.
	Processors *OdataV4IdRef `json:"Processors,omitempty"`

	// Replaceable An indication of whether this component can be independently replaced as allowed by the vendor's replacement policy.
	Replaceable *bool `json:"Replaceable"`

	// SKU The SKU of the chassis.
	SKU *string `json:"SKU"`

	// Sensors A reference to a resource.
	Sensors *OdataV4IdRef `json:"Sensors,omitempty"`

	// SerialNumber The serial number of the chassis.
	SerialNumber *string `json:"SerialNumber"`

	// SparePartNumber The spare part number of the chassis.
	SparePartNumber *string `json:"SparePartNumber"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// Thermal A reference to a resource.
	Thermal          *OdataV4IdRef                 `json:"Thermal,omitempty"`
	ThermalDirection *ChassisV1250ThermalDirection `json:"ThermalDirection,omitempty"`

	// ThermalManagedByParent Indicates that the chassis is thermally managed by the parent chassis.
	ThermalManagedByParent *bool `json:"ThermalManagedByParent"`

	// ThermalSubsystem A reference to a resource.
	ThermalSubsystem *OdataV4IdRef `json:"ThermalSubsystem,omitempty"`

	// TrustedComponents A reference to a resource.
	TrustedComponents *OdataV4IdRef `json:"TrustedComponents,omitempty"`
	UUID              *ResourceUUID `json:"UUID,omitempty"`

	// Version The hardware version of this chassis.
	Version *string `json:"Version"`

	// WeightKg The weight of the chassis.
	WeightKg *float32 `json:"WeightKg"`

	// WidthMm The width of the chassis.
	WidthMm *float32 `json:"WidthMm"`
}

// ChassisV1250ChassisType defines model for Chassis_v1_25_0_ChassisType.
type ChassisV1250ChassisType string

// ChassisV1250Door A door or access panel on the chassis.
type ChassisV1250Door struct {
	DoorState *ChassisV1250DoorState `json:"DoorState,omitempty"`

	// Locked Indicates if the door is locked.
	Locked *bool `json:"Locked"`

	// UserLabel A user-assigned label.
	UserLabel *string `json:"UserLabel,omitempty"`
}

// ChassisV1250DoorState defines model for Chassis_v1_25_0_DoorState.
type ChassisV1250DoorState string

// ChassisV1250Doors The doors or access panels of the chassis.
type ChassisV1250Doors struct {
	// Front A door or access panel on the chassis.
	Front *ChassisV1250Door `json:"Front,omitempty"`

	// Rear A door or access panel on the chassis.
	Rear *ChassisV1250Door `json:"Rear,omitempty"`
}

// ChassisV1250EnvironmentalClass defines model for Chassis_v1_25_0_EnvironmentalClass.
type ChassisV1250EnvironmentalClass string

// ChassisV1250IndicatorLED defines model for Chassis_v1_25_0_IndicatorLED.
type ChassisV1250IndicatorLED string

// ChassisV1250IntrusionSensor defines model for Chassis_v1_25_0_IntrusionSensor.
type ChassisV1250IntrusionSensor string

// ChassisV1250IntrusionSensorReArm defines model for Chassis_v1_25_0_IntrusionSensorReArm.
type ChassisV1250IntrusionSensorReArm string

// ChassisV1250Links The links to other resources that are related to this resource.
type ChassisV1250Links struct {
	// Cables An array of links to the cables connected to this chassis.
	Cables *[]OdataV4IdRef `json:"Cables,omitempty"`

	// CablesOdataCount The number of items in a collection.
	CablesOdataCount *OdataV4Count `json:"Cables@odata.count,omitempty"`

	// ComputerSystems An array of links to the computer systems that this chassis directly and wholly contains.
	ComputerSystems *[]OdataV4IdRef `json:"ComputerSystems,omitempty"`

	// ComputerSystemsOdataCount The number of items in a collection.
	ComputerSystemsOdataCount *OdataV4Count `json:"ComputerSystems@odata.count,omitempty"`

	// ConnectedCoolingLoops An array of links to cooling loops connected to this chassis.
	ConnectedCoolingLoops *[]OdataV4IdRef `json:"ConnectedCoolingLoops,omitempty"`

	// ConnectedCoolingLoopsOdataCount The number of items in a collection.
	ConnectedCoolingLoopsOdataCount *OdataV4Count `json:"ConnectedCoolingLoops@odata.count,omitempty"`

	// ContainedBy A reference to a resource.
	ContainedBy *OdataV4IdRef `json:"ContainedBy,omitempty"`

	// Contains An array of links to any other chassis that this chassis has in it.
	Contains *[]OdataV4IdRef `json:"Contains,omitempty"`

	// ContainsOdataCount The number of items in a collection.
	ContainsOdataCount *OdataV4Count `json:"Contains@odata.count,omitempty"`

	// CooledBy An array of links to resources or objects that cool this chassis.  Normally, the link is for either a chassis or a specific set of fans.
	// Deprecated:
	CooledBy *[]OdataV4IdRef `json:"CooledBy,omitempty"`

	// CooledByOdataCount The number of items in a collection.
	CooledByOdataCount *OdataV4Count `json:"CooledBy@odata.count,omitempty"`

	// CoolingUnits An array of links to cooling unit functionality contained in this chassis.
	CoolingUnits *[]OdataV4IdRef `json:"CoolingUnits,omitempty"`

	// CoolingUnitsOdataCount The number of items in a collection.
	CoolingUnitsOdataCount *OdataV4Count `json:"CoolingUnits@odata.count,omitempty"`

	// Drives An array of links to the drives located in this chassis.
	Drives *[]OdataV4IdRef `json:"Drives,omitempty"`

	// DrivesOdataCount The number of items in a collection.
	DrivesOdataCount *OdataV4Count `json:"Drives@odata.count,omitempty"`

	// Facility A reference to a resource.
	Facility *OdataV4IdRef `json:"Facility,omitempty"`

	// Fans An array of links to the fans that cool this chassis.
	Fans *[]OdataV4IdRef `json:"Fans,omitempty"`

	// FansOdataCount The number of items in a collection.
	FansOdataCount *OdataV4Count `json:"Fans@odata.count,omitempty"`

	// ManagedBy An array of links to the managers responsible for managing this chassis.
	ManagedBy *[]OdataV4IdRef `json:"ManagedBy,omitempty"`

	// ManagedByOdataCount The number of items in a collection.
	ManagedByOdataCount *OdataV4Count `json:"ManagedBy@odata.count,omitempty"`

	// ManagersInChassis An array of links to the managers located in this chassis.
	ManagersInChassis *[]OdataV4IdRef `json:"ManagersInChassis,omitempty"`

	// ManagersInChassisOdataCount The number of items in a collection.
	ManagersInChassisOdataCount *OdataV4Count `json:"ManagersInChassis@odata.count,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PCIeDevices An array of links to the PCIe devices located in this chassis.
	// Deprecated:
	PCIeDevices *[]OdataV4IdRef `json:"PCIeDevices,omitempty"`

	// PCIeDevicesOdataCount The number of items in a collection.
	PCIeDevicesOdataCount *OdataV4Count `json:"PCIeDevices@odata.count,omitempty"`

	// PowerDistribution A reference to a resource.
	PowerDistribution *OdataV4IdRef `json:"PowerDistribution,omitempty"`

	// PowerOutlets An array of links to the outlets that provide power to this chassis.
	PowerOutlets *[]OdataV4IdRef `json:"PowerOutlets,omitempty"`

	// PowerOutletsOdataCount The number of items in a collection.
	PowerOutletsOdataCount *OdataV4Count `json:"PowerOutlets@odata.count,omitempty"`

	// PowerSupplies An array of links to the power supplies that provide power to this chassis.
	PowerSupplies *[]OdataV4IdRef `json:"PowerSupplies,omitempty"`

	// PowerSuppliesOdataCount The number of items in a collection.
	PowerSuppliesOdataCount *OdataV4Count `json:"PowerSupplies@odata.count,omitempty"`

	// PoweredBy An array of links to resources or objects that power this chassis.  Normally, the link is for either a chassis or a specific set of power supplies.
	// Deprecated:
	PoweredBy *[]OdataV4IdRef `json:"PoweredBy,omitempty"`

	// PoweredByOdataCount The number of items in a collection.
	PoweredByOdataCount *OdataV4Count `json:"PoweredBy@odata.count,omitempty"`

	// Processors An array of links to the processors located in this chassis.
	Processors *[]OdataV4IdRef `json:"Processors,omitempty"`

	// ProcessorsOdataCount The number of items in a collection.
	ProcessorsOdataCount *OdataV4Count `json:"Processors@odata.count,omitempty"`

	// ResourceBlocks An array of links to the resource blocks located in this chassis.
	ResourceBlocks *[]OdataV4IdRef `json:"ResourceBlocks,omitempty"`

	// ResourceBlocksOdataCount The number of items in a collection.
	ResourceBlocksOdataCount *OdataV4Count `json:"ResourceBlocks@odata.count,omitempty"`

	// Storage An array of links to the storage subsystems connected to or inside this chassis.
	Storage *[]OdataV4IdRef `json:"Storage,omitempty"`

	// StorageOdataCount The number of items in a collection.
	StorageOdataCount *OdataV4Count `json:"Storage@odata.count,omitempty"`

	// Switches An array of links to the switches located in this chassis.
	Switches *[]OdataV4IdRef `json:"Switches,omitempty"`

	// SwitchesOdataCount The number of items in a collection.
	SwitchesOdataCount *OdataV4Count `json:"Switches@odata.count,omitempty"`
}

// ChassisV1250OemActions The available OEM-specific actions for this resource.
type ChassisV1250OemActions map[string]interface{}

// ChassisV1250PhysicalSecurity The physical security state of the chassis.
type ChassisV1250PhysicalSecurity struct {
	IntrusionSensor *ChassisV1250IntrusionSensor `json:"IntrusionSensor,omitempty"`

	// IntrusionSensorNumber A numerical identifier to represent the physical security sensor.
	// Deprecated:
	IntrusionSensorNumber *int64                            `json:"IntrusionSensorNumber"`
	IntrusionSensorReArm  *ChassisV1250IntrusionSensorReArm `json:"IntrusionSensorReArm,omitempty"`
}

// ChassisV1250Reset This action resets the chassis.  Additionally, it could reset systems or other contained resources depending on the ResetType used to invoke this action.
type ChassisV1250Reset struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// ChassisV1250ThermalDirection defines model for Chassis_v1_25_0_ThermalDirection.
type ChassisV1250ThermalDirection string

// DataStorageLoSCapabilitiesProvisioningPolicy Space provisioning policy.
type DataStorageLoSCapabilitiesProvisioningPolicy string

// DataStorageLoSCapabilitiesStorageAccessCapability Values of StorageAccessCapability describe abilities to read or write storage.
type DataStorageLoSCapabilitiesStorageAccessCapability string

// IOStatisticsV104IOStatistics The properties of this type represent IO statistics.
type IOStatisticsV104IOStatistics struct {
	// NonIORequestTime The time that the resource is busy processing write requests.
	NonIORequestTime *string `json:"NonIORequestTime"`

	// NonIORequests Count of non IO requests.
	NonIORequests *int64 `json:"NonIORequests"`

	// ReadHitIORequests Count of read IO requests satisfied from memory.
	ReadHitIORequests *int64 `json:"ReadHitIORequests"`

	// ReadIOKiBytes Number of kibibytes read.
	ReadIOKiBytes *int64 `json:"ReadIOKiBytes"`

	// ReadIORequestTime The time that the resource is busy processing read requests.
	ReadIORequestTime *string `json:"ReadIORequestTime"`

	// ReadIORequests Count of read IO requests.
	ReadIORequests *int64 `json:"ReadIORequests"`

	// WriteHitIORequests Count of write IO requests coalesced into memory.
	WriteHitIORequests *int64 `json:"WriteHitIORequests"`

	// WriteIOKiBytes Number of kibibytes written.
	WriteIOKiBytes *int64 `json:"WriteIOKiBytes"`

	// WriteIORequestTime The time that the resource is busy processing write requests.
	WriteIORequestTime *string `json:"WriteIORequestTime"`

	// WriteIORequests Count of write IO requests.
	WriteIORequests *int64 `json:"WriteIORequests"`
}

// PCIeDevicePCIeTypes defines model for PCIeDevice_PCIeTypes.
type PCIeDevicePCIeTypes string

// PCIeDeviceV1160PCIeInterface Properties that describe a PCIe interface.
type PCIeDeviceV1160PCIeInterface struct {
	// LanesInUse The number of PCIe lanes in use by this device.
	LanesInUse *int64 `json:"LanesInUse"`

	// MaxLanes The number of PCIe lanes supported by this device.
	MaxLanes *int64 `json:"MaxLanes"`

	// MaxPCIeType The highest version of the PCIe specification supported by this device.
	MaxPCIeType *PCIeDeviceV1160PCIeInterface_MaxPCIeType `json:"MaxPCIeType,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PCIeType The version of the PCIe specification in use by this device.
	PCIeType *PCIeDeviceV1160PCIeInterface_PCIeType `json:"PCIeType,omitempty"`
}

// PCIeDeviceV1160PCIeInterfaceMaxPCIeType1 defines model for .
type PCIeDeviceV1160PCIeInterfaceMaxPCIeType1 = interface{}

// PCIeDeviceV1160PCIeInterface_MaxPCIeType The highest version of the PCIe specification supported by this device.
type PCIeDeviceV1160PCIeInterface_MaxPCIeType struct {
	union json.RawMessage
}

// PCIeDeviceV1160PCIeInterfacePCIeType1 defines model for .
type PCIeDeviceV1160PCIeInterfacePCIeType1 = interface{}

// PCIeDeviceV1160PCIeInterface_PCIeType The version of the PCIe specification in use by this device.
type PCIeDeviceV1160PCIeInterface_PCIeType struct {
	union json.RawMessage
}

// ProtocolProtocol defines model for Protocol_Protocol.
type ProtocolProtocol string

// RedundancyV142Actions The available actions for this resource.
type RedundancyV142Actions struct {
	// Oem The available OEM-specific actions for this resource.
	Oem *RedundancyV142OemActions `json:"Oem,omitempty"`
}

// RedundancyV142OemActions The available OEM-specific actions for this resource.
type RedundancyV142OemActions map[string]interface{}

// RedundancyV142Redundancy The common redundancy definition and structure used in other Redfish schemas.
type RedundancyV142Redundancy struct {
	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// Actions The available actions for this resource.
	Actions *RedundancyV142Actions `json:"Actions,omitempty"`

	// MaxNumSupported The maximum number of members allowable for this particular redundancy group.
	MaxNumSupported *int64 `json:"MaxNumSupported"`

	// MemberId The unique identifier for the member within an array.
	MemberId *string `json:"MemberId,omitempty"`

	// MinNumNeeded The minimum number of members needed for this group to be redundant.
	MinNumNeeded *int64 `json:"MinNumNeeded"`

	// Mode The redundancy mode of the group.
	Mode RedundancyV142Redundancy_Mode `json:"Mode"`

	// Name The name of the resource or array member.
	Name *string `json:"Name,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// RedundancyEnabled An indication of whether redundancy is enabled.
	RedundancyEnabled *bool `json:"RedundancyEnabled"`

	// RedundancySet The links to components of this redundancy set.
	RedundancySet *[]OdataV4IdRef `json:"RedundancySet,omitempty"`

	// RedundancySetOdataCount The number of items in a collection.
	RedundancySetOdataCount *OdataV4Count `json:"RedundancySet@odata.count,omitempty"`

	// Status The status and health of a resource and its children.
	Status ResourceStatus `json:"Status"`
}

// RedundancyV142RedundancyMode1 defines model for .
type RedundancyV142RedundancyMode1 = interface{}

// RedundancyV142Redundancy_Mode The redundancy mode of the group.
type RedundancyV142Redundancy_Mode struct {
	union json.RawMessage
}

// RedundancyV142RedundancyMode defines model for Redundancy_v1_4_2_RedundancyMode.
type RedundancyV142RedundancyMode string

// ResolutionStepV101ResolutionStep This type describes a recommended step of the service-defined resolution.
type ResolutionStepV101ResolutionStep struct {
	// ActionParameters The parameters of the action URI for a resolution step.
	ActionParameters *[]ResolutionStepV101ResolutionStep_ActionParameters_Item `json:"ActionParameters,omitempty"`

	// ActionURI The action URI for a resolution step.
	ActionURI *string `json:"ActionURI,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Priority The priority in the set of resolution steps.
	Priority *int64 `json:"Priority"`

	// ResolutionType The type of the resolution step.
	ResolutionType *ResolutionStepV101ResolutionStep_ResolutionType `json:"ResolutionType,omitempty"`

	// RetryCount The number of retries for a resolution step.
	RetryCount *int64 `json:"RetryCount"`

	// RetryIntervalSeconds The interval between retries for a resolution step.
	RetryIntervalSeconds *int64 `json:"RetryIntervalSeconds"`

	// TargetComponentURI The target URI of the component for a resolution step.
	TargetComponentURI *string `json:"TargetComponentURI"`
}

// ResolutionStepV101ResolutionStepActionParameters1 defines model for .
type ResolutionStepV101ResolutionStepActionParameters1 = interface{}

// ResolutionStepV101ResolutionStep_ActionParameters_Item defines model for ResolutionStep_v1_0_1_ResolutionStep.ActionParameters.Item.
type ResolutionStepV101ResolutionStep_ActionParameters_Item struct {
	union json.RawMessage
}

// ResolutionStepV101ResolutionStepResolutionType1 defines model for .
type ResolutionStepV101ResolutionStepResolutionType1 = interface{}

// ResolutionStepV101ResolutionStep_ResolutionType The type of the resolution step.
type ResolutionStepV101ResolutionStep_ResolutionType struct {
	union json.RawMessage
}

// ResolutionStepV101ResolutionType defines model for ResolutionStep_v1_0_1_ResolutionType.
type ResolutionStepV101ResolutionType string

// ResourceCondition A condition that requires attention.
type ResourceCondition struct {
	// LogEntry A reference to a resource.
	LogEntry *OdataV4IdRef `json:"LogEntry,omitempty"`

	// Message The human-readable message for this condition.
	Message *string `json:"Message,omitempty"`

	// MessageArgs An array of message arguments that are substituted for the arguments in the message when looked up in the message registry.
	MessageArgs *[]string `json:"MessageArgs,omitempty"`

	// MessageId The identifier for the message.
	MessageId *string `json:"MessageId,omitempty"`

	// OriginOfCondition A reference to a resource.
	OriginOfCondition *OdataV4IdRef `json:"OriginOfCondition,omitempty"`

	// Resolution Suggestions on how to resolve the condition.
	Resolution *string `json:"Resolution,omitempty"`

	// ResolutionSteps The list of recommended steps to resolve the condition.
	ResolutionSteps *[]ResolutionStepV101ResolutionStep `json:"ResolutionSteps,omitempty"`
	Severity        *ResourceHealth                     `json:"Severity,omitempty"`

	// Timestamp The time the condition occurred.
	Timestamp *time.Time `json:"Timestamp,omitempty"`

	// UserAuthenticationSource The source of authentication for the username property associated with the condition.
	UserAuthenticationSource *string `json:"UserAuthenticationSource"`

	// Username The username of the account associated with the condition.
	Username *string `json:"Username"`
}

// ResourceDescription The description of this resource.  Used for commonality in the schema definitions.
type ResourceDescription = string

// ResourceHealth defines model for Resource_Health.
type ResourceHealth string

// ResourceId The unique identifier for this resource within the collection of similar resources.
type ResourceId = string

// ResourceName The name of the resource or array member.
type ResourceName = string

// ResourceOem The OEM extension.
type ResourceOem map[string]interface{}

// ResourcePowerState defines model for Resource_PowerState.
type ResourcePowerState string

// ResourceState defines model for Resource_State.
type ResourceState string

// ResourceStatus The status and health of a resource and its children.
type ResourceStatus struct {
	// Conditions Conditions in this resource that require attention.
	Conditions *[]ResourceStatus_Conditions_Item `json:"Conditions,omitempty"`

	// Health The health state of this resource in the absence of its dependent resources.
	Health *ResourceStatus_Health `json:"Health,omitempty"`

	// HealthRollup The overall health state from the view of this resource.
	HealthRollup *ResourceStatus_HealthRollup `json:"HealthRollup,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// State The state of the resource.
	State *ResourceStatus_State `json:"State,omitempty"`
}

// ResourceStatusConditions1 defines model for .
type ResourceStatusConditions1 = interface{}

// ResourceStatus_Conditions_Item defines model for Resource_Status.Conditions.Item.
type ResourceStatus_Conditions_Item struct {
	union json.RawMessage
}

// ResourceStatusHealth1 defines model for .
type ResourceStatusHealth1 = interface{}

// ResourceStatus_Health The health state of this resource in the absence of its dependent resources.
type ResourceStatus_Health struct {
	union json.RawMessage
}

// ResourceStatusHealthRollup1 defines model for .
type ResourceStatusHealthRollup1 = interface{}

// ResourceStatus_HealthRollup The overall health state from the view of this resource.
type ResourceStatus_HealthRollup struct {
	union json.RawMessage
}

// ResourceStatusState1 defines model for .
type ResourceStatusState1 = interface{}

// ResourceStatus_State The state of the resource.
type ResourceStatus_State struct {
	union json.RawMessage
}

// ResourceUUID defines model for Resource_UUID.
type ResourceUUID = string

// ResourceV1200ContactInfo Contact information for this resource.
type ResourceV1200ContactInfo struct {
	// ContactName Name of this contact.
	ContactName *string `json:"ContactName"`

	// EmailAddress Email address for this contact.
	EmailAddress *string `json:"EmailAddress"`

	// PhoneNumber Phone number for this contact.
	PhoneNumber *string `json:"PhoneNumber"`
}

// ResourceV1200DurableNameFormat defines model for Resource_v1_20_0_DurableNameFormat.
type ResourceV1200DurableNameFormat string

// ResourceV1200Identifier Any additional identifiers for a resource.
type ResourceV1200Identifier struct {
	// DurableName The world-wide, persistent name of the resource.
	DurableName *string `json:"DurableName"`

	// DurableNameFormat The format of the durable name property.
	DurableNameFormat *ResourceV1200Identifier_DurableNameFormat `json:"DurableNameFormat,omitempty"`
}

// ResourceV1200IdentifierDurableNameFormat1 defines model for .
type ResourceV1200IdentifierDurableNameFormat1 = interface{}

// ResourceV1200Identifier_DurableNameFormat The format of the durable name property.
type ResourceV1200Identifier_DurableNameFormat struct {
	union json.RawMessage
}

// ResourceV1200Location The location of a resource.
type ResourceV1200Location struct {
	// AltitudeMeters The altitude of the resource in meters.
	AltitudeMeters *float32 `json:"AltitudeMeters"`

	// Contacts An array of contact information.
	Contacts *[]ResourceV1200Location_Contacts_Item `json:"Contacts,omitempty"`

	// Info The location of the resource.
	// Deprecated:
	Info *string `json:"Info"`

	// InfoFormat The format of the `Info` property.
	// Deprecated:
	InfoFormat *string `json:"InfoFormat"`

	// Latitude The latitude of the resource.
	Latitude *float32 `json:"Latitude"`

	// Longitude The longitude of the resource in degree units.
	Longitude *float32 `json:"Longitude"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PartLocation The part location for a resource within an enclosure.
	PartLocation *ResourceV1200PartLocation `json:"PartLocation,omitempty"`

	// PartLocationContext Human-readable string to enable differentiation between `PartLocation` values for parts in the same enclosure, which might include hierarchical information of containing `PartLocation` values for the part.
	PartLocationContext *string `json:"PartLocationContext"`

	// PhysicalAddress The physical address for a resource.
	PhysicalAddress *ResourceV1200PhysicalAddress `json:"PhysicalAddress,omitempty"`

	// Placement The placement within the addressed location.
	Placement *ResourceV1200Placement `json:"Placement,omitempty"`

	// PostalAddress The postal address for a resource.
	// Deprecated:
	PostalAddress *ResourceV1200PostalAddress `json:"PostalAddress,omitempty"`
}

// ResourceV1200LocationContacts1 defines model for .
type ResourceV1200LocationContacts1 = interface{}

// ResourceV1200Location_Contacts_Item defines model for Resource_v1_20_0_Location.Contacts.Item.
type ResourceV1200Location_Contacts_Item struct {
	union json.RawMessage
}

// ResourceV1200LocationType The types of locations for a part within an enclosure.
type ResourceV1200LocationType string

// ResourceV1200Orientation The orientations for the ordering of the part location ordinal value.
type ResourceV1200Orientation string

// ResourceV1200PartLocation The part location for a resource within an enclosure.
type ResourceV1200PartLocation struct {
	// LocationOrdinalValue The number that represents the location of the part.  For example, if `LocationType` is `Slot` and this unit is in slot 2, the LocationOrdinalValue is `2`.
	LocationOrdinalValue *int64 `json:"LocationOrdinalValue"`

	// LocationType The type of location of the part.
	LocationType *ResourceV1200PartLocation_LocationType `json:"LocationType,omitempty"`

	// Orientation The orientation for the ordering of the slot enumeration used by the `LocationOrdinalValue` property.
	Orientation *ResourceV1200PartLocation_Orientation `json:"Orientation,omitempty"`

	// Reference The reference point for the part location.  Provides guidance about the general location of the part.
	Reference *ResourceV1200PartLocation_Reference `json:"Reference,omitempty"`

	// ServiceLabel The label of the part location, such as a silk-screened name or a printed label.
	ServiceLabel *string `json:"ServiceLabel"`
}

// ResourceV1200PartLocationLocationType1 defines model for .
type ResourceV1200PartLocationLocationType1 = interface{}

// ResourceV1200PartLocation_LocationType The type of location of the part.
type ResourceV1200PartLocation_LocationType struct {
	union json.RawMessage
}

// ResourceV1200PartLocationOrientation1 defines model for .
type ResourceV1200PartLocationOrientation1 = interface{}

// ResourceV1200PartLocation_Orientation The orientation for the ordering of the slot enumeration used by the `LocationOrdinalValue` property.
type ResourceV1200PartLocation_Orientation struct {
	union json.RawMessage
}

// ResourceV1200PartLocationReference1 defines model for .
type ResourceV1200PartLocationReference1 = interface{}

// ResourceV1200PartLocation_Reference The reference point for the part location.  Provides guidance about the general location of the part.
type ResourceV1200PartLocation_Reference struct {
	union json.RawMessage
}

// ResourceV1200PhysicalAddress The physical address for a resource.
type ResourceV1200PhysicalAddress struct {
	// City City, township, or shi (JP).
	City *string `json:"City"`

	// Country The country.
	Country *string `json:"Country"`

	// ISOCountryCode The ISO 3166-1 country code.
	ISOCountryCode *string `json:"ISOCountryCode"`

	// ISOSubdivisionCode ISO 3166-2 subdivision code.
	ISOSubdivisionCode *string `json:"ISOSubdivisionCode"`

	// PostalCode The postal code.
	PostalCode *string `json:"PostalCode"`

	// StateOrProvince State or province.
	StateOrProvince *string `json:"StateOrProvince"`

	// StreetAddress The street-level address, including building, room, or other identifiers.
	StreetAddress *string `json:"StreetAddress"`
}

// ResourceV1200Placement The placement within the addressed location.
type ResourceV1200Placement struct {
	// AdditionalInfo Area designation or other additional info.
	AdditionalInfo *string `json:"AdditionalInfo"`

	// Rack The name of a rack location within a row.
	Rack *string `json:"Rack"`

	// RackOffset The vertical location of the item, in terms of RackOffsetUnits.
	RackOffset *int64 `json:"RackOffset"`

	// RackOffsetUnits The type of rack units in use.
	RackOffsetUnits *ResourceV1200Placement_RackOffsetUnits `json:"RackOffsetUnits,omitempty"`

	// Row The name of the row.
	Row *string `json:"Row"`
}

// ResourceV1200PlacementRackOffsetUnits1 defines model for .
type ResourceV1200PlacementRackOffsetUnits1 = interface{}

// ResourceV1200Placement_RackOffsetUnits The type of rack units in use.
type ResourceV1200Placement_RackOffsetUnits struct {
	union json.RawMessage
}

// ResourceV1200PostalAddress The postal address for a resource.
type ResourceV1200PostalAddress struct {
	// AdditionalCode The additional code.
	AdditionalCode *string `json:"AdditionalCode"`

	// AdditionalInfo The room designation or other additional information.
	AdditionalInfo *string `json:"AdditionalInfo"`

	// Building The name of the building.
	Building *string `json:"Building"`

	// City City, township, or shi (JP).
	City *string `json:"City"`

	// Community The postal community name.
	Community *string `json:"Community"`

	// Country The country.
	Country *string `json:"Country"`

	// District A county, parish, gun (JP), or district (IN).
	District *string `json:"District"`

	// Division City division, borough, city district, ward, or chou (JP).
	Division *string `json:"Division"`

	// Floor The floor.
	Floor *string `json:"Floor"`

	// GPSCoords The GPS coordinates of the part.
	// Deprecated:
	GPSCoords *string `json:"GPSCoords"`

	// HouseNumber The numeric portion of house number.
	HouseNumber *int64 `json:"HouseNumber"`

	// HouseNumberSuffix The house number suffix.
	HouseNumberSuffix *string `json:"HouseNumberSuffix"`

	// Landmark The landmark.
	Landmark *string `json:"Landmark"`

	// LeadingStreetDirection A leading street direction.
	LeadingStreetDirection *string `json:"LeadingStreetDirection"`

	// Location The room designation or other additional information.
	// Deprecated:
	Location *string `json:"Location"`

	// Name The name.
	Name *string `json:"Name"`

	// Neighborhood Neighborhood or block.
	Neighborhood *string `json:"Neighborhood"`

	// POBox The post office box (PO box).
	POBox *string `json:"POBox"`

	// PlaceType The description of the type of place that is addressed.
	PlaceType *string `json:"PlaceType"`

	// PostalCode The postal code or zip code.
	PostalCode *string `json:"PostalCode"`

	// Road The primary road or street.
	Road *string `json:"Road"`

	// RoadBranch The road branch.
	RoadBranch *string `json:"RoadBranch"`

	// RoadPostModifier The road post-modifier.
	RoadPostModifier *string `json:"RoadPostModifier"`

	// RoadPreModifier The road pre-modifier.
	RoadPreModifier *string `json:"RoadPreModifier"`

	// RoadSection The road section.
	RoadSection *string `json:"RoadSection"`

	// RoadSubBranch The road sub branch.
	RoadSubBranch *string `json:"RoadSubBranch"`

	// Room The name or number of the room.
	Room *string `json:"Room"`

	// Seat The seat, such as the desk, cubicle, or workstation.
	Seat *string `json:"Seat"`

	// Street Street name.
	Street *string `json:"Street"`

	// StreetSuffix Avenue, Platz, Street, Circle.
	StreetSuffix *string `json:"StreetSuffix"`

	// Territory A top-level subdivision within a country.
	Territory *string `json:"Territory"`

	// TrailingStreetSuffix A trailing street suffix.
	TrailingStreetSuffix *string `json:"TrailingStreetSuffix"`

	// Unit The name or number of the apartment unit or suite.
	Unit *string `json:"Unit"`
}

// ResourceV1200RackUnits The type of rack unit in use.
type ResourceV1200RackUnits string

// ResourceV1200Reference The reference areas for the location of the part within an enclosure.
type ResourceV1200Reference string

// ServiceRoot The ServiceRoot schema describes the root of the Redfish service, located at the '/redfish/v1' URI.  All other resources accessible through the Redfish interface on this device are linked directly or indirectly from the service root.
type ServiceRoot = ServiceRootV1161ServiceRoot

// ServiceRootV1161DeepOperations The information about deep operations that the service supports.
type ServiceRootV1161DeepOperations struct {
	// DeepPATCH An indication of whether the service supports the deep PATCH operation.
	DeepPATCH *bool `json:"DeepPATCH,omitempty"`

	// DeepPOST An indication of whether the service supports the deep POST operation.
	DeepPOST *bool `json:"DeepPOST,omitempty"`

	// MaxLevels The maximum levels of resources allowed in deep operations.
	MaxLevels *int64 `json:"MaxLevels,omitempty"`
}

// ServiceRootV1161Expand The information about the use of `$expand` in the service.
type ServiceRootV1161Expand struct {
	// ExpandAll An indication of whether the service supports the asterisk (`*`) option of the `$expand` query parameter.
	ExpandAll *bool `json:"ExpandAll,omitempty"`

	// Levels An indication of whether the service supports the `$levels` option of the `$expand` query parameter.
	Levels *bool `json:"Levels,omitempty"`

	// Links An indication of whether this service supports the tilde (`~`) option of the `$expand` query parameter.
	Links *bool `json:"Links,omitempty"`

	// MaxLevels The maximum `$levels` option value in the `$expand` query parameter.
	MaxLevels *int64 `json:"MaxLevels,omitempty"`

	// NoLinks An indication of whether the service supports the period (`.`) option of the `$expand` query parameter.
	NoLinks *bool `json:"NoLinks,omitempty"`
}

// ServiceRootV1161Links The links to other resources that are related to this resource.
type ServiceRootV1161Links struct {
	// ManagerProvidingService A reference to a resource.
	ManagerProvidingService *OdataV4IdRef `json:"ManagerProvidingService,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Sessions A reference to a resource.
	Sessions OdataV4IdRef `json:"Sessions"`
}

// ServiceRootV1161ProtocolFeaturesSupported The information about protocol features that the service supports.
type ServiceRootV1161ProtocolFeaturesSupported struct {
	// DeepOperations The information about deep operations that the service supports.
	DeepOperations *ServiceRootV1161DeepOperations `json:"DeepOperations,omitempty"`

	// ExcerptQuery An indication of whether the service supports the `excerpt` query parameter.
	ExcerptQuery *bool `json:"ExcerptQuery,omitempty"`

	// ExpandQuery The information about the use of `$expand` in the service.
	ExpandQuery *ServiceRootV1161Expand `json:"ExpandQuery,omitempty"`

	// FilterQuery An indication of whether the service supports the `$filter` query parameter.
	FilterQuery *bool `json:"FilterQuery,omitempty"`

	// MultipleHTTPRequests An indication of whether the service supports multiple outstanding HTTP requests.
	MultipleHTTPRequests *bool `json:"MultipleHTTPRequests,omitempty"`

	// OnlyMemberQuery An indication of whether the service supports the `only` query parameter.
	OnlyMemberQuery *bool `json:"OnlyMemberQuery,omitempty"`

	// SelectQuery An indication of whether the service supports the `$select` query parameter.
	SelectQuery *bool `json:"SelectQuery,omitempty"`
}

// ServiceRootV1161ServiceRoot The ServiceRoot schema describes the root of the Redfish service, located at the '/redfish/v1' URI.  All other resources accessible through the Redfish interface on this device are linked directly or indirectly from the service root.
type ServiceRootV1161ServiceRoot struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// AccountService A reference to a resource.
	AccountService *OdataV4IdRef `json:"AccountService,omitempty"`

	// AggregationService A reference to a resource.
	AggregationService *OdataV4IdRef `json:"AggregationService,omitempty"`

	// Cables A reference to a resource.
	Cables *OdataV4IdRef `json:"Cables,omitempty"`

	// CertificateService A reference to a resource.
	CertificateService *OdataV4IdRef `json:"CertificateService,omitempty"`

	// Chassis A reference to a resource.
	Chassis *OdataV4IdRef `json:"Chassis,omitempty"`

	// ComponentIntegrity A reference to a resource.
	ComponentIntegrity *OdataV4IdRef `json:"ComponentIntegrity,omitempty"`

	// CompositionService A reference to a resource.
	CompositionService *OdataV4IdRef `json:"CompositionService,omitempty"`

	// Description The description of this resource.  Used for commonality in the schema definitions.
	Description *ResourceDescription `json:"Description,omitempty"`

	// EventService A reference to a resource.
	EventService *OdataV4IdRef `json:"EventService,omitempty"`

	// Fabrics A reference to a resource.
	Fabrics *OdataV4IdRef `json:"Fabrics,omitempty"`

	// Facilities A reference to a resource.
	Facilities *OdataV4IdRef `json:"Facilities,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// JobService A reference to a resource.
	JobService *OdataV4IdRef `json:"JobService,omitempty"`

	// JsonSchemas A reference to a resource.
	JsonSchemas *OdataV4IdRef `json:"JsonSchemas,omitempty"`

	// KeyService A reference to a resource.
	KeyService *OdataV4IdRef `json:"KeyService,omitempty"`

	// LicenseService A reference to a resource.
	LicenseService *OdataV4IdRef `json:"LicenseService,omitempty"`

	// Links The links to other resources that are related to this resource.
	Links ServiceRootV1161Links `json:"Links"`

	// Managers A reference to a resource.
	Managers *OdataV4IdRef `json:"Managers,omitempty"`

	// NVMeDomains A reference to a resource.
	NVMeDomains *OdataV4IdRef `json:"NVMeDomains,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PowerEquipment A reference to a resource.
	PowerEquipment *OdataV4IdRef `json:"PowerEquipment,omitempty"`

	// Product The product associated with this Redfish service.
	Product *string `json:"Product"`

	// ProtocolFeaturesSupported The information about protocol features that the service supports.
	ProtocolFeaturesSupported *ServiceRootV1161ProtocolFeaturesSupported `json:"ProtocolFeaturesSupported,omitempty"`

	// RedfishVersion The version of the Redfish service.
	RedfishVersion *string `json:"RedfishVersion,omitempty"`

	// RegisteredClients A reference to a resource.
	RegisteredClients *OdataV4IdRef `json:"RegisteredClients,omitempty"`

	// Registries A reference to a resource.
	Registries *OdataV4IdRef `json:"Registries,omitempty"`

	// ResourceBlocks A reference to a resource.
	ResourceBlocks *OdataV4IdRef `json:"ResourceBlocks,omitempty"`

	// ServiceConditions A reference to a resource.
	ServiceConditions *OdataV4IdRef `json:"ServiceConditions,omitempty"`

	// ServiceIdentification The vendor or user-provided product and service identifier.
	ServiceIdentification *string `json:"ServiceIdentification,omitempty"`

	// SessionService A reference to a resource.
	SessionService *OdataV4IdRef `json:"SessionService,omitempty"`

	// Storage A reference to a resource.
	Storage *OdataV4IdRef `json:"Storage,omitempty"`

	// StorageServices A reference to a resource.
	StorageServices *OdataV4IdRef `json:"StorageServices,omitempty"`

	// StorageSystems A reference to a resource.
	StorageSystems *OdataV4IdRef `json:"StorageSystems,omitempty"`

	// Systems A reference to a resource.
	Systems *OdataV4IdRef `json:"Systems,omitempty"`

	// Tasks A reference to a resource.
	Tasks *OdataV4IdRef `json:"Tasks,omitempty"`

	// TelemetryService A reference to a resource.
	TelemetryService *OdataV4IdRef `json:"TelemetryService,omitempty"`

	// ThermalEquipment A reference to a resource.
	ThermalEquipment *OdataV4IdRef `json:"ThermalEquipment,omitempty"`

	// UUID Unique identifier for a service instance.  When SSDP is used, this value contains the same UUID returned in an HTTP `200 OK` response from an SSDP `M-SEARCH` request during discovery.
	UUID *string `json:"UUID"`

	// UpdateService A reference to a resource.
	UpdateService *OdataV4IdRef `json:"UpdateService,omitempty"`

	// Vendor The vendor or manufacturer associated with this Redfish service.
	Vendor *string `json:"Vendor"`
}

// SoftwareInventoryV1102MeasurementBlock The DSP0274-defined measurement block information.
type SoftwareInventoryV1102MeasurementBlock struct {
	// Measurement The hexadecimal string representation of the numeric value of the DSP0274-defined 'Measurement' field of the measurement block.
	Measurement *string `json:"Measurement"`

	// MeasurementIndex The DSP0274-defined 'Index' field of the measurement block.
	MeasurementIndex *int64 `json:"MeasurementIndex"`

	// MeasurementSize The DSP0274-defined 'MeasurementSize' field of the measurement block.
	MeasurementSize *int64 `json:"MeasurementSize"`

	// MeasurementSpecification The DSP0274-defined 'MeasurementSpecification' field of the measurement block.
	MeasurementSpecification *int64 `json:"MeasurementSpecification"`
}

// Storage The Storage schema defines a storage subsystem and its respective properties.  A storage subsystem represents a set of physical or virtual storage controllers and the resources, such as volumes, that can be accessed from that subsystem.
type Storage = StorageV1151Storage

// StorageCollection The collection of Storage resource instances.
type StorageCollection = StorageCollectionStorageCollection

// StorageCollectionStorageCollection The collection of Storage resource instances.
type StorageCollectionStorageCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Description The description of this resource.  Used for commonality in the schema definitions.
	Description *ResourceDescription `json:"Description,omitempty"`

	// Members The members of this collection.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// StoragePool A container of data storage.
type StoragePool = StoragePoolV190StoragePool

// StoragePoolCollection A Collection of StoragePool resource instances.
type StoragePoolCollection = StoragePoolCollectionStoragePoolCollection

// StoragePoolCollectionStoragePoolCollection A Collection of StoragePool resource instances.
type StoragePoolCollectionStoragePoolCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Description The description of this resource.  Used for commonality in the schema definitions.
	Description *ResourceDescription `json:"Description,omitempty"`

	// Members The value of each member references a StoragePool resource.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// StoragePoolNVMePoolType defines model for StoragePool_NVMePoolType.
type StoragePoolNVMePoolType string

// StoragePoolPoolType defines model for StoragePool_PoolType.
type StoragePoolPoolType string

// StoragePoolV190Actions The available actions for this resource.
type StoragePoolV190Actions struct {
	// HashStoragePoolAddDrives This action is used to add an additional drive, or set of drives, to a capacity source for the storage pool.
	HashStoragePoolAddDrives *StoragePoolV190AddDrives `json:"#StoragePool.AddDrives,omitempty"`

	// HashStoragePoolRemoveDrives This action is used to remove drive(s) from the capacity source for the StoragePool.
	HashStoragePoolRemoveDrives *StoragePoolV190RemoveDrives `json:"#StoragePool.RemoveDrives,omitempty"`

	// HashStoragePoolSetCompressionState This action is used to set the compression state of the pool.
	HashStoragePoolSetCompressionState *StoragePoolV190SetCompressionState `json:"#StoragePool.SetCompressionState,omitempty"`

	// HashStoragePoolSetDeduplicationState This action is used to set the dedupe state of the pool.
	HashStoragePoolSetDeduplicationState *StoragePoolV190SetDeduplicationState `json:"#StoragePool.SetDeduplicationState,omitempty"`

	// HashStoragePoolSetEncryptionState This action is used to set the encryption state of the pool.
	HashStoragePoolSetEncryptionState *StoragePoolV190SetEncryptionState `json:"#StoragePool.SetEncryptionState,omitempty"`

	// Oem The available OEM specific actions for this resource.
	Oem *StoragePoolV190OemActions `json:"Oem,omitempty"`
}

// StoragePoolV190AddDrives This action is used to add an additional drive, or set of drives, to a capacity source for the storage pool.
type StoragePoolV190AddDrives struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StoragePoolV190EndGrpLifetime This contains properties the Endurance Group Lifetime attributes.
type StoragePoolV190EndGrpLifetime struct {
	// DataUnitsRead The property contains the total number of data units read from this endurance group.
	DataUnitsRead *int64 `json:"DataUnitsRead"`

	// DataUnitsWritten The property contains the total number of data units written from this endurance group.
	DataUnitsWritten *int64 `json:"DataUnitsWritten"`

	// EnduranceEstimate This property contains an estimate of the total number of data bytes that may be written to the Endurance Group over the lifetime of the Endurance Group assuming a write amplication of 1.
	EnduranceEstimate *int64 `json:"EnduranceEstimate"`

	// ErrorInformationLogEntryCount This property contains the number of error information log entries over the life of the controller for the endurance group.
	ErrorInformationLogEntryCount *int64 `json:"ErrorInformationLogEntryCount"`

	// HostReadCommandCount This property contains the number of read commands completed by all controllers in the NVM subsystem for the Endurance Group.
	HostReadCommandCount *int64 `json:"HostReadCommandCount"`

	// HostWriteCommandCount This property contains the number of write commands completed by all controllers in the NVM subsystem for the Endurance Group.
	HostWriteCommandCount *int64 `json:"HostWriteCommandCount"`

	// MediaAndDataIntegrityErrorCount This property contains the number of occurences where the controller detected an unrecovered data integrity error for the Endurance Group.
	MediaAndDataIntegrityErrorCount *int64 `json:"MediaAndDataIntegrityErrorCount"`

	// MediaUnitsWritten The property contains the total number of data units written from this endurance group.
	MediaUnitsWritten *int64 `json:"MediaUnitsWritten"`

	// PercentUsed A vendor-specific estimate of the percent life used for the endurance group based on the actual usage and the manufacturer prediction of NVM life.
	PercentUsed *int64 `json:"PercentUsed"`
}

// StoragePoolV190Links The links object contains the links to other resources that are related to this resource.
type StoragePoolV190Links struct {
	// DedicatedSpareDrives An array of references to the drives which are dedicated spares for this StoragePool.
	DedicatedSpareDrives *[]OdataV4IdRef `json:"DedicatedSpareDrives,omitempty"`

	// DedicatedSpareDrivesOdataCount The number of items in a collection.
	DedicatedSpareDrivesOdataCount *OdataV4Count `json:"DedicatedSpareDrives@odata.count,omitempty"`

	// DefaultClassOfService A reference to a resource.
	DefaultClassOfService *OdataV4IdRef `json:"DefaultClassOfService,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// OwningStorageResource A reference to a resource.
	OwningStorageResource *OdataV4IdRef `json:"OwningStorageResource,omitempty"`

	// SpareResourceSets An array of references to SpareResourceSets.
	SpareResourceSets *[]OdataV4IdRef `json:"SpareResourceSets,omitempty"`

	// SpareResourceSetsOdataCount The number of items in a collection.
	SpareResourceSetsOdataCount *OdataV4Count `json:"SpareResourceSets@odata.count,omitempty"`
}

// StoragePoolV190NVMeEnduranceGroupProperties This contains properties to use when StoragePool is used to describe an NVMe Endurance Group.
type StoragePoolV190NVMeEnduranceGroupProperties struct {
	// EndGrpLifetime This property contains the Endurance Group Lifetime properties.
	EndGrpLifetime *StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime `json:"EndGrpLifetime,omitempty"`

	// PredictedMediaLifeLeftPercent The percentage of reads and writes that are predicted to be available for the media.
	PredictedMediaLifeLeftPercent *float32 `json:"PredictedMediaLifeLeftPercent"`
}

// StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1 defines model for .
type StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1 = interface{}

// StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime This property contains the Endurance Group Lifetime properties.
type StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime struct {
	union json.RawMessage
}

// StoragePoolV190NVMeProperties This contains properties to use when StoragePool is used to describe an NVMe construct.
type StoragePoolV190NVMeProperties struct {
	// NVMePoolType Indicates whether the StoragePool is used as an EnduranceGroup or an NVMSet.
	NVMePoolType *StoragePoolV190NVMeProperties_NVMePoolType `json:"NVMePoolType,omitempty"`
}

// StoragePoolV190NVMePropertiesNVMePoolType1 defines model for .
type StoragePoolV190NVMePropertiesNVMePoolType1 = interface{}

// StoragePoolV190NVMeProperties_NVMePoolType Indicates whether the StoragePool is used as an EnduranceGroup or an NVMSet.
type StoragePoolV190NVMeProperties_NVMePoolType struct {
	union json.RawMessage
}

// StoragePoolV190NVMeSetProperties This contains properties to use when StoragePool is used to describe an NVMe Set.
type StoragePoolV190NVMeSetProperties struct {
	// EnduranceGroupIdentifier A 16-bit hex value that contains the endurance group identifier.
	EnduranceGroupIdentifier *string `json:"EnduranceGroupIdentifier"`

	// OptimalWriteSizeBytes This property contains the Optimal Write Size in Bytes for this NVMe Set.
	OptimalWriteSizeBytes *int64 `json:"OptimalWriteSizeBytes"`

	// Random4kReadTypicalNanoSeconds Indicates the typical time to complete a 4k read in 100 nano-second units when the NVM Set is in a Predictable Latency Mode Deterministic Window and there is 1 outstanding command per NVM Set.
	Random4kReadTypicalNanoSeconds *int64 `json:"Random4kReadTypicalNanoSeconds"`

	// SetIdentifier A 16-bit hex value that contains the NVMe Set group identifier.
	SetIdentifier *string `json:"SetIdentifier"`

	// UnallocatedNVMNamespaceCapacityBytes Indicates the unallocated capacity of the NVMe Set in bytes.
	UnallocatedNVMNamespaceCapacityBytes *int64 `json:"UnallocatedNVMNamespaceCapacityBytes"`
}

// StoragePoolV190OemActions The available OEM specific actions for this resource.
type StoragePoolV190OemActions map[string]interface{}

// StoragePoolV190RemoveDrives This action is used to remove drive(s) from the capacity source for the StoragePool.
type StoragePoolV190RemoveDrives struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StoragePoolV190SetCompressionState This action is used to set the compression state of the pool.
type StoragePoolV190SetCompressionState struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StoragePoolV190SetDeduplicationState This action is used to set the dedupe state of the pool.
type StoragePoolV190SetDeduplicationState struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StoragePoolV190SetEncryptionState This action is used to set the encryption state of the pool.
type StoragePoolV190SetEncryptionState struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StoragePoolV190StoragePool A container of data storage.
type StoragePoolV190StoragePool struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Actions The available actions for this resource.
	Actions *StoragePoolV190Actions `json:"Actions,omitempty"`

	// AllocatedPools A reference to a resource.
	AllocatedPools *OdataV4IdRef `json:"AllocatedPools,omitempty"`

	// AllocatedVolumes A reference to a resource.
	AllocatedVolumes *OdataV4IdRef `json:"AllocatedVolumes,omitempty"`

	// BlockSizeBytes Maximum Block size in bytes.
	// Deprecated:
	BlockSizeBytes *int64 `json:"BlockSizeBytes"`

	// Capacity This is the schema definition for the Capacity of a device. It represents the properties for capacity for any data store.
	Capacity *CapacityV100Capacity `json:"Capacity,omitempty"`

	// CapacitySources An array of space allocations to this store.
	CapacitySources *[]CapacityV121CapacitySource `json:"CapacitySources,omitempty"`

	// CapacitySourcesOdataCount The number of items in a collection.
	CapacitySourcesOdataCount *OdataV4Count `json:"CapacitySources@odata.count,omitempty"`

	// ClassesOfService A reference to a resource.
	ClassesOfService *OdataV4IdRef `json:"ClassesOfService,omitempty"`

	// Compressed Indicator of whether or not the StoragePool has compression enabled.
	// Deprecated:
	Compressed *bool `json:"Compressed"`

	// CompressionEnabled Indicates whether or not compression is enabled on the storage pool.
	CompressionEnabled *bool `json:"CompressionEnabled"`

	// Deduplicated Indicator of whether or not the StoragePool has deduplication enabled.
	// Deprecated:
	Deduplicated *bool `json:"Deduplicated"`

	// DeduplicationEnabled Indicates whether or not deduplication is enabled on the storage pool.
	DeduplicationEnabled *bool `json:"DeduplicationEnabled"`

	// DefaultClassOfService A reference to a resource.
	DefaultClassOfService *OdataV4IdRef `json:"DefaultClassOfService,omitempty"`

	// DefaultCompressionBehavior Indicates the default dedupe behavior applied to the child resource (E.g., volume or storage pool) created out of the storage pool if the 'Compressed' property is not set on the create request.
	DefaultCompressionBehavior *bool `json:"DefaultCompressionBehavior"`

	// DefaultDeduplicationBehavior Indicates the default deduplication behavior applied to the child resource (E.g., volume or storage pool) created out of the storage pool if the 'Deduplicated' property is not set on the create request.
	DefaultDeduplicationBehavior *bool `json:"DefaultDeduplicationBehavior"`

	// DefaultEncryptionBehavior Indicates the default dedupe behavior applied to the child resource (E.g., volume or storage pool) created out of the storage pool if the 'Encrypted' property is not set on the create request.
	DefaultEncryptionBehavior *bool                                   `json:"DefaultEncryptionBehavior"`
	Description               *StoragePoolV190StoragePool_Description `json:"Description,omitempty"`

	// Encrypted Indicator of whether or not the StoragePool has encryption enabled.
	// Deprecated:
	Encrypted *bool `json:"Encrypted"`

	// EncryptionEnabled Indicates whether or not encryption is enabled on the storage pool.
	EncryptionEnabled *bool `json:"EncryptionEnabled"`

	// IOStatistics The properties of this type represent IO statistics.
	IOStatistics *IOStatisticsV104IOStatistics `json:"IOStatistics,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Identifier Any additional identifiers for a resource.
	Identifier *ResourceV1200Identifier `json:"Identifier,omitempty"`

	// Links The links object contains the links to other resources that are related to this resource.
	Links *StoragePoolV190Links `json:"Links,omitempty"`

	// LowSpaceWarningThresholdPercents Low space warning threshold specified in percents.
	LowSpaceWarningThresholdPercents *[]int64 `json:"LowSpaceWarningThresholdPercents,omitempty"`

	// MaxBlockSizeBytes Maximum Block size in bytes.
	MaxBlockSizeBytes *int64 `json:"MaxBlockSizeBytes"`

	// Metrics The link to the metrics for this storage pool.
	Metrics *StoragePoolV190StoragePool_Metrics `json:"Metrics,omitempty"`

	// NVMeEnduranceGroupProperties This property contains properties to use when StoragePool is used to describe an NVMe Endurance Group.
	NVMeEnduranceGroupProperties *StoragePoolV190StoragePool_NVMeEnduranceGroupProperties `json:"NVMeEnduranceGroupProperties,omitempty"`

	// NVMeProperties NVMe properties for this storage pool.
	NVMeProperties *StoragePoolV190StoragePool_NVMeProperties `json:"NVMeProperties,omitempty"`

	// NVMeSetProperties This property contains properties to use when StoragePool is used to describe an NVMe Set.
	NVMeSetProperties *StoragePoolV190StoragePool_NVMeSetProperties `json:"NVMeSetProperties,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PoolType Pool usage type for this storage pool.
	// Deprecated:
	PoolType *[]StoragePoolV190StoragePool_PoolType_Item `json:"PoolType,omitempty"`

	// RecoverableCapacitySourceCount Current number of capacity source resources that are available as replacements.
	RecoverableCapacitySourceCount *int64 `json:"RecoverableCapacitySourceCount"`

	// RemainingCapacityPercent The percentage of the capacity remaining in the StoragePool.
	RemainingCapacityPercent *int64 `json:"RemainingCapacityPercent"`

	// ReplicationEnabled Indicates whether or not replication is enabled on the storage pool.
	ReplicationEnabled *bool `json:"ReplicationEnabled"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// SupportedPoolTypes A collection of the Pool Types supported by the storage pool.
	SupportedPoolTypes *[]StoragePoolV190StoragePool_SupportedPoolTypes_Item `json:"SupportedPoolTypes,omitempty"`

	// SupportedProvisioningPolicies This collection specifies all supported storage allocation properties for the Storage Pool.
	SupportedProvisioningPolicies *[]StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item `json:"SupportedProvisioningPolicies,omitempty"`

	// SupportedRAIDTypes A collection of the RAID Types supported by the storage pool.
	SupportedRAIDTypes *[]StoragePoolV190StoragePool_SupportedRAIDTypes_Item `json:"SupportedRAIDTypes,omitempty"`
}

// StoragePoolV190StoragePoolDescription1 defines model for .
type StoragePoolV190StoragePoolDescription1 = interface{}

// StoragePoolV190StoragePool_Description defines model for StoragePoolV190StoragePool.Description.
type StoragePoolV190StoragePool_Description struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolMetrics1 defines model for .
type StoragePoolV190StoragePoolMetrics1 = interface{}

// StoragePoolV190StoragePool_Metrics The link to the metrics for this storage pool.
type StoragePoolV190StoragePool_Metrics struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1 defines model for .
type StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1 = interface{}

// StoragePoolV190StoragePool_NVMeEnduranceGroupProperties This property contains properties to use when StoragePool is used to describe an NVMe Endurance Group.
type StoragePoolV190StoragePool_NVMeEnduranceGroupProperties struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolNVMeProperties1 defines model for .
type StoragePoolV190StoragePoolNVMeProperties1 = interface{}

// StoragePoolV190StoragePool_NVMeProperties NVMe properties for this storage pool.
type StoragePoolV190StoragePool_NVMeProperties struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolNVMeSetProperties1 defines model for .
type StoragePoolV190StoragePoolNVMeSetProperties1 = interface{}

// StoragePoolV190StoragePool_NVMeSetProperties This property contains properties to use when StoragePool is used to describe an NVMe Set.
type StoragePoolV190StoragePool_NVMeSetProperties struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolPoolType1 defines model for .
type StoragePoolV190StoragePoolPoolType1 = interface{}

// StoragePoolV190StoragePool_PoolType_Item defines model for StoragePool_v1_9_0_StoragePool.PoolType.Item.
type StoragePoolV190StoragePool_PoolType_Item struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolSupportedPoolTypes1 defines model for .
type StoragePoolV190StoragePoolSupportedPoolTypes1 = interface{}

// StoragePoolV190StoragePool_SupportedPoolTypes_Item defines model for StoragePool_v1_9_0_StoragePool.SupportedPoolTypes.Item.
type StoragePoolV190StoragePool_SupportedPoolTypes_Item struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolSupportedProvisioningPolicies1 defines model for .
type StoragePoolV190StoragePoolSupportedProvisioningPolicies1 = interface{}

// StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item defines model for StoragePool_v1_9_0_StoragePool.SupportedProvisioningPolicies.Item.
type StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item struct {
	union json.RawMessage
}

// StoragePoolV190StoragePoolSupportedRAIDTypes1 defines model for .
type StoragePoolV190StoragePoolSupportedRAIDTypes1 = interface{}

// StoragePoolV190StoragePool_SupportedRAIDTypes_Item defines model for StoragePool_v1_9_0_StoragePool.SupportedRAIDTypes.Item.
type StoragePoolV190StoragePool_SupportedRAIDTypes_Item struct {
	union json.RawMessage
}

// StorageReplicaInfoReplicaFaultDomain Values of ReplicaFaultDomain describe the fault domain for the replication relationship.
type StorageReplicaInfoReplicaFaultDomain string

// StorageReplicaInfoReplicaType Values of ReplicaType describe the intended outcome of the replication.
type StorageReplicaInfoReplicaType string

// StorageReplicaInfoReplicaUpdateMode Values of ReplicaUpdateMode describe whether the target elements will be updated synchronously or asynchronously.
type StorageReplicaInfoReplicaUpdateMode string

// StorageReplicaInfoV140ConsistencyState The values of ConsistencyState indicate the consistency type used by the source and its associated target group.
type StorageReplicaInfoV140ConsistencyState string

// StorageReplicaInfoV140ConsistencyStatus The values of ConsistencyStatus indicate the current status of consistency. Consistency may have been disabled or might be experiencing an error condition.
type StorageReplicaInfoV140ConsistencyStatus string

// StorageReplicaInfoV140ConsistencyType The values of ConsistencyType indicates the consistency type used by the source and its associated target group.
type StorageReplicaInfoV140ConsistencyType string

// StorageReplicaInfoV140ReplicaInfo Defines the characteristics of a replica.
type StorageReplicaInfoV140ReplicaInfo struct {
	// ConsistencyEnabled True if consistency is enabled.
	ConsistencyEnabled *bool `json:"ConsistencyEnabled"`

	// ConsistencyState The current state of consistency.
	ConsistencyState *StorageReplicaInfoV140ReplicaInfo_ConsistencyState `json:"ConsistencyState,omitempty"`

	// ConsistencyStatus The current status of consistency.
	ConsistencyStatus *StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus `json:"ConsistencyStatus,omitempty"`

	// ConsistencyType Indicates the consistency type used by the source and its associated target group.
	ConsistencyType *StorageReplicaInfoV140ReplicaInfo_ConsistencyType `json:"ConsistencyType,omitempty"`

	// DataProtectionLineOfService A reference to a resource.
	DataProtectionLineOfService *OdataV4IdRef `json:"DataProtectionLineOfService,omitempty"`

	// FailedCopyStopsHostIO If true, the storage array tells host to stop sending data to source element if copying to a remote element fails.
	FailedCopyStopsHostIO *bool `json:"FailedCopyStopsHostIO"`

	// PercentSynced Specifies the percent of the work completed to reach synchronization.
	PercentSynced *int64 `json:"PercentSynced"`

	// RemoteSourceReplica ReplicaFaultDomain describes the fault domain (local or remote) of the replica relationship.
	RemoteSourceReplica *string `json:"RemoteSourceReplica"`

	// Replica A reference to a resource.
	Replica *OdataV4IdRef `json:"Replica,omitempty"`

	// ReplicaFaultDomain ReplicaFaultDomain describes the fault domain (local or remote) of the replica relationship.
	ReplicaFaultDomain *StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain `json:"ReplicaFaultDomain,omitempty"`

	// ReplicaPriority The priority of background copy engine I/O to be managed relative to host I/O operations during a sequential background copy operation.
	ReplicaPriority *StorageReplicaInfoV140ReplicaInfo_ReplicaPriority `json:"ReplicaPriority,omitempty"`

	// ReplicaProgressStatus The status of the session with respect to Replication activity.
	ReplicaProgressStatus *StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus `json:"ReplicaProgressStatus,omitempty"`

	// ReplicaReadOnlyAccess This property specifies whether the source, the target, or both elements are read only to the host.
	ReplicaReadOnlyAccess *StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess `json:"ReplicaReadOnlyAccess,omitempty"`

	// ReplicaRecoveryMode Describes whether the copy operation continues after a broken link is restored.
	ReplicaRecoveryMode *StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode `json:"ReplicaRecoveryMode,omitempty"`

	// ReplicaRole The source or target role of this replica.
	// Deprecated:
	ReplicaRole *StorageReplicaInfoV140ReplicaInfo_ReplicaRole `json:"ReplicaRole,omitempty"`

	// ReplicaSkewBytes Applies to Adaptive mode and it describes maximum number of bytes the SyncedElement (target) can be out of sync.
	ReplicaSkewBytes *int64 `json:"ReplicaSkewBytes"`

	// ReplicaState ReplicaState describes the state of the relationship with respect to Replication activity.
	ReplicaState *StorageReplicaInfoV140ReplicaInfo_ReplicaState `json:"ReplicaState,omitempty"`

	// ReplicaType ReplicaType describes the intended outcome of the replication.
	ReplicaType *StorageReplicaInfoV140ReplicaInfo_ReplicaType `json:"ReplicaType,omitempty"`

	// ReplicaUpdateMode Describes whether the target elements will be updated synchronously or asynchronously.
	ReplicaUpdateMode *StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode `json:"ReplicaUpdateMode,omitempty"`

	// RequestedReplicaState The last requested or desired state for the relationship.
	RequestedReplicaState *StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState `json:"RequestedReplicaState,omitempty"`

	// SourceReplica A reference to a resource.
	SourceReplica *OdataV4IdRef `json:"SourceReplica,omitempty"`

	// SyncMaintained Synchronization is maintained.
	SyncMaintained *bool `json:"SyncMaintained"`

	// UndiscoveredElement This property specifies whether the source, the target, or both elements involved in a copy operation are undiscovered.
	UndiscoveredElement *StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement `json:"UndiscoveredElement,omitempty"`

	// WhenActivated Specifies when point-in-time copy was taken or when the replication relationship is activated, reactivated, resumed or re-established.
	WhenActivated *string `json:"WhenActivated"`

	// WhenDeactivated Specifies when the replication relationship is deactivated.
	WhenDeactivated *string `json:"WhenDeactivated"`

	// WhenEstablished Specifies when the replication relationship is established.
	WhenEstablished *string `json:"WhenEstablished"`

	// WhenSuspended Specifies when the replication relationship is suspended.
	WhenSuspended *string `json:"WhenSuspended"`

	// WhenSynced The point in time that the Elements were synchronized.
	WhenSynced *string `json:"WhenSynced"`

	// WhenSynchronized Specifies when the replication relationship is synchronized.
	WhenSynchronized *string `json:"WhenSynchronized"`
}

// StorageReplicaInfoV140ReplicaInfoConsistencyState1 defines model for .
type StorageReplicaInfoV140ReplicaInfoConsistencyState1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ConsistencyState The current state of consistency.
type StorageReplicaInfoV140ReplicaInfo_ConsistencyState struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoConsistencyStatus1 defines model for .
type StorageReplicaInfoV140ReplicaInfoConsistencyStatus1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus The current status of consistency.
type StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoConsistencyType1 defines model for .
type StorageReplicaInfoV140ReplicaInfoConsistencyType1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ConsistencyType Indicates the consistency type used by the source and its associated target group.
type StorageReplicaInfoV140ReplicaInfo_ConsistencyType struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain ReplicaFaultDomain describes the fault domain (local or remote) of the replica relationship.
type StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaPriority1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaPriority1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaPriority The priority of background copy engine I/O to be managed relative to host I/O operations during a sequential background copy operation.
type StorageReplicaInfoV140ReplicaInfo_ReplicaPriority struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus The status of the session with respect to Replication activity.
type StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess This property specifies whether the source, the target, or both elements are read only to the host.
type StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode Describes whether the copy operation continues after a broken link is restored.
type StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaRole1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaRole1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaRole The source or target role of this replica.
type StorageReplicaInfoV140ReplicaInfo_ReplicaRole struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaState1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaState1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaState ReplicaState describes the state of the relationship with respect to Replication activity.
type StorageReplicaInfoV140ReplicaInfo_ReplicaState struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaType1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaType1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaType ReplicaType describes the intended outcome of the replication.
type StorageReplicaInfoV140ReplicaInfo_ReplicaType struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1 defines model for .
type StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode Describes whether the target elements will be updated synchronously or asynchronously.
type StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1 defines model for .
type StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState The last requested or desired state for the relationship.
type StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1 defines model for .
type StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1 = interface{}

// StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement This property specifies whether the source, the target, or both elements involved in a copy operation are undiscovered.
type StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement struct {
	union json.RawMessage
}

// StorageReplicaInfoV140ReplicaPriority ReplicaPriority allows the priority of background copy engine I/O to be managed relative to host I/O operations during a sequential background copy operation.
type StorageReplicaInfoV140ReplicaPriority string

// StorageReplicaInfoV140ReplicaProgressStatus Values of ReplicaProgressStatus describe the status of the session with respect to Replication activity.
type StorageReplicaInfoV140ReplicaProgressStatus string

// StorageReplicaInfoV140ReplicaReadOnlyAccess Values of ReplicaReadOnlyAccess specify whether the source, the target, or both elements are read only to the host.
type StorageReplicaInfoV140ReplicaReadOnlyAccess string

// StorageReplicaInfoV140ReplicaRecoveryMode Values of ReplicaRecoveryMode describe whether the copy operation continues after a broken link is restored.
type StorageReplicaInfoV140ReplicaRecoveryMode string

// StorageReplicaInfoV140ReplicaRole Values of ReplicaRole specify whether the resource is a source of replication or the target of replication.
type StorageReplicaInfoV140ReplicaRole string

// StorageReplicaInfoV140ReplicaState Values of ReplicaState describe the state of the relationship with respect to Replication activity.
type StorageReplicaInfoV140ReplicaState string

// StorageReplicaInfoV140UndiscoveredElement Values of UndiscoveredElement specify whether the source, the target, or both elements involved in a copy operation are undiscovered. An element is considered undiscovered if its object model is not known to the service performing the copy operation.
type StorageReplicaInfoV140UndiscoveredElement string

// StorageService Collection of resources that are managed and exposed to hosts as a group.
type StorageService = StorageServiceV170StorageService

// StorageServiceCollection A collection of references to Storage Service resource instances.
type StorageServiceCollection = StorageServiceCollectionStorageServiceCollection

// StorageServiceCollectionStorageServiceCollection A collection of references to Storage Service resource instances.
type StorageServiceCollectionStorageServiceCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType   *OdataV4Type                                                  `json:"@odata.type,omitempty"`
	Description *StorageServiceCollectionStorageServiceCollection_Description `json:"Description,omitempty"`

	// Members The value of each member references a StorageService resource.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// StorageServiceCollectionStorageServiceCollectionDescription1 defines model for .
type StorageServiceCollectionStorageServiceCollectionDescription1 = interface{}

// StorageServiceCollectionStorageServiceCollection_Description defines model for StorageServiceCollectionStorageServiceCollection.Description.
type StorageServiceCollectionStorageServiceCollection_Description struct {
	union json.RawMessage
}

// StorageServiceV170Actions The available actions for this resource.
type StorageServiceV170Actions struct {
	// HashStorageServiceSetEncryptionKey This action is used to set the encryption key for the storage subsystem.
	HashStorageServiceSetEncryptionKey *StorageServiceV170SetEncryptionKey `json:"#StorageService.SetEncryptionKey,omitempty"`

	// Oem The available OEM specific actions for this resource.
	Oem *StorageServiceV170OemActions `json:"Oem,omitempty"`
}

// StorageServiceV170Links Contains links to other resources that are related to this resource.
type StorageServiceV170Links struct {
	// DataProtectionLoSCapabilities A reference to a resource.
	DataProtectionLoSCapabilities *OdataV4IdRef `json:"DataProtectionLoSCapabilities,omitempty"`

	// DataSecurityLoSCapabilities A reference to a resource.
	DataSecurityLoSCapabilities *OdataV4IdRef `json:"DataSecurityLoSCapabilities,omitempty"`

	// DataStorageLoSCapabilities A reference to a resource.
	DataStorageLoSCapabilities *OdataV4IdRef `json:"DataStorageLoSCapabilities,omitempty"`

	// DefaultClassOfService A reference to a resource.
	DefaultClassOfService *OdataV4IdRef `json:"DefaultClassOfService,omitempty"`

	// HostingSystem A reference to a resource.
	HostingSystem *OdataV4IdRef `json:"HostingSystem,omitempty"`

	// IOConnectivityLoSCapabilities A reference to a resource.
	IOConnectivityLoSCapabilities *OdataV4IdRef `json:"IOConnectivityLoSCapabilities,omitempty"`

	// IOPerformanceLoSCapabilities A reference to a resource.
	IOPerformanceLoSCapabilities *OdataV4IdRef `json:"IOPerformanceLoSCapabilities,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// StorageServiceV170OemActions The available OEM specific actions for this resource.
type StorageServiceV170OemActions map[string]interface{}

// StorageServiceV170SetEncryptionKey This action is used to set the encryption key for the storage subsystem.
type StorageServiceV170SetEncryptionKey struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StorageServiceV170StorageService Collection of resources that are managed and exposed to hosts as a group.
type StorageServiceV170StorageService struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Actions The available actions for this resource.
	Actions *StorageServiceV170Actions `json:"Actions,omitempty"`

	// ClassesOfService A reference to a resource.
	ClassesOfService *OdataV4IdRef `json:"ClassesOfService,omitempty"`

	// ClientEndpointGroups A reference to a resource.
	ClientEndpointGroups *OdataV4IdRef `json:"ClientEndpointGroups,omitempty"`

	// Connections A reference to a resource.
	Connections *OdataV4IdRef `json:"Connections,omitempty"`

	// ConsistencyGroups A reference to a resource.
	ConsistencyGroups *OdataV4IdRef `json:"ConsistencyGroups,omitempty"`

	// DataProtectionLoSCapabilities A reference to a resource.
	DataProtectionLoSCapabilities *OdataV4IdRef `json:"DataProtectionLoSCapabilities,omitempty"`

	// DataSecurityLoSCapabilities A reference to a resource.
	DataSecurityLoSCapabilities *OdataV4IdRef `json:"DataSecurityLoSCapabilities,omitempty"`

	// DataStorageLoSCapabilities A reference to a resource.
	DataStorageLoSCapabilities *OdataV4IdRef `json:"DataStorageLoSCapabilities,omitempty"`

	// DefaultClassOfService A reference to a resource.
	DefaultClassOfService *OdataV4IdRef                                 `json:"DefaultClassOfService,omitempty"`
	Description           *StorageServiceV170StorageService_Description `json:"Description,omitempty"`

	// Drives A reference to a resource.
	Drives *OdataV4IdRef `json:"Drives,omitempty"`

	// EndpointGroups A reference to a resource.
	EndpointGroups *OdataV4IdRef `json:"EndpointGroups,omitempty"`

	// Endpoints A reference to a resource.
	Endpoints *OdataV4IdRef `json:"Endpoints,omitempty"`

	// FileSystems A reference to a resource.
	FileSystems *OdataV4IdRef `json:"FileSystems,omitempty"`

	// IOConnectivityLoSCapabilities A reference to a resource.
	IOConnectivityLoSCapabilities *OdataV4IdRef `json:"IOConnectivityLoSCapabilities,omitempty"`

	// IOPerformanceLoSCapabilities A reference to a resource.
	IOPerformanceLoSCapabilities *OdataV4IdRef `json:"IOPerformanceLoSCapabilities,omitempty"`

	// IOStatistics The properties of this type represent IO statistics.
	IOStatistics *IOStatisticsV104IOStatistics `json:"IOStatistics,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Identifier Any additional identifiers for a resource.
	Identifier *ResourceV1200Identifier `json:"Identifier,omitempty"`

	// LinesOfService The LinesOService defined for this StorageService.
	LinesOfService *[]OdataV4IdRef `json:"LinesOfService,omitempty"`

	// LinesOfServiceOdataCount The number of items in a collection.
	LinesOfServiceOdataCount *OdataV4Count `json:"LinesOfService@odata.count,omitempty"`

	// Links Contains links to other resources that are related to this resource.
	Links *StorageServiceV170Links `json:"Links,omitempty"`

	// Metrics The link to the metrics for this storage service.
	Metrics *StorageServiceV170StorageService_Metrics `json:"Metrics,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Redundancy Redundancy information for the storage subsystem.
	Redundancy *[]RedundancyV142Redundancy `json:"Redundancy,omitempty"`

	// RedundancyOdataCount The number of items in a collection.
	RedundancyOdataCount *OdataV4Count `json:"Redundancy@odata.count,omitempty"`

	// ServerEndpointGroups A reference to a resource.
	ServerEndpointGroups *OdataV4IdRef `json:"ServerEndpointGroups,omitempty"`

	// SpareResourceSets An array of SpareResourceSets.
	SpareResourceSets *[]OdataV4IdRef `json:"SpareResourceSets,omitempty"`

	// SpareResourceSetsOdataCount The number of items in a collection.
	SpareResourceSetsOdataCount *OdataV4Count `json:"SpareResourceSets@odata.count,omitempty"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// StorageGroups A reference to a resource.
	StorageGroups *OdataV4IdRef `json:"StorageGroups,omitempty"`

	// StoragePools A reference to a resource.
	StoragePools *OdataV4IdRef `json:"StoragePools,omitempty"`

	// StorageSubsystems A reference to storage subsystems managed by this storage service.
	StorageSubsystems *[]OdataV4IdRef `json:"StorageSubsystems,omitempty"`

	// StorageSubsystemsOdataCount The number of items in a collection.
	StorageSubsystemsOdataCount *OdataV4Count `json:"StorageSubsystems@odata.count,omitempty"`

	// Volumes A reference to a resource.
	Volumes *OdataV4IdRef `json:"Volumes,omitempty"`
}

// StorageServiceV170StorageServiceDescription1 defines model for .
type StorageServiceV170StorageServiceDescription1 = interface{}

// StorageServiceV170StorageService_Description defines model for StorageServiceV170StorageService.Description.
type StorageServiceV170StorageService_Description struct {
	union json.RawMessage
}

// StorageServiceV170StorageServiceMetrics1 defines model for .
type StorageServiceV170StorageServiceMetrics1 = interface{}

// StorageServiceV170StorageService_Metrics The link to the metrics for this storage service.
type StorageServiceV170StorageService_Metrics struct {
	union json.RawMessage
}

// StorageV1151Actions The available actions for this resource.
type StorageV1151Actions struct {
	// HashStorageResetToDefaults The reset action resets the storage device to factory defaults.  This can cause the loss of data.
	HashStorageResetToDefaults *StorageV1151ResetToDefaults `json:"#Storage.ResetToDefaults,omitempty"`

	// HashStorageSetEncryptionKey This action sets the local encryption key for the storage subsystem.
	HashStorageSetEncryptionKey *StorageV1151SetEncryptionKey `json:"#Storage.SetEncryptionKey,omitempty"`

	// Oem The available OEM-specific actions for this resource.
	Oem *StorageV1151OemActions `json:"Oem,omitempty"`
}

// StorageV1151AutoVolumeCreate defines model for Storage_v1_15_1_AutoVolumeCreate.
type StorageV1151AutoVolumeCreate string

// StorageV1151CacheSummary This type describes the cache memory of the storage controller in general detail.
type StorageV1151CacheSummary struct {
	// PersistentCacheSizeMiB The portion of the cache memory that is persistent, measured in MiB.
	PersistentCacheSizeMiB *int64 `json:"PersistentCacheSizeMiB"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// TotalCacheSizeMiB The total configured cache memory, measured in MiB.
	TotalCacheSizeMiB *int64 `json:"TotalCacheSizeMiB"`
}

// StorageV1151EncryptionMode defines model for Storage_v1_15_1_EncryptionMode.
type StorageV1151EncryptionMode string

// StorageV1151HotspareActivationPolicy defines model for Storage_v1_15_1_HotspareActivationPolicy.
type StorageV1151HotspareActivationPolicy string

// StorageV1151Links The links to other resources that are related to this resource.
type StorageV1151Links struct {
	// Enclosures An array of links to the chassis to which this storage subsystem is attached.
	Enclosures *[]OdataV4IdRef `json:"Enclosures,omitempty"`

	// EnclosuresOdataCount The number of items in a collection.
	EnclosuresOdataCount *OdataV4Count `json:"Enclosures@odata.count,omitempty"`

	// HostingStorageSystems The storage systems that host this storage subsystem.
	HostingStorageSystems *[]OdataV4IdRef `json:"HostingStorageSystems,omitempty"`

	// HostingStorageSystemsOdataCount The number of items in a collection.
	HostingStorageSystemsOdataCount *OdataV4Count `json:"HostingStorageSystems@odata.count,omitempty"`

	// NVMeoFDiscoverySubsystems An array of links to the discovery subsystems that discovered this subsystem in an NVMe-oF environment.
	NVMeoFDiscoverySubsystems *[]OdataV4IdRef `json:"NVMeoFDiscoverySubsystems,omitempty"`

	// NVMeoFDiscoverySubsystemsOdataCount The number of items in a collection.
	NVMeoFDiscoverySubsystemsOdataCount *OdataV4Count `json:"NVMeoFDiscoverySubsystems@odata.count,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// SimpleStorage A reference to a resource.
	SimpleStorage *OdataV4IdRef `json:"SimpleStorage,omitempty"`

	// StorageServices An array of links to the storage services that connect to this storage subsystem.
	StorageServices *[]OdataV4IdRef `json:"StorageServices,omitempty"`

	// StorageServicesOdataCount The number of items in a collection.
	StorageServicesOdataCount *OdataV4Count `json:"StorageServices@odata.count,omitempty"`
}

// StorageV1151OemActions The available OEM-specific actions for this resource.
type StorageV1151OemActions map[string]interface{}

// StorageV1151Rates This type describes the various controller rates used for processes such as volume rebuild or consistency checks.
type StorageV1151Rates struct {
	// ConsistencyCheckRatePercent The percentage of controller resources used for performing a data consistency check on volumes.
	ConsistencyCheckRatePercent *int64 `json:"ConsistencyCheckRatePercent"`

	// RebuildRatePercent The percentage of controller resources used for rebuilding/repairing volumes.
	RebuildRatePercent *int64 `json:"RebuildRatePercent"`

	// TransformationRatePercent The percentage of controller resources used for transforming volumes from one configuration to another.
	TransformationRatePercent *int64 `json:"TransformationRatePercent"`
}

// StorageV1151ResetToDefaults The reset action resets the storage device to factory defaults.  This can cause the loss of data.
type StorageV1151ResetToDefaults struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StorageV1151SetEncryptionKey This action sets the local encryption key for the storage subsystem.
type StorageV1151SetEncryptionKey struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// StorageV1151Storage The Storage schema defines a storage subsystem and its respective properties.  A storage subsystem represents a set of physical or virtual storage controllers and the resources, such as volumes, that can be accessed from that subsystem.
type StorageV1151Storage struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Actions The available actions for this resource.
	Actions          *StorageV1151Actions          `json:"Actions,omitempty"`
	AutoVolumeCreate *StorageV1151AutoVolumeCreate `json:"AutoVolumeCreate,omitempty"`

	// Connections A reference to a resource.
	Connections *OdataV4IdRef `json:"Connections,omitempty"`

	// ConsistencyGroups A reference to a resource.
	ConsistencyGroups *OdataV4IdRef `json:"ConsistencyGroups,omitempty"`

	// Controllers A reference to a resource.
	Controllers *OdataV4IdRef `json:"Controllers,omitempty"`

	// Description The description of this resource.  Used for commonality in the schema definitions.
	Description *ResourceDescription `json:"Description,omitempty"`

	// Drives The set of drives attached to the storage controllers that this resource represents.
	Drives *[]OdataV4IdRef `json:"Drives,omitempty"`

	// DrivesOdataCount The number of items in a collection.
	DrivesOdataCount *OdataV4Count               `json:"Drives@odata.count,omitempty"`
	EncryptionMode   *StorageV1151EncryptionMode `json:"EncryptionMode,omitempty"`

	// EndpointGroups A reference to a resource.
	EndpointGroups *OdataV4IdRef `json:"EndpointGroups,omitempty"`

	// FileSystems A reference to a resource.
	FileSystems              *OdataV4IdRef                         `json:"FileSystems,omitempty"`
	HotspareActivationPolicy *StorageV1151HotspareActivationPolicy `json:"HotspareActivationPolicy,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Identifiers The durable names for the storage subsystem.
	Identifiers *[]ResourceV1200Identifier `json:"Identifiers,omitempty"`

	// Links The links to other resources that are related to this resource.
	Links *StorageV1151Links `json:"Links,omitempty"`

	// LocalEncryptionKeyIdentifier The local encryption key identifier used by the storage subsystem.
	LocalEncryptionKeyIdentifier *string `json:"LocalEncryptionKeyIdentifier"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Redundancy Redundancy information for the storage subsystem.
	Redundancy *[]RedundancyV142Redundancy `json:"Redundancy,omitempty"`

	// RedundancyOdataCount The number of items in a collection.
	RedundancyOdataCount *OdataV4Count `json:"Redundancy@odata.count,omitempty"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// StorageControllers The set of storage controllers that this resource represents.
	// Deprecated:
	StorageControllers *[]StorageV1151StorageController `json:"StorageControllers,omitempty"`

	// StorageControllersOdataCount The number of items in a collection.
	StorageControllersOdataCount *OdataV4Count `json:"StorageControllers@odata.count,omitempty"`

	// StorageGroups A reference to a resource.
	StorageGroups *OdataV4IdRef `json:"StorageGroups,omitempty"`

	// StoragePools A reference to a resource.
	StoragePools *OdataV4IdRef `json:"StoragePools,omitempty"`

	// Volumes A reference to a resource.
	Volumes *OdataV4IdRef `json:"Volumes,omitempty"`
}

// StorageV1151StorageController The StorageController schema describes a storage controller and its properties.  A storage controller represents a physical or virtual storage device that produces volumes.
type StorageV1151StorageController struct {
	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// Actions The available actions for this resource.
	Actions *StorageV1151StorageControllerActions `json:"Actions,omitempty"`

	// Assembly A reference to a resource.
	Assembly *OdataV4IdRef `json:"Assembly,omitempty"`

	// AssetTag The user-assigned asset tag for this storage controller.
	AssetTag *string `json:"AssetTag"`

	// CacheSummary This type describes the cache memory of the storage controller in general detail.
	CacheSummary *StorageV1151CacheSummary `json:"CacheSummary,omitempty"`

	// Certificates A reference to a resource.
	Certificates *OdataV4IdRef `json:"Certificates,omitempty"`

	// ControllerRates This type describes the various controller rates used for processes such as volume rebuild or consistency checks.
	ControllerRates *StorageV1151Rates `json:"ControllerRates,omitempty"`

	// FirmwareVersion The firmware version of this storage controller.
	FirmwareVersion *string `json:"FirmwareVersion"`

	// Identifiers The durable names for the storage controller.
	Identifiers *[]ResourceV1200Identifier `json:"Identifiers,omitempty"`

	// Links The links to other resources that are related to this resource.
	Links *StorageV1151StorageControllerLinks `json:"Links,omitempty"`

	// Location The location of a resource.
	Location *ResourceV1200Location `json:"Location,omitempty"`

	// Manufacturer The manufacturer of this storage controller.
	Manufacturer *string `json:"Manufacturer"`

	// Measurements An array of DSP0274-defined measurement blocks.
	// Deprecated:
	Measurements *[]SoftwareInventoryV1102MeasurementBlock `json:"Measurements,omitempty"`

	// MemberId The unique identifier for the member within an array.
	MemberId *string `json:"MemberId,omitempty"`

	// Model The model number for the storage controller.
	Model *string `json:"Model"`

	// Name The name of the storage controller.
	Name *string `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PCIeInterface Properties that describe a PCIe interface.
	PCIeInterface *PCIeDeviceV1160PCIeInterface `json:"PCIeInterface,omitempty"`

	// PartNumber The part number for this storage controller.
	PartNumber *string `json:"PartNumber"`

	// Ports A reference to a resource.
	Ports *OdataV4IdRef `json:"Ports,omitempty"`

	// SKU The SKU for this storage controller.
	SKU *string `json:"SKU"`

	// SerialNumber The serial number for this storage controller.
	SerialNumber *string `json:"SerialNumber"`

	// SpeedGbps The maximum speed of the storage controller's device interface.
	SpeedGbps *float32 `json:"SpeedGbps"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// SupportedControllerProtocols The supported set of protocols for communicating with this storage controller.
	SupportedControllerProtocols *[]ProtocolProtocol `json:"SupportedControllerProtocols,omitempty"`

	// SupportedDeviceProtocols The protocols that the storage controller can use to communicate with attached devices.
	SupportedDeviceProtocols *[]ProtocolProtocol `json:"SupportedDeviceProtocols,omitempty"`

	// SupportedRAIDTypes The set of RAID types supported by the storage controller.
	SupportedRAIDTypes *[]VolumeRAIDType `json:"SupportedRAIDTypes,omitempty"`
}

// StorageV1151StorageControllerActions The available actions for this resource.
type StorageV1151StorageControllerActions struct {
	// Oem The available OEM-specific actions for this resource.
	Oem *StorageV1151StorageControllerOemActions `json:"Oem,omitempty"`
}

// StorageV1151StorageControllerLinks The links to other resources that are related to this resource.
type StorageV1151StorageControllerLinks struct {
	// Endpoints An array of links to the endpoints that connect to this controller.
	Endpoints *[]OdataV4IdRef `json:"Endpoints,omitempty"`

	// EndpointsOdataCount The number of items in a collection.
	EndpointsOdataCount *OdataV4Count `json:"Endpoints@odata.count,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PCIeFunctions An array of links to the PCIe functions that the storage controller produces.
	PCIeFunctions *[]OdataV4IdRef `json:"PCIeFunctions,omitempty"`

	// PCIeFunctionsOdataCount The number of items in a collection.
	PCIeFunctionsOdataCount *OdataV4Count `json:"PCIeFunctions@odata.count,omitempty"`

	// StorageServices An array of links to the storage services that connect to this controller.
	// Deprecated:
	StorageServices *[]OdataV4IdRef `json:"StorageServices,omitempty"`

	// StorageServicesOdataCount The number of items in a collection.
	StorageServicesOdataCount *OdataV4Count `json:"StorageServices@odata.count,omitempty"`
}

// StorageV1151StorageControllerOemActions The available OEM-specific actions for this resource.
type StorageV1151StorageControllerOemActions map[string]interface{}

// Volume Volume contains properties used to describe a volume, virtual disk, LUN, or other logical storage entity for any system.
type Volume = VolumeV1100Volume

// VolumeCollection A Collection of Volume resource instances.
type VolumeCollection = VolumeCollectionVolumeCollection

// VolumeCollectionVolumeCollection A Collection of Volume resource instances.
type VolumeCollectionVolumeCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Description The description of this resource.  Used for commonality in the schema definitions.
	Description *ResourceDescription `json:"Description,omitempty"`

	// Members The value of each member references a Volume resource.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// VolumeEncryptionTypes defines model for Volume_EncryptionTypes.
type VolumeEncryptionTypes string

// VolumeInitializeMethod defines model for Volume_InitializeMethod.
type VolumeInitializeMethod string

// VolumeLBAFormatType LBAFormatType is defined in the NVMe specification set. This field indicates the LBA data size supported; implementations may report up to 16 values. For more details refer to the appropriate NVMe specification.
type VolumeLBAFormatType string

// VolumeLBARelativePerformanceType Indicate the relative performance of the LBA format relative to other LBA formats supported by the controller.
type VolumeLBARelativePerformanceType string

// VolumeNamespaceType defines model for Volume_NamespaceType.
type VolumeNamespaceType string

// VolumeOperationType defines model for Volume_OperationType.
type VolumeOperationType string

// VolumeRAIDType defines model for Volume_RAIDType.
type VolumeRAIDType string

// VolumeReadCachePolicyType defines model for Volume_ReadCachePolicyType.
type VolumeReadCachePolicyType string

// VolumeVolumeType defines model for Volume_VolumeType.
type VolumeVolumeType string

// VolumeVolumeUsageType defines model for Volume_VolumeUsageType.
type VolumeVolumeUsageType string

// VolumeWriteCachePolicyType defines model for Volume_WriteCachePolicyType.
type VolumeWriteCachePolicyType string

// VolumeWriteCacheStateType defines model for Volume_WriteCacheStateType.
type VolumeWriteCacheStateType string

// VolumeWriteHoleProtectionPolicyType defines model for Volume_WriteHoleProtectionPolicyType.
type VolumeWriteHoleProtectionPolicyType string

// VolumeV1100ALUA defines model for Volume_v1_10_0_ALUA.
type VolumeV1100ALUA struct {
	// ANAGroupId The ANA group id for this volume.
	ANAGroupId *float32 `json:"ANAGroupId"`
}

// VolumeV1100Actions defines model for Volume_v1_10_0_Actions.
type VolumeV1100Actions struct {
	// HashVolumeAssignReplicaTarget This action is used to establish a replication relationship by assigning an existing volume to serve as a target replica for an existing source volume.
	HashVolumeAssignReplicaTarget *VolumeV1100AssignReplicaTarget `json:"#Volume.AssignReplicaTarget,omitempty"`

	// HashVolumeChangeRAIDLayout Request system change the RAID layout of the volume.
	HashVolumeChangeRAIDLayout *VolumeV1100ChangeRAIDLayout `json:"#Volume.ChangeRAIDLayout,omitempty"`

	// HashVolumeCheckConsistency This action is used to force a check of the Volume's parity or redundant data to ensure it matches calculated values.
	HashVolumeCheckConsistency *VolumeV1100CheckConsistency `json:"#Volume.CheckConsistency,omitempty"`

	// HashVolumeCreateReplicaTarget This action is used to create a new volume resource to provide expanded data protection through a replica relationship with the specified source volume.
	HashVolumeCreateReplicaTarget *VolumeV1100CreateReplicaTarget `json:"#Volume.CreateReplicaTarget,omitempty"`

	// HashVolumeForceEnable Request system force the volume to an enabled state regardless of data loss.
	HashVolumeForceEnable *VolumeV1100ForceEnable `json:"#Volume.ForceEnable,omitempty"`

	// HashVolumeInitialize This action is used to prepare the contents of the volume for use by the system. If InitializeMethod is not specified in the request body, but the property InitializeMethod is specified, the property InitializeMethod value should be used. If neither is specified, the InitializeMethod should be Foreground.
	HashVolumeInitialize *VolumeV1100Initialize `json:"#Volume.Initialize,omitempty"`

	// HashVolumeRemoveReplicaRelationship This action is used to disable data synchronization between a source and target volume, remove the replication relationship, and optionally delete the target volume.
	HashVolumeRemoveReplicaRelationship *VolumeV1100RemoveReplicaRelationship `json:"#Volume.RemoveReplicaRelationship,omitempty"`

	// HashVolumeResumeReplication This action is used to resume the active data synchronization between a source and target volume, without otherwise altering the replication relationship.
	HashVolumeResumeReplication *VolumeV1100ResumeReplication `json:"#Volume.ResumeReplication,omitempty"`

	// HashVolumeReverseReplicationRelationship This action is used to reverse the replication relationship between a source and target volume.
	HashVolumeReverseReplicationRelationship *VolumeV1100ReverseReplicationRelationship `json:"#Volume.ReverseReplicationRelationship,omitempty"`

	// HashVolumeSplitReplication This action is used to split the replication relationship and suspend data synchronization between a source and target volume.
	HashVolumeSplitReplication *VolumeV1100SplitReplication `json:"#Volume.SplitReplication,omitempty"`

	// HashVolumeSuspendReplication This action is used to suspend active data synchronization between a source and target volume, without otherwise altering the replication relationship.
	HashVolumeSuspendReplication *VolumeV1100SuspendReplication `json:"#Volume.SuspendReplication,omitempty"`
	Oem                          *VolumeV1100OemActions         `json:"Oem,omitempty"`
}

// VolumeV1100AssignReplicaTarget This action is used to establish a replication relationship by assigning an existing volume to serve as a target replica for an existing source volume.
type VolumeV1100AssignReplicaTarget struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100ChangeRAIDLayout Request system change the RAID layout of the volume.
type VolumeV1100ChangeRAIDLayout struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100CheckConsistency This action is used to force a check of the Volume's parity or redundant data to ensure it matches calculated values.
type VolumeV1100CheckConsistency struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100CreateReplicaTarget This action is used to create a new volume resource to provide expanded data protection through a replica relationship with the specified source volume.
type VolumeV1100CreateReplicaTarget struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100ForceEnable Request system force the volume to an enabled state regardless of data loss.
type VolumeV1100ForceEnable struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100Initialize This action is used to prepare the contents of the volume for use by the system. If InitializeMethod is not specified in the request body, but the property InitializeMethod is specified, the property InitializeMethod value should be used. If neither is specified, the InitializeMethod should be Foreground.
type VolumeV1100Initialize struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100LBAFormat defines model for Volume_v1_10_0_LBAFormat.
type VolumeV1100LBAFormat struct {
	// LBADataSizeBytes The LBA data size in bytes.
	LBADataSizeBytes *int64 `json:"LBADataSizeBytes"`

	// LBAFormatType The LBA format type.
	LBAFormatType *VolumeV1100LBAFormat_LBAFormatType `json:"LBAFormatType,omitempty"`

	// LBAMetadataSizeBytes The LBA metadata size in bytes.
	LBAMetadataSizeBytes *int64 `json:"LBAMetadataSizeBytes"`

	// RelativePerformance The LBA Relative Performance type.
	RelativePerformance *VolumeV1100LBAFormat_RelativePerformance `json:"RelativePerformance,omitempty"`
}

// VolumeV1100LBAFormatLBAFormatType1 defines model for .
type VolumeV1100LBAFormatLBAFormatType1 = interface{}

// VolumeV1100LBAFormat_LBAFormatType The LBA format type.
type VolumeV1100LBAFormat_LBAFormatType struct {
	union json.RawMessage
}

// VolumeV1100LBAFormatRelativePerformance1 defines model for .
type VolumeV1100LBAFormatRelativePerformance1 = interface{}

// VolumeV1100LBAFormat_RelativePerformance The LBA Relative Performance type.
type VolumeV1100LBAFormat_RelativePerformance struct {
	union json.RawMessage
}

// VolumeV1100Links Add ability to manage spare capacity.
type VolumeV1100Links struct {
	// CacheDataVolumes A pointer to the data volumes this volume serves as a cache volume.
	CacheDataVolumes *[]OdataV4IdRef `json:"CacheDataVolumes,omitempty"`

	// CacheDataVolumesOdataCount The number of items in a collection.
	CacheDataVolumesOdataCount *OdataV4Count `json:"CacheDataVolumes@odata.count,omitempty"`

	// CacheVolumeSource A pointer to the cache volume source for this volume.
	CacheVolumeSource *VolumeV1100Links_CacheVolumeSource `json:"CacheVolumeSource,omitempty"`

	// ClassOfService A reference to a resource.
	ClassOfService *OdataV4IdRef `json:"ClassOfService,omitempty"`

	// ClientEndpoints An array of references to the client Endpoints associated with this volume.
	ClientEndpoints *[]OdataV4IdRef `json:"ClientEndpoints,omitempty"`

	// ClientEndpointsOdataCount The number of items in a collection.
	ClientEndpointsOdataCount *OdataV4Count `json:"ClientEndpoints@odata.count,omitempty"`

	// ConsistencyGroups An array of references to the ConsistencyGroups associated with this volume.
	ConsistencyGroups *[]OdataV4IdRef `json:"ConsistencyGroups,omitempty"`

	// ConsistencyGroupsOdataCount The number of items in a collection.
	ConsistencyGroupsOdataCount *OdataV4Count `json:"ConsistencyGroups@odata.count,omitempty"`

	// Controllers An array of the Controllers associated with this volume.
	Controllers *[]OdataV4IdRef `json:"Controllers,omitempty"`

	// ControllersOdataCount The number of items in a collection.
	ControllersOdataCount *OdataV4Count `json:"Controllers@odata.count,omitempty"`

	// DedicatedSpareDrives An array of references to the drives which are dedicated spares for this volume.
	DedicatedSpareDrives *[]OdataV4IdRef `json:"DedicatedSpareDrives,omitempty"`

	// DedicatedSpareDrivesOdataCount The number of items in a collection.
	DedicatedSpareDrivesOdataCount *OdataV4Count `json:"DedicatedSpareDrives@odata.count,omitempty"`

	// Drives An array of references to the drives which contain this volume. This will reference Drives that either wholly or only partly contain this volume.
	Drives *[]OdataV4IdRef `json:"Drives,omitempty"`

	// DrivesOdataCount The number of items in a collection.
	DrivesOdataCount *OdataV4Count `json:"Drives@odata.count,omitempty"`

	// JournalingMedia A pointer to the Resource that serves as a journaling media for this volume.
	JournalingMedia *VolumeV1100Links_JournalingMedia `json:"JournalingMedia,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// OwningStorageResource A reference to a resource.
	OwningStorageResource *OdataV4IdRef `json:"OwningStorageResource,omitempty"`

	// OwningStorageService A reference to a resource.
	OwningStorageService *OdataV4IdRef `json:"OwningStorageService,omitempty"`

	// ProvidingStoragePool The StoragePool resource that provides this volume resource.
	ProvidingStoragePool *VolumeV1100Links_ProvidingStoragePool `json:"ProvidingStoragePool,omitempty"`

	// ServerEndpoints An array of references to the server Endpoints associated with this volume.
	ServerEndpoints *[]OdataV4IdRef `json:"ServerEndpoints,omitempty"`

	// ServerEndpointsOdataCount The number of items in a collection.
	ServerEndpointsOdataCount *OdataV4Count `json:"ServerEndpoints@odata.count,omitempty"`

	// SpareResourceSets An array of references to SpareResourceSets.
	SpareResourceSets *[]OdataV4IdRef `json:"SpareResourceSets,omitempty"`

	// SpareResourceSetsOdataCount The number of items in a collection.
	SpareResourceSetsOdataCount *OdataV4Count `json:"SpareResourceSets@odata.count,omitempty"`

	// StorageGroups An array of references to the StorageGroups associated with this volume.
	StorageGroups *[]OdataV4IdRef `json:"StorageGroups,omitempty"`

	// StorageGroupsOdataCount The number of items in a collection.
	StorageGroupsOdataCount *OdataV4Count `json:"StorageGroups@odata.count,omitempty"`
}

// VolumeV1100LinksCacheVolumeSource1 defines model for .
type VolumeV1100LinksCacheVolumeSource1 = interface{}

// VolumeV1100Links_CacheVolumeSource A pointer to the cache volume source for this volume.
type VolumeV1100Links_CacheVolumeSource struct {
	union json.RawMessage
}

// VolumeV1100LinksJournalingMedia1 defines model for .
type VolumeV1100LinksJournalingMedia1 = interface{}

// VolumeV1100Links_JournalingMedia A pointer to the Resource that serves as a journaling media for this volume.
type VolumeV1100Links_JournalingMedia struct {
	union json.RawMessage
}

// VolumeV1100LinksProvidingStoragePool1 defines model for .
type VolumeV1100LinksProvidingStoragePool1 = interface{}

// VolumeV1100Links_ProvidingStoragePool The StoragePool resource that provides this volume resource.
type VolumeV1100Links_ProvidingStoragePool struct {
	union json.RawMessage
}

// VolumeV1100NVMeNamespaceProperties This contains properties to use when Volume is used to describe an NVMe Namespace.
type VolumeV1100NVMeNamespaceProperties struct {
	// FormattedLBASize The LBA data size and metadata size combination that the namespace has been formatted with.
	FormattedLBASize *string `json:"FormattedLBASize"`

	// IsShareable Indicates the namespace is shareable.
	IsShareable *bool `json:"IsShareable"`

	// LBAFormat Describes the current LBA format ID and detailed properties.
	LBAFormat *VolumeV1100NVMeNamespaceProperties_LBAFormat `json:"LBAFormat,omitempty"`

	// LBAFormats Describes the LBA format IDs and detailed properties.
	LBAFormats *[]VolumeV1100NVMeNamespaceProperties_LBAFormats_Item `json:"LBAFormats,omitempty"`

	// LBAFormatsSupported A list of the LBA format types supported for the namespace, or potential namespaces.
	LBAFormatsSupported *[]VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item `json:"LBAFormatsSupported,omitempty"`

	// MetadataTransferredAtEndOfDataLBA This property indicates whether or not the metadata is transferred at the end of the LBA creating an extended data LBA.
	MetadataTransferredAtEndOfDataLBA *bool `json:"MetadataTransferredAtEndOfDataLBA"`

	// NVMeVersion The version of the NVMe Base Specification supported.
	NVMeVersion *string `json:"NVMeVersion"`

	// NamespaceFeatures This property contains a set of Namespace Features.
	NamespaceFeatures *VolumeV1100NVMeNamespaceProperties_NamespaceFeatures `json:"NamespaceFeatures,omitempty"`

	// NamespaceId The NVMe Namespace Identifier for this namespace.
	NamespaceId *string `json:"NamespaceId"`

	// NamespaceType Identifies the type of namespace.
	NamespaceType *VolumeV1100NVMeNamespaceProperties_NamespaceType `json:"NamespaceType,omitempty"`

	// NumberLBAFormats The number of LBA data size and metadata size combinations supported by this namespace. The value of this property is between 0 and 16.
	NumberLBAFormats *int64 `json:"NumberLBAFormats"`

	// SupportsIOPerformanceHints Indicates whether the namespace supports IO performance hints.
	SupportsIOPerformanceHints *bool `json:"SupportsIOPerformanceHints"`

	// SupportsMultipleNamespaceAttachments Indicates whether the namespace may be attached to two or more controllers.
	SupportsMultipleNamespaceAttachments *bool `json:"SupportsMultipleNamespaceAttachments"`

	// Type Identifies the type of namespace.
	Type *VolumeV1100NVMeNamespaceProperties_Type `json:"Type,omitempty"`
}

// VolumeV1100NVMeNamespacePropertiesLBAFormat1 defines model for .
type VolumeV1100NVMeNamespacePropertiesLBAFormat1 = interface{}

// VolumeV1100NVMeNamespaceProperties_LBAFormat Describes the current LBA format ID and detailed properties.
type VolumeV1100NVMeNamespaceProperties_LBAFormat struct {
	union json.RawMessage
}

// VolumeV1100NVMeNamespacePropertiesLBAFormats1 defines model for .
type VolumeV1100NVMeNamespacePropertiesLBAFormats1 = interface{}

// VolumeV1100NVMeNamespaceProperties_LBAFormats_Item defines model for Volume_v1_10_0_NVMeNamespaceProperties.LBAFormats.Item.
type VolumeV1100NVMeNamespaceProperties_LBAFormats_Item struct {
	union json.RawMessage
}

// VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1 defines model for .
type VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1 = interface{}

// VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item defines model for Volume_v1_10_0_NVMeNamespaceProperties.LBAFormatsSupported.Item.
type VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item struct {
	union json.RawMessage
}

// VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1 defines model for .
type VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1 = interface{}

// VolumeV1100NVMeNamespaceProperties_NamespaceFeatures This property contains a set of Namespace Features.
type VolumeV1100NVMeNamespaceProperties_NamespaceFeatures struct {
	union json.RawMessage
}

// VolumeV1100NVMeNamespacePropertiesNamespaceType1 defines model for .
type VolumeV1100NVMeNamespacePropertiesNamespaceType1 = interface{}

// VolumeV1100NVMeNamespaceProperties_NamespaceType Identifies the type of namespace.
type VolumeV1100NVMeNamespaceProperties_NamespaceType struct {
	union json.RawMessage
}

// VolumeV1100NVMeNamespacePropertiesType1 defines model for .
type VolumeV1100NVMeNamespacePropertiesType1 = interface{}

// VolumeV1100NVMeNamespaceProperties_Type Identifies the type of namespace.
type VolumeV1100NVMeNamespaceProperties_Type struct {
	union json.RawMessage
}

// VolumeV1100NamespaceFeatures defines model for Volume_v1_10_0_NamespaceFeatures.
type VolumeV1100NamespaceFeatures struct {
	// SupportsAtomicTransactionSize Indicates that the NVM fields for Namespace preferred write granularity (NPWG), write alignment (NPWA), deallocate granularity (NPDG), deallocate alignment (NPDA) and optimal write size (NOWS)  are defined for this namespace and should be used by the host for I/O optimization.
	SupportsAtomicTransactionSize *bool `json:"SupportsAtomicTransactionSize"`

	// SupportsDeallocatedOrUnwrittenLBError This property indicates that the controller supports deallocated or unwritten logical block error for this namespace.
	SupportsDeallocatedOrUnwrittenLBError *bool `json:"SupportsDeallocatedOrUnwrittenLBError"`

	// SupportsIOPerformanceHints Indicates that the Namespace Atomic Write Unit Normal (NAWUN), Namespace Atomic Write Unit Power Fail (NAWUPF), and Namespace Atomic Compare and Write Unit (NACWU) fields are defined for this namespace and should be used by the host for this namespace instead of the controller-level properties AWUN, AWUPF, and ACWU.
	SupportsIOPerformanceHints *bool `json:"SupportsIOPerformanceHints"`

	// SupportsNGUIDReuse This property indicates that the namespace supports the use of an NGUID (namespace globally unique identifier) value.
	SupportsNGUIDReuse *bool `json:"SupportsNGUIDReuse"`

	// SupportsThinProvisioning This property indicates whether or not the NVMe Namespace supports thin provisioning.
	SupportsThinProvisioning *bool `json:"SupportsThinProvisioning"`
}

// VolumeV1100OemActions defines model for Volume_v1_10_0_OemActions.
type VolumeV1100OemActions map[string]interface{}

// VolumeV1100Operation defines model for Volume_v1_10_0_Operation.
type VolumeV1100Operation struct {
	// AssociatedFeaturesRegistry A reference to a resource.
	AssociatedFeaturesRegistry *OdataV4IdRef `json:"AssociatedFeaturesRegistry,omitempty"`

	// Operation The type of the operation.
	Operation *VolumeV1100Operation_Operation `json:"Operation,omitempty"`

	// OperationName The name of the operation.
	// Deprecated:
	OperationName *string `json:"OperationName"`

	// PercentageComplete The percentage of the operation that has been completed.
	PercentageComplete *int64 `json:"PercentageComplete"`
}

// VolumeV1100OperationOperation1 defines model for .
type VolumeV1100OperationOperation1 = interface{}

// VolumeV1100Operation_Operation The type of the operation.
type VolumeV1100Operation_Operation struct {
	union json.RawMessage
}

// VolumeV1100RemoveReplicaRelationship This action is used to disable data synchronization between a source and target volume, remove the replication relationship, and optionally delete the target volume.
type VolumeV1100RemoveReplicaRelationship struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100ResumeReplication This action is used to resume the active data synchronization between a source and target volume, without otherwise altering the replication relationship.
type VolumeV1100ResumeReplication struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100ReverseReplicationRelationship This action is used to reverse the replication relationship between a source and target volume.
type VolumeV1100ReverseReplicationRelationship struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100SplitReplication This action is used to split the replication relationship and suspend data synchronization between a source and target volume.
type VolumeV1100SplitReplication struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100SuspendReplication This action is used to suspend active data synchronization between a source and target volume, without otherwise altering the replication relationship.
type VolumeV1100SuspendReplication struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// VolumeV1100Volume Volume contains properties used to describe a volume, virtual disk, LUN, or other logical storage entity for any system.
type VolumeV1100Volume struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// ALUA ALUA properties for this volume.
	ALUA *VolumeV1100Volume_ALUA `json:"ALUA,omitempty"`

	// AccessCapabilities Supported IO access capabilities.
	AccessCapabilities *[]VolumeV1100Volume_AccessCapabilities_Item `json:"AccessCapabilities,omitempty"`
	Actions            *VolumeV1100Actions                          `json:"Actions,omitempty"`

	// AllocatedPools A reference to a resource.
	AllocatedPools *OdataV4IdRef `json:"AllocatedPools,omitempty"`

	// BlockSizeBytes The size of the smallest addressable unit (Block) of this volume in bytes.
	BlockSizeBytes *int64 `json:"BlockSizeBytes"`

	// Capacity This is the schema definition for the Capacity of a device. It represents the properties for capacity for any data store.
	Capacity *CapacityV100Capacity `json:"Capacity,omitempty"`

	// CapacityBytes The size in bytes of this Volume.
	CapacityBytes *int64 `json:"CapacityBytes"`

	// CapacitySources An array of space allocations to this volume.
	CapacitySources *[]CapacityV121CapacitySource `json:"CapacitySources,omitempty"`

	// CapacitySourcesOdataCount The number of items in a collection.
	CapacitySourcesOdataCount *OdataV4Count `json:"CapacitySources@odata.count,omitempty"`

	// Compressed Indicator of whether or not the Volume has compression enabled.
	Compressed *bool `json:"Compressed"`

	// Connections An array of references to Connections that includes this volume.
	Connections *[]OdataV4IdRef `json:"Connections,omitempty"`

	// ConnectionsOdataCount The number of items in a collection.
	ConnectionsOdataCount *OdataV4Count `json:"Connections@odata.count,omitempty"`

	// Deduplicated Indicator of whether or not the Volume has deduplication enabled.
	Deduplicated *bool                          `json:"Deduplicated"`
	Description  *VolumeV1100Volume_Description `json:"Description,omitempty"`

	// DisplayName A user-configurable string to name the volume.
	DisplayName *string `json:"DisplayName"`

	// Encrypted Is this Volume encrypted.
	Encrypted *bool `json:"Encrypted"`

	// EncryptionTypes The types of encryption used by this Volume.
	EncryptionTypes *[]VolumeEncryptionTypes `json:"EncryptionTypes,omitempty"`

	// IOPerfModeEnabled Indicates the IO performance mode setting for the volume.
	IOPerfModeEnabled *bool `json:"IOPerfModeEnabled"`

	// IOStatistics The properties of this type represent IO statistics.
	IOStatistics *IOStatisticsV104IOStatistics `json:"IOStatistics,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Identifiers The Durable names for the volume.
	Identifiers *[]ResourceV1200Identifier `json:"Identifiers,omitempty"`

	// InitializeMethod Indicates the Initialization Method used for this volume. If InitializeMethod is not specified, the InitializeMethod should be Foreground.
	InitializeMethod *VolumeV1100Volume_InitializeMethod `json:"InitializeMethod,omitempty"`

	// IsBootCapable This property indicates whether or not the Volume contains a boot image and is capable of booting.
	IsBootCapable *bool `json:"IsBootCapable"`

	// Links Add ability to manage spare capacity.
	Links *VolumeV1100Links `json:"Links,omitempty"`

	// LogicalUnitNumber Indicates the host-visible LogicalUnitNumber assigned to this Volume.
	LogicalUnitNumber *int64 `json:"LogicalUnitNumber"`

	// LowSpaceWarningThresholdPercents Low space warning.
	LowSpaceWarningThresholdPercents *[]int64 `json:"LowSpaceWarningThresholdPercents,omitempty"`

	// Manufacturer The manufacturer or OEM of this storage volume.
	Manufacturer *string `json:"Manufacturer"`

	// MaxBlockSizeBytes Max Block size in bytes.
	MaxBlockSizeBytes *int64 `json:"MaxBlockSizeBytes"`

	// MediaSpanCount Indicates the number of media elements used per span in the secondary RAID for a hierarchical RAID type.
	MediaSpanCount *int64 `json:"MediaSpanCount"`

	// Metrics A reference to a resource.
	Metrics *OdataV4IdRef `json:"Metrics,omitempty"`

	// Model The model number for this storage volume.
	Model *string `json:"Model"`

	// NVMeNamespaceProperties This property contains properties to use when Volume is used to describe an NVMe Namespace.
	NVMeNamespaceProperties *VolumeV1100Volume_NVMeNamespaceProperties `json:"NVMeNamespaceProperties,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Operations The operations currently running on the Volume.
	Operations *[]VolumeV1100Operation `json:"Operations,omitempty"`

	// OptimumIOSizeBytes The size in bytes of this Volume's optimum IO size.
	OptimumIOSizeBytes *int64 `json:"OptimumIOSizeBytes"`

	// ProvisioningPolicy This property specifies the volume's storage allocation, or provisioning policy.
	ProvisioningPolicy *VolumeV1100Volume_ProvisioningPolicy `json:"ProvisioningPolicy,omitempty"`

	// RAIDType The RAID type of this volume.
	RAIDType *VolumeV1100Volume_RAIDType `json:"RAIDType,omitempty"`

	// ReadCachePolicy Indicates the read cache policy setting for the Volume.
	ReadCachePolicy *VolumeV1100Volume_ReadCachePolicy `json:"ReadCachePolicy,omitempty"`

	// RecoverableCapacitySourceCount Current number of capacity source resources that are available as replacements.
	RecoverableCapacitySourceCount *int64 `json:"RecoverableCapacitySourceCount"`

	// RemainingCapacityPercent The percentage of the capacity remaining in the Volume.
	RemainingCapacityPercent *int64 `json:"RemainingCapacityPercent"`

	// RemoteReplicaTargets URIs to the resources that are remote target replicas of this source.
	RemoteReplicaTargets *[]string `json:"RemoteReplicaTargets,omitempty"`

	// ReplicaInfo Defines the characteristics of a replica.
	ReplicaInfo *StorageReplicaInfoV140ReplicaInfo `json:"ReplicaInfo,omitempty"`

	// ReplicaTargets The resources that are target replicas of this source.
	ReplicaTargets *[]OdataV4IdRef `json:"ReplicaTargets,omitempty"`

	// ReplicaTargetsOdataCount The number of items in a collection.
	ReplicaTargetsOdataCount *OdataV4Count `json:"ReplicaTargets@odata.count,omitempty"`

	// ReplicationEnabled Indicates whether or not replication is enabled on the volume.
	ReplicationEnabled *bool `json:"ReplicationEnabled"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// StorageGroups A reference to a resource.
	StorageGroups *OdataV4IdRef `json:"StorageGroups,omitempty"`

	// StripSizeBytes The number of blocks (bytes) in a strip in a disk array that uses striped data mapping.
	StripSizeBytes *int64 `json:"StripSizeBytes"`

	// VolumeType The type of this volume.
	// Deprecated:
	VolumeType *VolumeV1100Volume_VolumeType `json:"VolumeType,omitempty"`

	// VolumeUsage Indicates the Volume usage type setting for the Volume.
	VolumeUsage *VolumeV1100Volume_VolumeUsage `json:"VolumeUsage,omitempty"`

	// WriteCachePolicy Indicates the write cache policy setting for the Volume.
	WriteCachePolicy *VolumeV1100Volume_WriteCachePolicy `json:"WriteCachePolicy,omitempty"`

	// WriteCacheState Indicates the WriteCacheState policy setting for the Volume.
	WriteCacheState           *VolumeV1100Volume_WriteCacheState   `json:"WriteCacheState,omitempty"`
	WriteHoleProtectionPolicy *VolumeWriteHoleProtectionPolicyType `json:"WriteHoleProtectionPolicy,omitempty"`
}

// VolumeV1100VolumeALUA1 defines model for .
type VolumeV1100VolumeALUA1 = interface{}

// VolumeV1100Volume_ALUA ALUA properties for this volume.
type VolumeV1100Volume_ALUA struct {
	union json.RawMessage
}

// VolumeV1100VolumeAccessCapabilities1 defines model for .
type VolumeV1100VolumeAccessCapabilities1 = interface{}

// VolumeV1100Volume_AccessCapabilities_Item defines model for Volume_v1_10_0_Volume.AccessCapabilities.Item.
type VolumeV1100Volume_AccessCapabilities_Item struct {
	union json.RawMessage
}

// VolumeV1100VolumeDescription1 defines model for .
type VolumeV1100VolumeDescription1 = interface{}

// VolumeV1100Volume_Description defines model for VolumeV1100Volume.Description.
type VolumeV1100Volume_Description struct {
	union json.RawMessage
}

// VolumeV1100VolumeInitializeMethod1 defines model for .
type VolumeV1100VolumeInitializeMethod1 = interface{}

// VolumeV1100Volume_InitializeMethod Indicates the Initialization Method used for this volume. If InitializeMethod is not specified, the InitializeMethod should be Foreground.
type VolumeV1100Volume_InitializeMethod struct {
	union json.RawMessage
}

// VolumeV1100VolumeNVMeNamespaceProperties1 defines model for .
type VolumeV1100VolumeNVMeNamespaceProperties1 = interface{}

// VolumeV1100Volume_NVMeNamespaceProperties This property contains properties to use when Volume is used to describe an NVMe Namespace.
type VolumeV1100Volume_NVMeNamespaceProperties struct {
	union json.RawMessage
}

// VolumeV1100VolumeProvisioningPolicy1 defines model for .
type VolumeV1100VolumeProvisioningPolicy1 = interface{}

// VolumeV1100Volume_ProvisioningPolicy This property specifies the volume's storage allocation, or provisioning policy.
type VolumeV1100Volume_ProvisioningPolicy struct {
	union json.RawMessage
}

// VolumeV1100VolumeRAIDType1 defines model for .
type VolumeV1100VolumeRAIDType1 = interface{}

// VolumeV1100Volume_RAIDType The RAID type of this volume.
type VolumeV1100Volume_RAIDType struct {
	union json.RawMessage
}

// VolumeV1100VolumeReadCachePolicy1 defines model for .
type VolumeV1100VolumeReadCachePolicy1 = interface{}

// VolumeV1100Volume_ReadCachePolicy Indicates the read cache policy setting for the Volume.
type VolumeV1100Volume_ReadCachePolicy struct {
	union json.RawMessage
}

// VolumeV1100VolumeVolumeType1 defines model for .
type VolumeV1100VolumeVolumeType1 = interface{}

// VolumeV1100Volume_VolumeType The type of this volume.
type VolumeV1100Volume_VolumeType struct {
	union json.RawMessage
}

// VolumeV1100VolumeVolumeUsage1 defines model for .
type VolumeV1100VolumeVolumeUsage1 = interface{}

// VolumeV1100Volume_VolumeUsage Indicates the Volume usage type setting for the Volume.
type VolumeV1100Volume_VolumeUsage struct {
	union json.RawMessage
}

// VolumeV1100VolumeWriteCachePolicy1 defines model for .
type VolumeV1100VolumeWriteCachePolicy1 = interface{}

// VolumeV1100Volume_WriteCachePolicy Indicates the write cache policy setting for the Volume.
type VolumeV1100Volume_WriteCachePolicy struct {
	union json.RawMessage
}

// VolumeV1100VolumeWriteCacheState1 defines model for .
type VolumeV1100VolumeWriteCacheState1 = interface{}

// VolumeV1100Volume_WriteCacheState Indicates the WriteCacheState policy setting for the Volume.
type VolumeV1100Volume_WriteCacheState struct {
	union json.RawMessage
}

// OdataV4Context The OData description of a payload.
type OdataV4Context = string

// OdataV4Count The number of items in a collection.
type OdataV4Count = int64

// OdataV4Etag The current ETag of the resource.
type OdataV4Etag = string

// OdataV4Id The unique identifier for a resource.
type OdataV4Id = string

// OdataV4IdRef A reference to a resource.
type OdataV4IdRef struct {
	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`
}

// OdataV4NextLink The URI to the resource containing the next set of partial members.
type OdataV4NextLink = string

// OdataV4Type The type of a resource.
type OdataV4Type = string

// AsActionInfoV142ParameterTypes returns the union data inside the ActionInfoV142Parameters_DataType as a ActionInfoV142ParameterTypes
func (t ActionInfoV142Parameters_DataType) AsActionInfoV142ParameterTypes() (ActionInfoV142ParameterTypes, error) {
	var body ActionInfoV142ParameterTypes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionInfoV142ParameterTypes overwrites any union data inside the ActionInfoV142Parameters_DataType as the provided ActionInfoV142ParameterTypes
func (t *ActionInfoV142Parameters_DataType) FromActionInfoV142ParameterTypes(v ActionInfoV142ParameterTypes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionInfoV142ParameterTypes performs a merge with any union data inside the ActionInfoV142Parameters_DataType, using the provided ActionInfoV142ParameterTypes
func (t *ActionInfoV142Parameters_DataType) MergeActionInfoV142ParameterTypes(v ActionInfoV142ParameterTypes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionInfoV142ParametersDataType1 returns the union data inside the ActionInfoV142Parameters_DataType as a ActionInfoV142ParametersDataType1
func (t ActionInfoV142Parameters_DataType) AsActionInfoV142ParametersDataType1() (ActionInfoV142ParametersDataType1, error) {
	var body ActionInfoV142ParametersDataType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionInfoV142ParametersDataType1 overwrites any union data inside the ActionInfoV142Parameters_DataType as the provided ActionInfoV142ParametersDataType1
func (t *ActionInfoV142Parameters_DataType) FromActionInfoV142ParametersDataType1(v ActionInfoV142ParametersDataType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionInfoV142ParametersDataType1 performs a merge with any union data inside the ActionInfoV142Parameters_DataType, using the provided ActionInfoV142ParametersDataType1
func (t *ActionInfoV142Parameters_DataType) MergeActionInfoV142ParametersDataType1(v ActionInfoV142ParametersDataType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionInfoV142Parameters_DataType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionInfoV142Parameters_DataType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the CapacityV121CapacitySource_Description as a ResourceDescription
func (t CapacityV121CapacitySource_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the CapacityV121CapacitySource_Description as the provided ResourceDescription
func (t *CapacityV121CapacitySource_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the CapacityV121CapacitySource_Description, using the provided ResourceDescription
func (t *CapacityV121CapacitySource_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCapacityV121CapacitySourceDescription1 returns the union data inside the CapacityV121CapacitySource_Description as a CapacityV121CapacitySourceDescription1
func (t CapacityV121CapacitySource_Description) AsCapacityV121CapacitySourceDescription1() (CapacityV121CapacitySourceDescription1, error) {
	var body CapacityV121CapacitySourceDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCapacityV121CapacitySourceDescription1 overwrites any union data inside the CapacityV121CapacitySource_Description as the provided CapacityV121CapacitySourceDescription1
func (t *CapacityV121CapacitySource_Description) FromCapacityV121CapacitySourceDescription1(v CapacityV121CapacitySourceDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCapacityV121CapacitySourceDescription1 performs a merge with any union data inside the CapacityV121CapacitySource_Description, using the provided CapacityV121CapacitySourceDescription1
func (t *CapacityV121CapacitySource_Description) MergeCapacityV121CapacitySourceDescription1(v CapacityV121CapacitySourceDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CapacityV121CapacitySource_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CapacityV121CapacitySource_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPCIeDevicePCIeTypes returns the union data inside the PCIeDeviceV1160PCIeInterface_MaxPCIeType as a PCIeDevicePCIeTypes
func (t PCIeDeviceV1160PCIeInterface_MaxPCIeType) AsPCIeDevicePCIeTypes() (PCIeDevicePCIeTypes, error) {
	var body PCIeDevicePCIeTypes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPCIeDevicePCIeTypes overwrites any union data inside the PCIeDeviceV1160PCIeInterface_MaxPCIeType as the provided PCIeDevicePCIeTypes
func (t *PCIeDeviceV1160PCIeInterface_MaxPCIeType) FromPCIeDevicePCIeTypes(v PCIeDevicePCIeTypes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePCIeDevicePCIeTypes performs a merge with any union data inside the PCIeDeviceV1160PCIeInterface_MaxPCIeType, using the provided PCIeDevicePCIeTypes
func (t *PCIeDeviceV1160PCIeInterface_MaxPCIeType) MergePCIeDevicePCIeTypes(v PCIeDevicePCIeTypes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPCIeDeviceV1160PCIeInterfaceMaxPCIeType1 returns the union data inside the PCIeDeviceV1160PCIeInterface_MaxPCIeType as a PCIeDeviceV1160PCIeInterfaceMaxPCIeType1
func (t PCIeDeviceV1160PCIeInterface_MaxPCIeType) AsPCIeDeviceV1160PCIeInterfaceMaxPCIeType1() (PCIeDeviceV1160PCIeInterfaceMaxPCIeType1, error) {
	var body PCIeDeviceV1160PCIeInterfaceMaxPCIeType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPCIeDeviceV1160PCIeInterfaceMaxPCIeType1 overwrites any union data inside the PCIeDeviceV1160PCIeInterface_MaxPCIeType as the provided PCIeDeviceV1160PCIeInterfaceMaxPCIeType1
func (t *PCIeDeviceV1160PCIeInterface_MaxPCIeType) FromPCIeDeviceV1160PCIeInterfaceMaxPCIeType1(v PCIeDeviceV1160PCIeInterfaceMaxPCIeType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePCIeDeviceV1160PCIeInterfaceMaxPCIeType1 performs a merge with any union data inside the PCIeDeviceV1160PCIeInterface_MaxPCIeType, using the provided PCIeDeviceV1160PCIeInterfaceMaxPCIeType1
func (t *PCIeDeviceV1160PCIeInterface_MaxPCIeType) MergePCIeDeviceV1160PCIeInterfaceMaxPCIeType1(v PCIeDeviceV1160PCIeInterfaceMaxPCIeType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PCIeDeviceV1160PCIeInterface_MaxPCIeType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PCIeDeviceV1160PCIeInterface_MaxPCIeType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPCIeDevicePCIeTypes returns the union data inside the PCIeDeviceV1160PCIeInterface_PCIeType as a PCIeDevicePCIeTypes
func (t PCIeDeviceV1160PCIeInterface_PCIeType) AsPCIeDevicePCIeTypes() (PCIeDevicePCIeTypes, error) {
	var body PCIeDevicePCIeTypes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPCIeDevicePCIeTypes overwrites any union data inside the PCIeDeviceV1160PCIeInterface_PCIeType as the provided PCIeDevicePCIeTypes
func (t *PCIeDeviceV1160PCIeInterface_PCIeType) FromPCIeDevicePCIeTypes(v PCIeDevicePCIeTypes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePCIeDevicePCIeTypes performs a merge with any union data inside the PCIeDeviceV1160PCIeInterface_PCIeType, using the provided PCIeDevicePCIeTypes
func (t *PCIeDeviceV1160PCIeInterface_PCIeType) MergePCIeDevicePCIeTypes(v PCIeDevicePCIeTypes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPCIeDeviceV1160PCIeInterfacePCIeType1 returns the union data inside the PCIeDeviceV1160PCIeInterface_PCIeType as a PCIeDeviceV1160PCIeInterfacePCIeType1
func (t PCIeDeviceV1160PCIeInterface_PCIeType) AsPCIeDeviceV1160PCIeInterfacePCIeType1() (PCIeDeviceV1160PCIeInterfacePCIeType1, error) {
	var body PCIeDeviceV1160PCIeInterfacePCIeType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPCIeDeviceV1160PCIeInterfacePCIeType1 overwrites any union data inside the PCIeDeviceV1160PCIeInterface_PCIeType as the provided PCIeDeviceV1160PCIeInterfacePCIeType1
func (t *PCIeDeviceV1160PCIeInterface_PCIeType) FromPCIeDeviceV1160PCIeInterfacePCIeType1(v PCIeDeviceV1160PCIeInterfacePCIeType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePCIeDeviceV1160PCIeInterfacePCIeType1 performs a merge with any union data inside the PCIeDeviceV1160PCIeInterface_PCIeType, using the provided PCIeDeviceV1160PCIeInterfacePCIeType1
func (t *PCIeDeviceV1160PCIeInterface_PCIeType) MergePCIeDeviceV1160PCIeInterfacePCIeType1(v PCIeDeviceV1160PCIeInterfacePCIeType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PCIeDeviceV1160PCIeInterface_PCIeType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PCIeDeviceV1160PCIeInterface_PCIeType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRedundancyV142RedundancyMode returns the union data inside the RedundancyV142Redundancy_Mode as a RedundancyV142RedundancyMode
func (t RedundancyV142Redundancy_Mode) AsRedundancyV142RedundancyMode() (RedundancyV142RedundancyMode, error) {
	var body RedundancyV142RedundancyMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRedundancyV142RedundancyMode overwrites any union data inside the RedundancyV142Redundancy_Mode as the provided RedundancyV142RedundancyMode
func (t *RedundancyV142Redundancy_Mode) FromRedundancyV142RedundancyMode(v RedundancyV142RedundancyMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRedundancyV142RedundancyMode performs a merge with any union data inside the RedundancyV142Redundancy_Mode, using the provided RedundancyV142RedundancyMode
func (t *RedundancyV142Redundancy_Mode) MergeRedundancyV142RedundancyMode(v RedundancyV142RedundancyMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRedundancyV142RedundancyMode1 returns the union data inside the RedundancyV142Redundancy_Mode as a RedundancyV142RedundancyMode1
func (t RedundancyV142Redundancy_Mode) AsRedundancyV142RedundancyMode1() (RedundancyV142RedundancyMode1, error) {
	var body RedundancyV142RedundancyMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRedundancyV142RedundancyMode1 overwrites any union data inside the RedundancyV142Redundancy_Mode as the provided RedundancyV142RedundancyMode1
func (t *RedundancyV142Redundancy_Mode) FromRedundancyV142RedundancyMode1(v RedundancyV142RedundancyMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRedundancyV142RedundancyMode1 performs a merge with any union data inside the RedundancyV142Redundancy_Mode, using the provided RedundancyV142RedundancyMode1
func (t *RedundancyV142Redundancy_Mode) MergeRedundancyV142RedundancyMode1(v RedundancyV142RedundancyMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RedundancyV142Redundancy_Mode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RedundancyV142Redundancy_Mode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActionInfoV142Parameters returns the union data inside the ResolutionStepV101ResolutionStep_ActionParameters_Item as a ActionInfoV142Parameters
func (t ResolutionStepV101ResolutionStep_ActionParameters_Item) AsActionInfoV142Parameters() (ActionInfoV142Parameters, error) {
	var body ActionInfoV142Parameters
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionInfoV142Parameters overwrites any union data inside the ResolutionStepV101ResolutionStep_ActionParameters_Item as the provided ActionInfoV142Parameters
func (t *ResolutionStepV101ResolutionStep_ActionParameters_Item) FromActionInfoV142Parameters(v ActionInfoV142Parameters) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionInfoV142Parameters performs a merge with any union data inside the ResolutionStepV101ResolutionStep_ActionParameters_Item, using the provided ActionInfoV142Parameters
func (t *ResolutionStepV101ResolutionStep_ActionParameters_Item) MergeActionInfoV142Parameters(v ActionInfoV142Parameters) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResolutionStepV101ResolutionStepActionParameters1 returns the union data inside the ResolutionStepV101ResolutionStep_ActionParameters_Item as a ResolutionStepV101ResolutionStepActionParameters1
func (t ResolutionStepV101ResolutionStep_ActionParameters_Item) AsResolutionStepV101ResolutionStepActionParameters1() (ResolutionStepV101ResolutionStepActionParameters1, error) {
	var body ResolutionStepV101ResolutionStepActionParameters1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResolutionStepV101ResolutionStepActionParameters1 overwrites any union data inside the ResolutionStepV101ResolutionStep_ActionParameters_Item as the provided ResolutionStepV101ResolutionStepActionParameters1
func (t *ResolutionStepV101ResolutionStep_ActionParameters_Item) FromResolutionStepV101ResolutionStepActionParameters1(v ResolutionStepV101ResolutionStepActionParameters1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResolutionStepV101ResolutionStepActionParameters1 performs a merge with any union data inside the ResolutionStepV101ResolutionStep_ActionParameters_Item, using the provided ResolutionStepV101ResolutionStepActionParameters1
func (t *ResolutionStepV101ResolutionStep_ActionParameters_Item) MergeResolutionStepV101ResolutionStepActionParameters1(v ResolutionStepV101ResolutionStepActionParameters1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResolutionStepV101ResolutionStep_ActionParameters_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResolutionStepV101ResolutionStep_ActionParameters_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResolutionStepV101ResolutionType returns the union data inside the ResolutionStepV101ResolutionStep_ResolutionType as a ResolutionStepV101ResolutionType
func (t ResolutionStepV101ResolutionStep_ResolutionType) AsResolutionStepV101ResolutionType() (ResolutionStepV101ResolutionType, error) {
	var body ResolutionStepV101ResolutionType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResolutionStepV101ResolutionType overwrites any union data inside the ResolutionStepV101ResolutionStep_ResolutionType as the provided ResolutionStepV101ResolutionType
func (t *ResolutionStepV101ResolutionStep_ResolutionType) FromResolutionStepV101ResolutionType(v ResolutionStepV101ResolutionType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResolutionStepV101ResolutionType performs a merge with any union data inside the ResolutionStepV101ResolutionStep_ResolutionType, using the provided ResolutionStepV101ResolutionType
func (t *ResolutionStepV101ResolutionStep_ResolutionType) MergeResolutionStepV101ResolutionType(v ResolutionStepV101ResolutionType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResolutionStepV101ResolutionStepResolutionType1 returns the union data inside the ResolutionStepV101ResolutionStep_ResolutionType as a ResolutionStepV101ResolutionStepResolutionType1
func (t ResolutionStepV101ResolutionStep_ResolutionType) AsResolutionStepV101ResolutionStepResolutionType1() (ResolutionStepV101ResolutionStepResolutionType1, error) {
	var body ResolutionStepV101ResolutionStepResolutionType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResolutionStepV101ResolutionStepResolutionType1 overwrites any union data inside the ResolutionStepV101ResolutionStep_ResolutionType as the provided ResolutionStepV101ResolutionStepResolutionType1
func (t *ResolutionStepV101ResolutionStep_ResolutionType) FromResolutionStepV101ResolutionStepResolutionType1(v ResolutionStepV101ResolutionStepResolutionType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResolutionStepV101ResolutionStepResolutionType1 performs a merge with any union data inside the ResolutionStepV101ResolutionStep_ResolutionType, using the provided ResolutionStepV101ResolutionStepResolutionType1
func (t *ResolutionStepV101ResolutionStep_ResolutionType) MergeResolutionStepV101ResolutionStepResolutionType1(v ResolutionStepV101ResolutionStepResolutionType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResolutionStepV101ResolutionStep_ResolutionType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResolutionStepV101ResolutionStep_ResolutionType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceCondition returns the union data inside the ResourceStatus_Conditions_Item as a ResourceCondition
func (t ResourceStatus_Conditions_Item) AsResourceCondition() (ResourceCondition, error) {
	var body ResourceCondition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceCondition overwrites any union data inside the ResourceStatus_Conditions_Item as the provided ResourceCondition
func (t *ResourceStatus_Conditions_Item) FromResourceCondition(v ResourceCondition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceCondition performs a merge with any union data inside the ResourceStatus_Conditions_Item, using the provided ResourceCondition
func (t *ResourceStatus_Conditions_Item) MergeResourceCondition(v ResourceCondition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceStatusConditions1 returns the union data inside the ResourceStatus_Conditions_Item as a ResourceStatusConditions1
func (t ResourceStatus_Conditions_Item) AsResourceStatusConditions1() (ResourceStatusConditions1, error) {
	var body ResourceStatusConditions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceStatusConditions1 overwrites any union data inside the ResourceStatus_Conditions_Item as the provided ResourceStatusConditions1
func (t *ResourceStatus_Conditions_Item) FromResourceStatusConditions1(v ResourceStatusConditions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceStatusConditions1 performs a merge with any union data inside the ResourceStatus_Conditions_Item, using the provided ResourceStatusConditions1
func (t *ResourceStatus_Conditions_Item) MergeResourceStatusConditions1(v ResourceStatusConditions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceStatus_Conditions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceStatus_Conditions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceHealth returns the union data inside the ResourceStatus_Health as a ResourceHealth
func (t ResourceStatus_Health) AsResourceHealth() (ResourceHealth, error) {
	var body ResourceHealth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceHealth overwrites any union data inside the ResourceStatus_Health as the provided ResourceHealth
func (t *ResourceStatus_Health) FromResourceHealth(v ResourceHealth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceHealth performs a merge with any union data inside the ResourceStatus_Health, using the provided ResourceHealth
func (t *ResourceStatus_Health) MergeResourceHealth(v ResourceHealth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceStatusHealth1 returns the union data inside the ResourceStatus_Health as a ResourceStatusHealth1
func (t ResourceStatus_Health) AsResourceStatusHealth1() (ResourceStatusHealth1, error) {
	var body ResourceStatusHealth1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceStatusHealth1 overwrites any union data inside the ResourceStatus_Health as the provided ResourceStatusHealth1
func (t *ResourceStatus_Health) FromResourceStatusHealth1(v ResourceStatusHealth1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceStatusHealth1 performs a merge with any union data inside the ResourceStatus_Health, using the provided ResourceStatusHealth1
func (t *ResourceStatus_Health) MergeResourceStatusHealth1(v ResourceStatusHealth1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceStatus_Health) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceStatus_Health) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceHealth returns the union data inside the ResourceStatus_HealthRollup as a ResourceHealth
func (t ResourceStatus_HealthRollup) AsResourceHealth() (ResourceHealth, error) {
	var body ResourceHealth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceHealth overwrites any union data inside the ResourceStatus_HealthRollup as the provided ResourceHealth
func (t *ResourceStatus_HealthRollup) FromResourceHealth(v ResourceHealth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceHealth performs a merge with any union data inside the ResourceStatus_HealthRollup, using the provided ResourceHealth
func (t *ResourceStatus_HealthRollup) MergeResourceHealth(v ResourceHealth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceStatusHealthRollup1 returns the union data inside the ResourceStatus_HealthRollup as a ResourceStatusHealthRollup1
func (t ResourceStatus_HealthRollup) AsResourceStatusHealthRollup1() (ResourceStatusHealthRollup1, error) {
	var body ResourceStatusHealthRollup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceStatusHealthRollup1 overwrites any union data inside the ResourceStatus_HealthRollup as the provided ResourceStatusHealthRollup1
func (t *ResourceStatus_HealthRollup) FromResourceStatusHealthRollup1(v ResourceStatusHealthRollup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceStatusHealthRollup1 performs a merge with any union data inside the ResourceStatus_HealthRollup, using the provided ResourceStatusHealthRollup1
func (t *ResourceStatus_HealthRollup) MergeResourceStatusHealthRollup1(v ResourceStatusHealthRollup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceStatus_HealthRollup) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceStatus_HealthRollup) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceState returns the union data inside the ResourceStatus_State as a ResourceState
func (t ResourceStatus_State) AsResourceState() (ResourceState, error) {
	var body ResourceState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceState overwrites any union data inside the ResourceStatus_State as the provided ResourceState
func (t *ResourceStatus_State) FromResourceState(v ResourceState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceState performs a merge with any union data inside the ResourceStatus_State, using the provided ResourceState
func (t *ResourceStatus_State) MergeResourceState(v ResourceState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceStatusState1 returns the union data inside the ResourceStatus_State as a ResourceStatusState1
func (t ResourceStatus_State) AsResourceStatusState1() (ResourceStatusState1, error) {
	var body ResourceStatusState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceStatusState1 overwrites any union data inside the ResourceStatus_State as the provided ResourceStatusState1
func (t *ResourceStatus_State) FromResourceStatusState1(v ResourceStatusState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceStatusState1 performs a merge with any union data inside the ResourceStatus_State, using the provided ResourceStatusState1
func (t *ResourceStatus_State) MergeResourceStatusState1(v ResourceStatusState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceStatus_State) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceStatus_State) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceV1200DurableNameFormat returns the union data inside the ResourceV1200Identifier_DurableNameFormat as a ResourceV1200DurableNameFormat
func (t ResourceV1200Identifier_DurableNameFormat) AsResourceV1200DurableNameFormat() (ResourceV1200DurableNameFormat, error) {
	var body ResourceV1200DurableNameFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200DurableNameFormat overwrites any union data inside the ResourceV1200Identifier_DurableNameFormat as the provided ResourceV1200DurableNameFormat
func (t *ResourceV1200Identifier_DurableNameFormat) FromResourceV1200DurableNameFormat(v ResourceV1200DurableNameFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200DurableNameFormat performs a merge with any union data inside the ResourceV1200Identifier_DurableNameFormat, using the provided ResourceV1200DurableNameFormat
func (t *ResourceV1200Identifier_DurableNameFormat) MergeResourceV1200DurableNameFormat(v ResourceV1200DurableNameFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceV1200IdentifierDurableNameFormat1 returns the union data inside the ResourceV1200Identifier_DurableNameFormat as a ResourceV1200IdentifierDurableNameFormat1
func (t ResourceV1200Identifier_DurableNameFormat) AsResourceV1200IdentifierDurableNameFormat1() (ResourceV1200IdentifierDurableNameFormat1, error) {
	var body ResourceV1200IdentifierDurableNameFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200IdentifierDurableNameFormat1 overwrites any union data inside the ResourceV1200Identifier_DurableNameFormat as the provided ResourceV1200IdentifierDurableNameFormat1
func (t *ResourceV1200Identifier_DurableNameFormat) FromResourceV1200IdentifierDurableNameFormat1(v ResourceV1200IdentifierDurableNameFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200IdentifierDurableNameFormat1 performs a merge with any union data inside the ResourceV1200Identifier_DurableNameFormat, using the provided ResourceV1200IdentifierDurableNameFormat1
func (t *ResourceV1200Identifier_DurableNameFormat) MergeResourceV1200IdentifierDurableNameFormat1(v ResourceV1200IdentifierDurableNameFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceV1200Identifier_DurableNameFormat) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceV1200Identifier_DurableNameFormat) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceV1200ContactInfo returns the union data inside the ResourceV1200Location_Contacts_Item as a ResourceV1200ContactInfo
func (t ResourceV1200Location_Contacts_Item) AsResourceV1200ContactInfo() (ResourceV1200ContactInfo, error) {
	var body ResourceV1200ContactInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200ContactInfo overwrites any union data inside the ResourceV1200Location_Contacts_Item as the provided ResourceV1200ContactInfo
func (t *ResourceV1200Location_Contacts_Item) FromResourceV1200ContactInfo(v ResourceV1200ContactInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200ContactInfo performs a merge with any union data inside the ResourceV1200Location_Contacts_Item, using the provided ResourceV1200ContactInfo
func (t *ResourceV1200Location_Contacts_Item) MergeResourceV1200ContactInfo(v ResourceV1200ContactInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceV1200LocationContacts1 returns the union data inside the ResourceV1200Location_Contacts_Item as a ResourceV1200LocationContacts1
func (t ResourceV1200Location_Contacts_Item) AsResourceV1200LocationContacts1() (ResourceV1200LocationContacts1, error) {
	var body ResourceV1200LocationContacts1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200LocationContacts1 overwrites any union data inside the ResourceV1200Location_Contacts_Item as the provided ResourceV1200LocationContacts1
func (t *ResourceV1200Location_Contacts_Item) FromResourceV1200LocationContacts1(v ResourceV1200LocationContacts1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200LocationContacts1 performs a merge with any union data inside the ResourceV1200Location_Contacts_Item, using the provided ResourceV1200LocationContacts1
func (t *ResourceV1200Location_Contacts_Item) MergeResourceV1200LocationContacts1(v ResourceV1200LocationContacts1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceV1200Location_Contacts_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceV1200Location_Contacts_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceV1200LocationType returns the union data inside the ResourceV1200PartLocation_LocationType as a ResourceV1200LocationType
func (t ResourceV1200PartLocation_LocationType) AsResourceV1200LocationType() (ResourceV1200LocationType, error) {
	var body ResourceV1200LocationType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200LocationType overwrites any union data inside the ResourceV1200PartLocation_LocationType as the provided ResourceV1200LocationType
func (t *ResourceV1200PartLocation_LocationType) FromResourceV1200LocationType(v ResourceV1200LocationType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200LocationType performs a merge with any union data inside the ResourceV1200PartLocation_LocationType, using the provided ResourceV1200LocationType
func (t *ResourceV1200PartLocation_LocationType) MergeResourceV1200LocationType(v ResourceV1200LocationType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceV1200PartLocationLocationType1 returns the union data inside the ResourceV1200PartLocation_LocationType as a ResourceV1200PartLocationLocationType1
func (t ResourceV1200PartLocation_LocationType) AsResourceV1200PartLocationLocationType1() (ResourceV1200PartLocationLocationType1, error) {
	var body ResourceV1200PartLocationLocationType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200PartLocationLocationType1 overwrites any union data inside the ResourceV1200PartLocation_LocationType as the provided ResourceV1200PartLocationLocationType1
func (t *ResourceV1200PartLocation_LocationType) FromResourceV1200PartLocationLocationType1(v ResourceV1200PartLocationLocationType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200PartLocationLocationType1 performs a merge with any union data inside the ResourceV1200PartLocation_LocationType, using the provided ResourceV1200PartLocationLocationType1
func (t *ResourceV1200PartLocation_LocationType) MergeResourceV1200PartLocationLocationType1(v ResourceV1200PartLocationLocationType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceV1200PartLocation_LocationType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceV1200PartLocation_LocationType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceV1200Orientation returns the union data inside the ResourceV1200PartLocation_Orientation as a ResourceV1200Orientation
func (t ResourceV1200PartLocation_Orientation) AsResourceV1200Orientation() (ResourceV1200Orientation, error) {
	var body ResourceV1200Orientation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200Orientation overwrites any union data inside the ResourceV1200PartLocation_Orientation as the provided ResourceV1200Orientation
func (t *ResourceV1200PartLocation_Orientation) FromResourceV1200Orientation(v ResourceV1200Orientation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200Orientation performs a merge with any union data inside the ResourceV1200PartLocation_Orientation, using the provided ResourceV1200Orientation
func (t *ResourceV1200PartLocation_Orientation) MergeResourceV1200Orientation(v ResourceV1200Orientation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceV1200PartLocationOrientation1 returns the union data inside the ResourceV1200PartLocation_Orientation as a ResourceV1200PartLocationOrientation1
func (t ResourceV1200PartLocation_Orientation) AsResourceV1200PartLocationOrientation1() (ResourceV1200PartLocationOrientation1, error) {
	var body ResourceV1200PartLocationOrientation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200PartLocationOrientation1 overwrites any union data inside the ResourceV1200PartLocation_Orientation as the provided ResourceV1200PartLocationOrientation1
func (t *ResourceV1200PartLocation_Orientation) FromResourceV1200PartLocationOrientation1(v ResourceV1200PartLocationOrientation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200PartLocationOrientation1 performs a merge with any union data inside the ResourceV1200PartLocation_Orientation, using the provided ResourceV1200PartLocationOrientation1
func (t *ResourceV1200PartLocation_Orientation) MergeResourceV1200PartLocationOrientation1(v ResourceV1200PartLocationOrientation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceV1200PartLocation_Orientation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceV1200PartLocation_Orientation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceV1200Reference returns the union data inside the ResourceV1200PartLocation_Reference as a ResourceV1200Reference
func (t ResourceV1200PartLocation_Reference) AsResourceV1200Reference() (ResourceV1200Reference, error) {
	var body ResourceV1200Reference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200Reference overwrites any union data inside the ResourceV1200PartLocation_Reference as the provided ResourceV1200Reference
func (t *ResourceV1200PartLocation_Reference) FromResourceV1200Reference(v ResourceV1200Reference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200Reference performs a merge with any union data inside the ResourceV1200PartLocation_Reference, using the provided ResourceV1200Reference
func (t *ResourceV1200PartLocation_Reference) MergeResourceV1200Reference(v ResourceV1200Reference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceV1200PartLocationReference1 returns the union data inside the ResourceV1200PartLocation_Reference as a ResourceV1200PartLocationReference1
func (t ResourceV1200PartLocation_Reference) AsResourceV1200PartLocationReference1() (ResourceV1200PartLocationReference1, error) {
	var body ResourceV1200PartLocationReference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200PartLocationReference1 overwrites any union data inside the ResourceV1200PartLocation_Reference as the provided ResourceV1200PartLocationReference1
func (t *ResourceV1200PartLocation_Reference) FromResourceV1200PartLocationReference1(v ResourceV1200PartLocationReference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200PartLocationReference1 performs a merge with any union data inside the ResourceV1200PartLocation_Reference, using the provided ResourceV1200PartLocationReference1
func (t *ResourceV1200PartLocation_Reference) MergeResourceV1200PartLocationReference1(v ResourceV1200PartLocationReference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceV1200PartLocation_Reference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceV1200PartLocation_Reference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceV1200RackUnits returns the union data inside the ResourceV1200Placement_RackOffsetUnits as a ResourceV1200RackUnits
func (t ResourceV1200Placement_RackOffsetUnits) AsResourceV1200RackUnits() (ResourceV1200RackUnits, error) {
	var body ResourceV1200RackUnits
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200RackUnits overwrites any union data inside the ResourceV1200Placement_RackOffsetUnits as the provided ResourceV1200RackUnits
func (t *ResourceV1200Placement_RackOffsetUnits) FromResourceV1200RackUnits(v ResourceV1200RackUnits) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200RackUnits performs a merge with any union data inside the ResourceV1200Placement_RackOffsetUnits, using the provided ResourceV1200RackUnits
func (t *ResourceV1200Placement_RackOffsetUnits) MergeResourceV1200RackUnits(v ResourceV1200RackUnits) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceV1200PlacementRackOffsetUnits1 returns the union data inside the ResourceV1200Placement_RackOffsetUnits as a ResourceV1200PlacementRackOffsetUnits1
func (t ResourceV1200Placement_RackOffsetUnits) AsResourceV1200PlacementRackOffsetUnits1() (ResourceV1200PlacementRackOffsetUnits1, error) {
	var body ResourceV1200PlacementRackOffsetUnits1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceV1200PlacementRackOffsetUnits1 overwrites any union data inside the ResourceV1200Placement_RackOffsetUnits as the provided ResourceV1200PlacementRackOffsetUnits1
func (t *ResourceV1200Placement_RackOffsetUnits) FromResourceV1200PlacementRackOffsetUnits1(v ResourceV1200PlacementRackOffsetUnits1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceV1200PlacementRackOffsetUnits1 performs a merge with any union data inside the ResourceV1200Placement_RackOffsetUnits, using the provided ResourceV1200PlacementRackOffsetUnits1
func (t *ResourceV1200Placement_RackOffsetUnits) MergeResourceV1200PlacementRackOffsetUnits1(v ResourceV1200PlacementRackOffsetUnits1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceV1200Placement_RackOffsetUnits) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceV1200Placement_RackOffsetUnits) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStoragePoolV190EndGrpLifetime returns the union data inside the StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime as a StoragePoolV190EndGrpLifetime
func (t StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) AsStoragePoolV190EndGrpLifetime() (StoragePoolV190EndGrpLifetime, error) {
	var body StoragePoolV190EndGrpLifetime
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190EndGrpLifetime overwrites any union data inside the StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime as the provided StoragePoolV190EndGrpLifetime
func (t *StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) FromStoragePoolV190EndGrpLifetime(v StoragePoolV190EndGrpLifetime) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190EndGrpLifetime performs a merge with any union data inside the StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime, using the provided StoragePoolV190EndGrpLifetime
func (t *StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) MergeStoragePoolV190EndGrpLifetime(v StoragePoolV190EndGrpLifetime) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1 returns the union data inside the StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime as a StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1
func (t StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) AsStoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1() (StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1, error) {
	var body StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1 overwrites any union data inside the StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime as the provided StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1
func (t *StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) FromStoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1(v StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1 performs a merge with any union data inside the StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime, using the provided StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1
func (t *StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) MergeStoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1(v StoragePoolV190NVMeEnduranceGroupPropertiesEndGrpLifetime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190NVMeEnduranceGroupProperties_EndGrpLifetime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStoragePoolNVMePoolType returns the union data inside the StoragePoolV190NVMeProperties_NVMePoolType as a StoragePoolNVMePoolType
func (t StoragePoolV190NVMeProperties_NVMePoolType) AsStoragePoolNVMePoolType() (StoragePoolNVMePoolType, error) {
	var body StoragePoolNVMePoolType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolNVMePoolType overwrites any union data inside the StoragePoolV190NVMeProperties_NVMePoolType as the provided StoragePoolNVMePoolType
func (t *StoragePoolV190NVMeProperties_NVMePoolType) FromStoragePoolNVMePoolType(v StoragePoolNVMePoolType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolNVMePoolType performs a merge with any union data inside the StoragePoolV190NVMeProperties_NVMePoolType, using the provided StoragePoolNVMePoolType
func (t *StoragePoolV190NVMeProperties_NVMePoolType) MergeStoragePoolNVMePoolType(v StoragePoolNVMePoolType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190NVMePropertiesNVMePoolType1 returns the union data inside the StoragePoolV190NVMeProperties_NVMePoolType as a StoragePoolV190NVMePropertiesNVMePoolType1
func (t StoragePoolV190NVMeProperties_NVMePoolType) AsStoragePoolV190NVMePropertiesNVMePoolType1() (StoragePoolV190NVMePropertiesNVMePoolType1, error) {
	var body StoragePoolV190NVMePropertiesNVMePoolType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190NVMePropertiesNVMePoolType1 overwrites any union data inside the StoragePoolV190NVMeProperties_NVMePoolType as the provided StoragePoolV190NVMePropertiesNVMePoolType1
func (t *StoragePoolV190NVMeProperties_NVMePoolType) FromStoragePoolV190NVMePropertiesNVMePoolType1(v StoragePoolV190NVMePropertiesNVMePoolType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190NVMePropertiesNVMePoolType1 performs a merge with any union data inside the StoragePoolV190NVMeProperties_NVMePoolType, using the provided StoragePoolV190NVMePropertiesNVMePoolType1
func (t *StoragePoolV190NVMeProperties_NVMePoolType) MergeStoragePoolV190NVMePropertiesNVMePoolType1(v StoragePoolV190NVMePropertiesNVMePoolType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190NVMeProperties_NVMePoolType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190NVMeProperties_NVMePoolType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the StoragePoolV190StoragePool_Description as a ResourceDescription
func (t StoragePoolV190StoragePool_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the StoragePoolV190StoragePool_Description as the provided ResourceDescription
func (t *StoragePoolV190StoragePool_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the StoragePoolV190StoragePool_Description, using the provided ResourceDescription
func (t *StoragePoolV190StoragePool_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolDescription1 returns the union data inside the StoragePoolV190StoragePool_Description as a StoragePoolV190StoragePoolDescription1
func (t StoragePoolV190StoragePool_Description) AsStoragePoolV190StoragePoolDescription1() (StoragePoolV190StoragePoolDescription1, error) {
	var body StoragePoolV190StoragePoolDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolDescription1 overwrites any union data inside the StoragePoolV190StoragePool_Description as the provided StoragePoolV190StoragePoolDescription1
func (t *StoragePoolV190StoragePool_Description) FromStoragePoolV190StoragePoolDescription1(v StoragePoolV190StoragePoolDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolDescription1 performs a merge with any union data inside the StoragePoolV190StoragePool_Description, using the provided StoragePoolV190StoragePoolDescription1
func (t *StoragePoolV190StoragePool_Description) MergeStoragePoolV190StoragePoolDescription1(v StoragePoolV190StoragePoolDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOdataV4IdRef returns the union data inside the StoragePoolV190StoragePool_Metrics as a OdataV4IdRef
func (t StoragePoolV190StoragePool_Metrics) AsOdataV4IdRef() (OdataV4IdRef, error) {
	var body OdataV4IdRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOdataV4IdRef overwrites any union data inside the StoragePoolV190StoragePool_Metrics as the provided OdataV4IdRef
func (t *StoragePoolV190StoragePool_Metrics) FromOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOdataV4IdRef performs a merge with any union data inside the StoragePoolV190StoragePool_Metrics, using the provided OdataV4IdRef
func (t *StoragePoolV190StoragePool_Metrics) MergeOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolMetrics1 returns the union data inside the StoragePoolV190StoragePool_Metrics as a StoragePoolV190StoragePoolMetrics1
func (t StoragePoolV190StoragePool_Metrics) AsStoragePoolV190StoragePoolMetrics1() (StoragePoolV190StoragePoolMetrics1, error) {
	var body StoragePoolV190StoragePoolMetrics1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolMetrics1 overwrites any union data inside the StoragePoolV190StoragePool_Metrics as the provided StoragePoolV190StoragePoolMetrics1
func (t *StoragePoolV190StoragePool_Metrics) FromStoragePoolV190StoragePoolMetrics1(v StoragePoolV190StoragePoolMetrics1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolMetrics1 performs a merge with any union data inside the StoragePoolV190StoragePool_Metrics, using the provided StoragePoolV190StoragePoolMetrics1
func (t *StoragePoolV190StoragePool_Metrics) MergeStoragePoolV190StoragePoolMetrics1(v StoragePoolV190StoragePoolMetrics1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_Metrics) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_Metrics) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStoragePoolV190NVMeEnduranceGroupProperties returns the union data inside the StoragePoolV190StoragePool_NVMeEnduranceGroupProperties as a StoragePoolV190NVMeEnduranceGroupProperties
func (t StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) AsStoragePoolV190NVMeEnduranceGroupProperties() (StoragePoolV190NVMeEnduranceGroupProperties, error) {
	var body StoragePoolV190NVMeEnduranceGroupProperties
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190NVMeEnduranceGroupProperties overwrites any union data inside the StoragePoolV190StoragePool_NVMeEnduranceGroupProperties as the provided StoragePoolV190NVMeEnduranceGroupProperties
func (t *StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) FromStoragePoolV190NVMeEnduranceGroupProperties(v StoragePoolV190NVMeEnduranceGroupProperties) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190NVMeEnduranceGroupProperties performs a merge with any union data inside the StoragePoolV190StoragePool_NVMeEnduranceGroupProperties, using the provided StoragePoolV190NVMeEnduranceGroupProperties
func (t *StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) MergeStoragePoolV190NVMeEnduranceGroupProperties(v StoragePoolV190NVMeEnduranceGroupProperties) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolNVMeEnduranceGroupProperties1 returns the union data inside the StoragePoolV190StoragePool_NVMeEnduranceGroupProperties as a StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1
func (t StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) AsStoragePoolV190StoragePoolNVMeEnduranceGroupProperties1() (StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1, error) {
	var body StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolNVMeEnduranceGroupProperties1 overwrites any union data inside the StoragePoolV190StoragePool_NVMeEnduranceGroupProperties as the provided StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1
func (t *StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) FromStoragePoolV190StoragePoolNVMeEnduranceGroupProperties1(v StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolNVMeEnduranceGroupProperties1 performs a merge with any union data inside the StoragePoolV190StoragePool_NVMeEnduranceGroupProperties, using the provided StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1
func (t *StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) MergeStoragePoolV190StoragePoolNVMeEnduranceGroupProperties1(v StoragePoolV190StoragePoolNVMeEnduranceGroupProperties1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_NVMeEnduranceGroupProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStoragePoolV190NVMeProperties returns the union data inside the StoragePoolV190StoragePool_NVMeProperties as a StoragePoolV190NVMeProperties
func (t StoragePoolV190StoragePool_NVMeProperties) AsStoragePoolV190NVMeProperties() (StoragePoolV190NVMeProperties, error) {
	var body StoragePoolV190NVMeProperties
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190NVMeProperties overwrites any union data inside the StoragePoolV190StoragePool_NVMeProperties as the provided StoragePoolV190NVMeProperties
func (t *StoragePoolV190StoragePool_NVMeProperties) FromStoragePoolV190NVMeProperties(v StoragePoolV190NVMeProperties) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190NVMeProperties performs a merge with any union data inside the StoragePoolV190StoragePool_NVMeProperties, using the provided StoragePoolV190NVMeProperties
func (t *StoragePoolV190StoragePool_NVMeProperties) MergeStoragePoolV190NVMeProperties(v StoragePoolV190NVMeProperties) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolNVMeProperties1 returns the union data inside the StoragePoolV190StoragePool_NVMeProperties as a StoragePoolV190StoragePoolNVMeProperties1
func (t StoragePoolV190StoragePool_NVMeProperties) AsStoragePoolV190StoragePoolNVMeProperties1() (StoragePoolV190StoragePoolNVMeProperties1, error) {
	var body StoragePoolV190StoragePoolNVMeProperties1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolNVMeProperties1 overwrites any union data inside the StoragePoolV190StoragePool_NVMeProperties as the provided StoragePoolV190StoragePoolNVMeProperties1
func (t *StoragePoolV190StoragePool_NVMeProperties) FromStoragePoolV190StoragePoolNVMeProperties1(v StoragePoolV190StoragePoolNVMeProperties1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolNVMeProperties1 performs a merge with any union data inside the StoragePoolV190StoragePool_NVMeProperties, using the provided StoragePoolV190StoragePoolNVMeProperties1
func (t *StoragePoolV190StoragePool_NVMeProperties) MergeStoragePoolV190StoragePoolNVMeProperties1(v StoragePoolV190StoragePoolNVMeProperties1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_NVMeProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_NVMeProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStoragePoolV190NVMeSetProperties returns the union data inside the StoragePoolV190StoragePool_NVMeSetProperties as a StoragePoolV190NVMeSetProperties
func (t StoragePoolV190StoragePool_NVMeSetProperties) AsStoragePoolV190NVMeSetProperties() (StoragePoolV190NVMeSetProperties, error) {
	var body StoragePoolV190NVMeSetProperties
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190NVMeSetProperties overwrites any union data inside the StoragePoolV190StoragePool_NVMeSetProperties as the provided StoragePoolV190NVMeSetProperties
func (t *StoragePoolV190StoragePool_NVMeSetProperties) FromStoragePoolV190NVMeSetProperties(v StoragePoolV190NVMeSetProperties) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190NVMeSetProperties performs a merge with any union data inside the StoragePoolV190StoragePool_NVMeSetProperties, using the provided StoragePoolV190NVMeSetProperties
func (t *StoragePoolV190StoragePool_NVMeSetProperties) MergeStoragePoolV190NVMeSetProperties(v StoragePoolV190NVMeSetProperties) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolNVMeSetProperties1 returns the union data inside the StoragePoolV190StoragePool_NVMeSetProperties as a StoragePoolV190StoragePoolNVMeSetProperties1
func (t StoragePoolV190StoragePool_NVMeSetProperties) AsStoragePoolV190StoragePoolNVMeSetProperties1() (StoragePoolV190StoragePoolNVMeSetProperties1, error) {
	var body StoragePoolV190StoragePoolNVMeSetProperties1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolNVMeSetProperties1 overwrites any union data inside the StoragePoolV190StoragePool_NVMeSetProperties as the provided StoragePoolV190StoragePoolNVMeSetProperties1
func (t *StoragePoolV190StoragePool_NVMeSetProperties) FromStoragePoolV190StoragePoolNVMeSetProperties1(v StoragePoolV190StoragePoolNVMeSetProperties1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolNVMeSetProperties1 performs a merge with any union data inside the StoragePoolV190StoragePool_NVMeSetProperties, using the provided StoragePoolV190StoragePoolNVMeSetProperties1
func (t *StoragePoolV190StoragePool_NVMeSetProperties) MergeStoragePoolV190StoragePoolNVMeSetProperties1(v StoragePoolV190StoragePoolNVMeSetProperties1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_NVMeSetProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_NVMeSetProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStoragePoolPoolType returns the union data inside the StoragePoolV190StoragePool_PoolType_Item as a StoragePoolPoolType
func (t StoragePoolV190StoragePool_PoolType_Item) AsStoragePoolPoolType() (StoragePoolPoolType, error) {
	var body StoragePoolPoolType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolPoolType overwrites any union data inside the StoragePoolV190StoragePool_PoolType_Item as the provided StoragePoolPoolType
func (t *StoragePoolV190StoragePool_PoolType_Item) FromStoragePoolPoolType(v StoragePoolPoolType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolPoolType performs a merge with any union data inside the StoragePoolV190StoragePool_PoolType_Item, using the provided StoragePoolPoolType
func (t *StoragePoolV190StoragePool_PoolType_Item) MergeStoragePoolPoolType(v StoragePoolPoolType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolPoolType1 returns the union data inside the StoragePoolV190StoragePool_PoolType_Item as a StoragePoolV190StoragePoolPoolType1
func (t StoragePoolV190StoragePool_PoolType_Item) AsStoragePoolV190StoragePoolPoolType1() (StoragePoolV190StoragePoolPoolType1, error) {
	var body StoragePoolV190StoragePoolPoolType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolPoolType1 overwrites any union data inside the StoragePoolV190StoragePool_PoolType_Item as the provided StoragePoolV190StoragePoolPoolType1
func (t *StoragePoolV190StoragePool_PoolType_Item) FromStoragePoolV190StoragePoolPoolType1(v StoragePoolV190StoragePoolPoolType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolPoolType1 performs a merge with any union data inside the StoragePoolV190StoragePool_PoolType_Item, using the provided StoragePoolV190StoragePoolPoolType1
func (t *StoragePoolV190StoragePool_PoolType_Item) MergeStoragePoolV190StoragePoolPoolType1(v StoragePoolV190StoragePoolPoolType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_PoolType_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_PoolType_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStoragePoolPoolType returns the union data inside the StoragePoolV190StoragePool_SupportedPoolTypes_Item as a StoragePoolPoolType
func (t StoragePoolV190StoragePool_SupportedPoolTypes_Item) AsStoragePoolPoolType() (StoragePoolPoolType, error) {
	var body StoragePoolPoolType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolPoolType overwrites any union data inside the StoragePoolV190StoragePool_SupportedPoolTypes_Item as the provided StoragePoolPoolType
func (t *StoragePoolV190StoragePool_SupportedPoolTypes_Item) FromStoragePoolPoolType(v StoragePoolPoolType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolPoolType performs a merge with any union data inside the StoragePoolV190StoragePool_SupportedPoolTypes_Item, using the provided StoragePoolPoolType
func (t *StoragePoolV190StoragePool_SupportedPoolTypes_Item) MergeStoragePoolPoolType(v StoragePoolPoolType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolSupportedPoolTypes1 returns the union data inside the StoragePoolV190StoragePool_SupportedPoolTypes_Item as a StoragePoolV190StoragePoolSupportedPoolTypes1
func (t StoragePoolV190StoragePool_SupportedPoolTypes_Item) AsStoragePoolV190StoragePoolSupportedPoolTypes1() (StoragePoolV190StoragePoolSupportedPoolTypes1, error) {
	var body StoragePoolV190StoragePoolSupportedPoolTypes1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolSupportedPoolTypes1 overwrites any union data inside the StoragePoolV190StoragePool_SupportedPoolTypes_Item as the provided StoragePoolV190StoragePoolSupportedPoolTypes1
func (t *StoragePoolV190StoragePool_SupportedPoolTypes_Item) FromStoragePoolV190StoragePoolSupportedPoolTypes1(v StoragePoolV190StoragePoolSupportedPoolTypes1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolSupportedPoolTypes1 performs a merge with any union data inside the StoragePoolV190StoragePool_SupportedPoolTypes_Item, using the provided StoragePoolV190StoragePoolSupportedPoolTypes1
func (t *StoragePoolV190StoragePool_SupportedPoolTypes_Item) MergeStoragePoolV190StoragePoolSupportedPoolTypes1(v StoragePoolV190StoragePoolSupportedPoolTypes1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_SupportedPoolTypes_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_SupportedPoolTypes_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataStorageLoSCapabilitiesProvisioningPolicy returns the union data inside the StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item as a DataStorageLoSCapabilitiesProvisioningPolicy
func (t StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) AsDataStorageLoSCapabilitiesProvisioningPolicy() (DataStorageLoSCapabilitiesProvisioningPolicy, error) {
	var body DataStorageLoSCapabilitiesProvisioningPolicy
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataStorageLoSCapabilitiesProvisioningPolicy overwrites any union data inside the StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item as the provided DataStorageLoSCapabilitiesProvisioningPolicy
func (t *StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) FromDataStorageLoSCapabilitiesProvisioningPolicy(v DataStorageLoSCapabilitiesProvisioningPolicy) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataStorageLoSCapabilitiesProvisioningPolicy performs a merge with any union data inside the StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item, using the provided DataStorageLoSCapabilitiesProvisioningPolicy
func (t *StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) MergeDataStorageLoSCapabilitiesProvisioningPolicy(v DataStorageLoSCapabilitiesProvisioningPolicy) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolSupportedProvisioningPolicies1 returns the union data inside the StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item as a StoragePoolV190StoragePoolSupportedProvisioningPolicies1
func (t StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) AsStoragePoolV190StoragePoolSupportedProvisioningPolicies1() (StoragePoolV190StoragePoolSupportedProvisioningPolicies1, error) {
	var body StoragePoolV190StoragePoolSupportedProvisioningPolicies1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolSupportedProvisioningPolicies1 overwrites any union data inside the StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item as the provided StoragePoolV190StoragePoolSupportedProvisioningPolicies1
func (t *StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) FromStoragePoolV190StoragePoolSupportedProvisioningPolicies1(v StoragePoolV190StoragePoolSupportedProvisioningPolicies1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolSupportedProvisioningPolicies1 performs a merge with any union data inside the StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item, using the provided StoragePoolV190StoragePoolSupportedProvisioningPolicies1
func (t *StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) MergeStoragePoolV190StoragePoolSupportedProvisioningPolicies1(v StoragePoolV190StoragePoolSupportedProvisioningPolicies1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_SupportedProvisioningPolicies_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeRAIDType returns the union data inside the StoragePoolV190StoragePool_SupportedRAIDTypes_Item as a VolumeRAIDType
func (t StoragePoolV190StoragePool_SupportedRAIDTypes_Item) AsVolumeRAIDType() (VolumeRAIDType, error) {
	var body VolumeRAIDType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeRAIDType overwrites any union data inside the StoragePoolV190StoragePool_SupportedRAIDTypes_Item as the provided VolumeRAIDType
func (t *StoragePoolV190StoragePool_SupportedRAIDTypes_Item) FromVolumeRAIDType(v VolumeRAIDType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeRAIDType performs a merge with any union data inside the StoragePoolV190StoragePool_SupportedRAIDTypes_Item, using the provided VolumeRAIDType
func (t *StoragePoolV190StoragePool_SupportedRAIDTypes_Item) MergeVolumeRAIDType(v VolumeRAIDType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoragePoolV190StoragePoolSupportedRAIDTypes1 returns the union data inside the StoragePoolV190StoragePool_SupportedRAIDTypes_Item as a StoragePoolV190StoragePoolSupportedRAIDTypes1
func (t StoragePoolV190StoragePool_SupportedRAIDTypes_Item) AsStoragePoolV190StoragePoolSupportedRAIDTypes1() (StoragePoolV190StoragePoolSupportedRAIDTypes1, error) {
	var body StoragePoolV190StoragePoolSupportedRAIDTypes1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoragePoolV190StoragePoolSupportedRAIDTypes1 overwrites any union data inside the StoragePoolV190StoragePool_SupportedRAIDTypes_Item as the provided StoragePoolV190StoragePoolSupportedRAIDTypes1
func (t *StoragePoolV190StoragePool_SupportedRAIDTypes_Item) FromStoragePoolV190StoragePoolSupportedRAIDTypes1(v StoragePoolV190StoragePoolSupportedRAIDTypes1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoragePoolV190StoragePoolSupportedRAIDTypes1 performs a merge with any union data inside the StoragePoolV190StoragePool_SupportedRAIDTypes_Item, using the provided StoragePoolV190StoragePoolSupportedRAIDTypes1
func (t *StoragePoolV190StoragePool_SupportedRAIDTypes_Item) MergeStoragePoolV190StoragePoolSupportedRAIDTypes1(v StoragePoolV190StoragePoolSupportedRAIDTypes1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StoragePoolV190StoragePool_SupportedRAIDTypes_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StoragePoolV190StoragePool_SupportedRAIDTypes_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ConsistencyState returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyState as a StorageReplicaInfoV140ConsistencyState
func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyState) AsStorageReplicaInfoV140ConsistencyState() (StorageReplicaInfoV140ConsistencyState, error) {
	var body StorageReplicaInfoV140ConsistencyState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ConsistencyState overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyState as the provided StorageReplicaInfoV140ConsistencyState
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyState) FromStorageReplicaInfoV140ConsistencyState(v StorageReplicaInfoV140ConsistencyState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ConsistencyState performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyState, using the provided StorageReplicaInfoV140ConsistencyState
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyState) MergeStorageReplicaInfoV140ConsistencyState(v StorageReplicaInfoV140ConsistencyState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoConsistencyState1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyState as a StorageReplicaInfoV140ReplicaInfoConsistencyState1
func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyState) AsStorageReplicaInfoV140ReplicaInfoConsistencyState1() (StorageReplicaInfoV140ReplicaInfoConsistencyState1, error) {
	var body StorageReplicaInfoV140ReplicaInfoConsistencyState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoConsistencyState1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyState as the provided StorageReplicaInfoV140ReplicaInfoConsistencyState1
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyState) FromStorageReplicaInfoV140ReplicaInfoConsistencyState1(v StorageReplicaInfoV140ReplicaInfoConsistencyState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoConsistencyState1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyState, using the provided StorageReplicaInfoV140ReplicaInfoConsistencyState1
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyState) MergeStorageReplicaInfoV140ReplicaInfoConsistencyState1(v StorageReplicaInfoV140ReplicaInfoConsistencyState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ConsistencyStatus returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus as a StorageReplicaInfoV140ConsistencyStatus
func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) AsStorageReplicaInfoV140ConsistencyStatus() (StorageReplicaInfoV140ConsistencyStatus, error) {
	var body StorageReplicaInfoV140ConsistencyStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ConsistencyStatus overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus as the provided StorageReplicaInfoV140ConsistencyStatus
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) FromStorageReplicaInfoV140ConsistencyStatus(v StorageReplicaInfoV140ConsistencyStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ConsistencyStatus performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus, using the provided StorageReplicaInfoV140ConsistencyStatus
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) MergeStorageReplicaInfoV140ConsistencyStatus(v StorageReplicaInfoV140ConsistencyStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoConsistencyStatus1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus as a StorageReplicaInfoV140ReplicaInfoConsistencyStatus1
func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) AsStorageReplicaInfoV140ReplicaInfoConsistencyStatus1() (StorageReplicaInfoV140ReplicaInfoConsistencyStatus1, error) {
	var body StorageReplicaInfoV140ReplicaInfoConsistencyStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoConsistencyStatus1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus as the provided StorageReplicaInfoV140ReplicaInfoConsistencyStatus1
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) FromStorageReplicaInfoV140ReplicaInfoConsistencyStatus1(v StorageReplicaInfoV140ReplicaInfoConsistencyStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoConsistencyStatus1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus, using the provided StorageReplicaInfoV140ReplicaInfoConsistencyStatus1
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) MergeStorageReplicaInfoV140ReplicaInfoConsistencyStatus1(v StorageReplicaInfoV140ReplicaInfoConsistencyStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ConsistencyType returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyType as a StorageReplicaInfoV140ConsistencyType
func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyType) AsStorageReplicaInfoV140ConsistencyType() (StorageReplicaInfoV140ConsistencyType, error) {
	var body StorageReplicaInfoV140ConsistencyType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ConsistencyType overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyType as the provided StorageReplicaInfoV140ConsistencyType
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyType) FromStorageReplicaInfoV140ConsistencyType(v StorageReplicaInfoV140ConsistencyType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ConsistencyType performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyType, using the provided StorageReplicaInfoV140ConsistencyType
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyType) MergeStorageReplicaInfoV140ConsistencyType(v StorageReplicaInfoV140ConsistencyType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoConsistencyType1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyType as a StorageReplicaInfoV140ReplicaInfoConsistencyType1
func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyType) AsStorageReplicaInfoV140ReplicaInfoConsistencyType1() (StorageReplicaInfoV140ReplicaInfoConsistencyType1, error) {
	var body StorageReplicaInfoV140ReplicaInfoConsistencyType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoConsistencyType1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyType as the provided StorageReplicaInfoV140ReplicaInfoConsistencyType1
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyType) FromStorageReplicaInfoV140ReplicaInfoConsistencyType1(v StorageReplicaInfoV140ReplicaInfoConsistencyType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoConsistencyType1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ConsistencyType, using the provided StorageReplicaInfoV140ReplicaInfoConsistencyType1
func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyType) MergeStorageReplicaInfoV140ReplicaInfoConsistencyType1(v StorageReplicaInfoV140ReplicaInfoConsistencyType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ConsistencyType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ConsistencyType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoReplicaFaultDomain returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain as a StorageReplicaInfoReplicaFaultDomain
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) AsStorageReplicaInfoReplicaFaultDomain() (StorageReplicaInfoReplicaFaultDomain, error) {
	var body StorageReplicaInfoReplicaFaultDomain
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoReplicaFaultDomain overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain as the provided StorageReplicaInfoReplicaFaultDomain
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) FromStorageReplicaInfoReplicaFaultDomain(v StorageReplicaInfoReplicaFaultDomain) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoReplicaFaultDomain performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain, using the provided StorageReplicaInfoReplicaFaultDomain
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) MergeStorageReplicaInfoReplicaFaultDomain(v StorageReplicaInfoReplicaFaultDomain) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain as a StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) AsStorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1() (StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain as the provided StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) FromStorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1(v StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain, using the provided StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) MergeStorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1(v StorageReplicaInfoV140ReplicaInfoReplicaFaultDomain1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaFaultDomain) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ReplicaPriority returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaPriority as a StorageReplicaInfoV140ReplicaPriority
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) AsStorageReplicaInfoV140ReplicaPriority() (StorageReplicaInfoV140ReplicaPriority, error) {
	var body StorageReplicaInfoV140ReplicaPriority
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaPriority overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaPriority as the provided StorageReplicaInfoV140ReplicaPriority
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) FromStorageReplicaInfoV140ReplicaPriority(v StorageReplicaInfoV140ReplicaPriority) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaPriority performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaPriority, using the provided StorageReplicaInfoV140ReplicaPriority
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) MergeStorageReplicaInfoV140ReplicaPriority(v StorageReplicaInfoV140ReplicaPriority) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaPriority1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaPriority as a StorageReplicaInfoV140ReplicaInfoReplicaPriority1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) AsStorageReplicaInfoV140ReplicaInfoReplicaPriority1() (StorageReplicaInfoV140ReplicaInfoReplicaPriority1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaPriority1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaPriority1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaPriority as the provided StorageReplicaInfoV140ReplicaInfoReplicaPriority1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) FromStorageReplicaInfoV140ReplicaInfoReplicaPriority1(v StorageReplicaInfoV140ReplicaInfoReplicaPriority1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaPriority1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaPriority, using the provided StorageReplicaInfoV140ReplicaInfoReplicaPriority1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) MergeStorageReplicaInfoV140ReplicaInfoReplicaPriority1(v StorageReplicaInfoV140ReplicaInfoReplicaPriority1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaPriority) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ReplicaProgressStatus returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus as a StorageReplicaInfoV140ReplicaProgressStatus
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) AsStorageReplicaInfoV140ReplicaProgressStatus() (StorageReplicaInfoV140ReplicaProgressStatus, error) {
	var body StorageReplicaInfoV140ReplicaProgressStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaProgressStatus overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus as the provided StorageReplicaInfoV140ReplicaProgressStatus
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) FromStorageReplicaInfoV140ReplicaProgressStatus(v StorageReplicaInfoV140ReplicaProgressStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaProgressStatus performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus, using the provided StorageReplicaInfoV140ReplicaProgressStatus
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) MergeStorageReplicaInfoV140ReplicaProgressStatus(v StorageReplicaInfoV140ReplicaProgressStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus as a StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) AsStorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1() (StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus as the provided StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) FromStorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1(v StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus, using the provided StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) MergeStorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1(v StorageReplicaInfoV140ReplicaInfoReplicaProgressStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaProgressStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ReplicaReadOnlyAccess returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess as a StorageReplicaInfoV140ReplicaReadOnlyAccess
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) AsStorageReplicaInfoV140ReplicaReadOnlyAccess() (StorageReplicaInfoV140ReplicaReadOnlyAccess, error) {
	var body StorageReplicaInfoV140ReplicaReadOnlyAccess
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaReadOnlyAccess overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess as the provided StorageReplicaInfoV140ReplicaReadOnlyAccess
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) FromStorageReplicaInfoV140ReplicaReadOnlyAccess(v StorageReplicaInfoV140ReplicaReadOnlyAccess) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaReadOnlyAccess performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess, using the provided StorageReplicaInfoV140ReplicaReadOnlyAccess
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) MergeStorageReplicaInfoV140ReplicaReadOnlyAccess(v StorageReplicaInfoV140ReplicaReadOnlyAccess) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess as a StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) AsStorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1() (StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess as the provided StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) FromStorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1(v StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess, using the provided StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) MergeStorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1(v StorageReplicaInfoV140ReplicaInfoReplicaReadOnlyAccess1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaReadOnlyAccess) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ReplicaRecoveryMode returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode as a StorageReplicaInfoV140ReplicaRecoveryMode
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) AsStorageReplicaInfoV140ReplicaRecoveryMode() (StorageReplicaInfoV140ReplicaRecoveryMode, error) {
	var body StorageReplicaInfoV140ReplicaRecoveryMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaRecoveryMode overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode as the provided StorageReplicaInfoV140ReplicaRecoveryMode
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) FromStorageReplicaInfoV140ReplicaRecoveryMode(v StorageReplicaInfoV140ReplicaRecoveryMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaRecoveryMode performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode, using the provided StorageReplicaInfoV140ReplicaRecoveryMode
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) MergeStorageReplicaInfoV140ReplicaRecoveryMode(v StorageReplicaInfoV140ReplicaRecoveryMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode as a StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) AsStorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1() (StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode as the provided StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) FromStorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1(v StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode, using the provided StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) MergeStorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1(v StorageReplicaInfoV140ReplicaInfoReplicaRecoveryMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRecoveryMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ReplicaRole returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRole as a StorageReplicaInfoV140ReplicaRole
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaRole) AsStorageReplicaInfoV140ReplicaRole() (StorageReplicaInfoV140ReplicaRole, error) {
	var body StorageReplicaInfoV140ReplicaRole
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaRole overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRole as the provided StorageReplicaInfoV140ReplicaRole
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRole) FromStorageReplicaInfoV140ReplicaRole(v StorageReplicaInfoV140ReplicaRole) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaRole performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRole, using the provided StorageReplicaInfoV140ReplicaRole
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRole) MergeStorageReplicaInfoV140ReplicaRole(v StorageReplicaInfoV140ReplicaRole) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaRole1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRole as a StorageReplicaInfoV140ReplicaInfoReplicaRole1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaRole) AsStorageReplicaInfoV140ReplicaInfoReplicaRole1() (StorageReplicaInfoV140ReplicaInfoReplicaRole1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaRole1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaRole1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRole as the provided StorageReplicaInfoV140ReplicaInfoReplicaRole1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRole) FromStorageReplicaInfoV140ReplicaInfoReplicaRole1(v StorageReplicaInfoV140ReplicaInfoReplicaRole1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaRole1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaRole, using the provided StorageReplicaInfoV140ReplicaInfoReplicaRole1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRole) MergeStorageReplicaInfoV140ReplicaInfoReplicaRole1(v StorageReplicaInfoV140ReplicaInfoReplicaRole1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaRole) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaRole) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ReplicaState returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaState as a StorageReplicaInfoV140ReplicaState
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaState) AsStorageReplicaInfoV140ReplicaState() (StorageReplicaInfoV140ReplicaState, error) {
	var body StorageReplicaInfoV140ReplicaState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaState overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaState as the provided StorageReplicaInfoV140ReplicaState
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaState) FromStorageReplicaInfoV140ReplicaState(v StorageReplicaInfoV140ReplicaState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaState performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaState, using the provided StorageReplicaInfoV140ReplicaState
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaState) MergeStorageReplicaInfoV140ReplicaState(v StorageReplicaInfoV140ReplicaState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaState1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaState as a StorageReplicaInfoV140ReplicaInfoReplicaState1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaState) AsStorageReplicaInfoV140ReplicaInfoReplicaState1() (StorageReplicaInfoV140ReplicaInfoReplicaState1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaState1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaState as the provided StorageReplicaInfoV140ReplicaInfoReplicaState1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaState) FromStorageReplicaInfoV140ReplicaInfoReplicaState1(v StorageReplicaInfoV140ReplicaInfoReplicaState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaState1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaState, using the provided StorageReplicaInfoV140ReplicaInfoReplicaState1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaState) MergeStorageReplicaInfoV140ReplicaInfoReplicaState1(v StorageReplicaInfoV140ReplicaInfoReplicaState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoReplicaType returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaType as a StorageReplicaInfoReplicaType
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaType) AsStorageReplicaInfoReplicaType() (StorageReplicaInfoReplicaType, error) {
	var body StorageReplicaInfoReplicaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoReplicaType overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaType as the provided StorageReplicaInfoReplicaType
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaType) FromStorageReplicaInfoReplicaType(v StorageReplicaInfoReplicaType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoReplicaType performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaType, using the provided StorageReplicaInfoReplicaType
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaType) MergeStorageReplicaInfoReplicaType(v StorageReplicaInfoReplicaType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaType1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaType as a StorageReplicaInfoV140ReplicaInfoReplicaType1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaType) AsStorageReplicaInfoV140ReplicaInfoReplicaType1() (StorageReplicaInfoV140ReplicaInfoReplicaType1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaType1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaType as the provided StorageReplicaInfoV140ReplicaInfoReplicaType1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaType) FromStorageReplicaInfoV140ReplicaInfoReplicaType1(v StorageReplicaInfoV140ReplicaInfoReplicaType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaType1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaType, using the provided StorageReplicaInfoV140ReplicaInfoReplicaType1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaType) MergeStorageReplicaInfoV140ReplicaInfoReplicaType1(v StorageReplicaInfoV140ReplicaInfoReplicaType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoReplicaUpdateMode returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode as a StorageReplicaInfoReplicaUpdateMode
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) AsStorageReplicaInfoReplicaUpdateMode() (StorageReplicaInfoReplicaUpdateMode, error) {
	var body StorageReplicaInfoReplicaUpdateMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoReplicaUpdateMode overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode as the provided StorageReplicaInfoReplicaUpdateMode
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) FromStorageReplicaInfoReplicaUpdateMode(v StorageReplicaInfoReplicaUpdateMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoReplicaUpdateMode performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode, using the provided StorageReplicaInfoReplicaUpdateMode
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) MergeStorageReplicaInfoReplicaUpdateMode(v StorageReplicaInfoReplicaUpdateMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode as a StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1
func (t StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) AsStorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1() (StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1, error) {
	var body StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode as the provided StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) FromStorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1(v StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode, using the provided StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1
func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) MergeStorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1(v StorageReplicaInfoV140ReplicaInfoReplicaUpdateMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_ReplicaUpdateMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140ReplicaState returns the union data inside the StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState as a StorageReplicaInfoV140ReplicaState
func (t StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) AsStorageReplicaInfoV140ReplicaState() (StorageReplicaInfoV140ReplicaState, error) {
	var body StorageReplicaInfoV140ReplicaState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaState overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState as the provided StorageReplicaInfoV140ReplicaState
func (t *StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) FromStorageReplicaInfoV140ReplicaState(v StorageReplicaInfoV140ReplicaState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaState performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState, using the provided StorageReplicaInfoV140ReplicaState
func (t *StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) MergeStorageReplicaInfoV140ReplicaState(v StorageReplicaInfoV140ReplicaState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoRequestedReplicaState1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState as a StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1
func (t StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) AsStorageReplicaInfoV140ReplicaInfoRequestedReplicaState1() (StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1, error) {
	var body StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoRequestedReplicaState1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState as the provided StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1
func (t *StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) FromStorageReplicaInfoV140ReplicaInfoRequestedReplicaState1(v StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoRequestedReplicaState1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState, using the provided StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1
func (t *StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) MergeStorageReplicaInfoV140ReplicaInfoRequestedReplicaState1(v StorageReplicaInfoV140ReplicaInfoRequestedReplicaState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_RequestedReplicaState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStorageReplicaInfoV140UndiscoveredElement returns the union data inside the StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement as a StorageReplicaInfoV140UndiscoveredElement
func (t StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) AsStorageReplicaInfoV140UndiscoveredElement() (StorageReplicaInfoV140UndiscoveredElement, error) {
	var body StorageReplicaInfoV140UndiscoveredElement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140UndiscoveredElement overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement as the provided StorageReplicaInfoV140UndiscoveredElement
func (t *StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) FromStorageReplicaInfoV140UndiscoveredElement(v StorageReplicaInfoV140UndiscoveredElement) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140UndiscoveredElement performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement, using the provided StorageReplicaInfoV140UndiscoveredElement
func (t *StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) MergeStorageReplicaInfoV140UndiscoveredElement(v StorageReplicaInfoV140UndiscoveredElement) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageReplicaInfoV140ReplicaInfoUndiscoveredElement1 returns the union data inside the StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement as a StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1
func (t StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) AsStorageReplicaInfoV140ReplicaInfoUndiscoveredElement1() (StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1, error) {
	var body StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageReplicaInfoV140ReplicaInfoUndiscoveredElement1 overwrites any union data inside the StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement as the provided StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1
func (t *StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) FromStorageReplicaInfoV140ReplicaInfoUndiscoveredElement1(v StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageReplicaInfoV140ReplicaInfoUndiscoveredElement1 performs a merge with any union data inside the StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement, using the provided StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1
func (t *StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) MergeStorageReplicaInfoV140ReplicaInfoUndiscoveredElement1(v StorageReplicaInfoV140ReplicaInfoUndiscoveredElement1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageReplicaInfoV140ReplicaInfo_UndiscoveredElement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the StorageServiceCollectionStorageServiceCollection_Description as a ResourceDescription
func (t StorageServiceCollectionStorageServiceCollection_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the StorageServiceCollectionStorageServiceCollection_Description as the provided ResourceDescription
func (t *StorageServiceCollectionStorageServiceCollection_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the StorageServiceCollectionStorageServiceCollection_Description, using the provided ResourceDescription
func (t *StorageServiceCollectionStorageServiceCollection_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageServiceCollectionStorageServiceCollectionDescription1 returns the union data inside the StorageServiceCollectionStorageServiceCollection_Description as a StorageServiceCollectionStorageServiceCollectionDescription1
func (t StorageServiceCollectionStorageServiceCollection_Description) AsStorageServiceCollectionStorageServiceCollectionDescription1() (StorageServiceCollectionStorageServiceCollectionDescription1, error) {
	var body StorageServiceCollectionStorageServiceCollectionDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageServiceCollectionStorageServiceCollectionDescription1 overwrites any union data inside the StorageServiceCollectionStorageServiceCollection_Description as the provided StorageServiceCollectionStorageServiceCollectionDescription1
func (t *StorageServiceCollectionStorageServiceCollection_Description) FromStorageServiceCollectionStorageServiceCollectionDescription1(v StorageServiceCollectionStorageServiceCollectionDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageServiceCollectionStorageServiceCollectionDescription1 performs a merge with any union data inside the StorageServiceCollectionStorageServiceCollection_Description, using the provided StorageServiceCollectionStorageServiceCollectionDescription1
func (t *StorageServiceCollectionStorageServiceCollection_Description) MergeStorageServiceCollectionStorageServiceCollectionDescription1(v StorageServiceCollectionStorageServiceCollectionDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageServiceCollectionStorageServiceCollection_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageServiceCollectionStorageServiceCollection_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the StorageServiceV170StorageService_Description as a ResourceDescription
func (t StorageServiceV170StorageService_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the StorageServiceV170StorageService_Description as the provided ResourceDescription
func (t *StorageServiceV170StorageService_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the StorageServiceV170StorageService_Description, using the provided ResourceDescription
func (t *StorageServiceV170StorageService_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageServiceV170StorageServiceDescription1 returns the union data inside the StorageServiceV170StorageService_Description as a StorageServiceV170StorageServiceDescription1
func (t StorageServiceV170StorageService_Description) AsStorageServiceV170StorageServiceDescription1() (StorageServiceV170StorageServiceDescription1, error) {
	var body StorageServiceV170StorageServiceDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageServiceV170StorageServiceDescription1 overwrites any union data inside the StorageServiceV170StorageService_Description as the provided StorageServiceV170StorageServiceDescription1
func (t *StorageServiceV170StorageService_Description) FromStorageServiceV170StorageServiceDescription1(v StorageServiceV170StorageServiceDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageServiceV170StorageServiceDescription1 performs a merge with any union data inside the StorageServiceV170StorageService_Description, using the provided StorageServiceV170StorageServiceDescription1
func (t *StorageServiceV170StorageService_Description) MergeStorageServiceV170StorageServiceDescription1(v StorageServiceV170StorageServiceDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageServiceV170StorageService_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageServiceV170StorageService_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOdataV4IdRef returns the union data inside the StorageServiceV170StorageService_Metrics as a OdataV4IdRef
func (t StorageServiceV170StorageService_Metrics) AsOdataV4IdRef() (OdataV4IdRef, error) {
	var body OdataV4IdRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOdataV4IdRef overwrites any union data inside the StorageServiceV170StorageService_Metrics as the provided OdataV4IdRef
func (t *StorageServiceV170StorageService_Metrics) FromOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOdataV4IdRef performs a merge with any union data inside the StorageServiceV170StorageService_Metrics, using the provided OdataV4IdRef
func (t *StorageServiceV170StorageService_Metrics) MergeOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStorageServiceV170StorageServiceMetrics1 returns the union data inside the StorageServiceV170StorageService_Metrics as a StorageServiceV170StorageServiceMetrics1
func (t StorageServiceV170StorageService_Metrics) AsStorageServiceV170StorageServiceMetrics1() (StorageServiceV170StorageServiceMetrics1, error) {
	var body StorageServiceV170StorageServiceMetrics1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStorageServiceV170StorageServiceMetrics1 overwrites any union data inside the StorageServiceV170StorageService_Metrics as the provided StorageServiceV170StorageServiceMetrics1
func (t *StorageServiceV170StorageService_Metrics) FromStorageServiceV170StorageServiceMetrics1(v StorageServiceV170StorageServiceMetrics1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStorageServiceV170StorageServiceMetrics1 performs a merge with any union data inside the StorageServiceV170StorageService_Metrics, using the provided StorageServiceV170StorageServiceMetrics1
func (t *StorageServiceV170StorageService_Metrics) MergeStorageServiceV170StorageServiceMetrics1(v StorageServiceV170StorageServiceMetrics1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StorageServiceV170StorageService_Metrics) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StorageServiceV170StorageService_Metrics) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeLBAFormatType returns the union data inside the VolumeV1100LBAFormat_LBAFormatType as a VolumeLBAFormatType
func (t VolumeV1100LBAFormat_LBAFormatType) AsVolumeLBAFormatType() (VolumeLBAFormatType, error) {
	var body VolumeLBAFormatType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeLBAFormatType overwrites any union data inside the VolumeV1100LBAFormat_LBAFormatType as the provided VolumeLBAFormatType
func (t *VolumeV1100LBAFormat_LBAFormatType) FromVolumeLBAFormatType(v VolumeLBAFormatType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeLBAFormatType performs a merge with any union data inside the VolumeV1100LBAFormat_LBAFormatType, using the provided VolumeLBAFormatType
func (t *VolumeV1100LBAFormat_LBAFormatType) MergeVolumeLBAFormatType(v VolumeLBAFormatType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100LBAFormatLBAFormatType1 returns the union data inside the VolumeV1100LBAFormat_LBAFormatType as a VolumeV1100LBAFormatLBAFormatType1
func (t VolumeV1100LBAFormat_LBAFormatType) AsVolumeV1100LBAFormatLBAFormatType1() (VolumeV1100LBAFormatLBAFormatType1, error) {
	var body VolumeV1100LBAFormatLBAFormatType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100LBAFormatLBAFormatType1 overwrites any union data inside the VolumeV1100LBAFormat_LBAFormatType as the provided VolumeV1100LBAFormatLBAFormatType1
func (t *VolumeV1100LBAFormat_LBAFormatType) FromVolumeV1100LBAFormatLBAFormatType1(v VolumeV1100LBAFormatLBAFormatType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100LBAFormatLBAFormatType1 performs a merge with any union data inside the VolumeV1100LBAFormat_LBAFormatType, using the provided VolumeV1100LBAFormatLBAFormatType1
func (t *VolumeV1100LBAFormat_LBAFormatType) MergeVolumeV1100LBAFormatLBAFormatType1(v VolumeV1100LBAFormatLBAFormatType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100LBAFormat_LBAFormatType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100LBAFormat_LBAFormatType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeLBARelativePerformanceType returns the union data inside the VolumeV1100LBAFormat_RelativePerformance as a VolumeLBARelativePerformanceType
func (t VolumeV1100LBAFormat_RelativePerformance) AsVolumeLBARelativePerformanceType() (VolumeLBARelativePerformanceType, error) {
	var body VolumeLBARelativePerformanceType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeLBARelativePerformanceType overwrites any union data inside the VolumeV1100LBAFormat_RelativePerformance as the provided VolumeLBARelativePerformanceType
func (t *VolumeV1100LBAFormat_RelativePerformance) FromVolumeLBARelativePerformanceType(v VolumeLBARelativePerformanceType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeLBARelativePerformanceType performs a merge with any union data inside the VolumeV1100LBAFormat_RelativePerformance, using the provided VolumeLBARelativePerformanceType
func (t *VolumeV1100LBAFormat_RelativePerformance) MergeVolumeLBARelativePerformanceType(v VolumeLBARelativePerformanceType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100LBAFormatRelativePerformance1 returns the union data inside the VolumeV1100LBAFormat_RelativePerformance as a VolumeV1100LBAFormatRelativePerformance1
func (t VolumeV1100LBAFormat_RelativePerformance) AsVolumeV1100LBAFormatRelativePerformance1() (VolumeV1100LBAFormatRelativePerformance1, error) {
	var body VolumeV1100LBAFormatRelativePerformance1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100LBAFormatRelativePerformance1 overwrites any union data inside the VolumeV1100LBAFormat_RelativePerformance as the provided VolumeV1100LBAFormatRelativePerformance1
func (t *VolumeV1100LBAFormat_RelativePerformance) FromVolumeV1100LBAFormatRelativePerformance1(v VolumeV1100LBAFormatRelativePerformance1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100LBAFormatRelativePerformance1 performs a merge with any union data inside the VolumeV1100LBAFormat_RelativePerformance, using the provided VolumeV1100LBAFormatRelativePerformance1
func (t *VolumeV1100LBAFormat_RelativePerformance) MergeVolumeV1100LBAFormatRelativePerformance1(v VolumeV1100LBAFormatRelativePerformance1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100LBAFormat_RelativePerformance) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100LBAFormat_RelativePerformance) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOdataV4IdRef returns the union data inside the VolumeV1100Links_CacheVolumeSource as a OdataV4IdRef
func (t VolumeV1100Links_CacheVolumeSource) AsOdataV4IdRef() (OdataV4IdRef, error) {
	var body OdataV4IdRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOdataV4IdRef overwrites any union data inside the VolumeV1100Links_CacheVolumeSource as the provided OdataV4IdRef
func (t *VolumeV1100Links_CacheVolumeSource) FromOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOdataV4IdRef performs a merge with any union data inside the VolumeV1100Links_CacheVolumeSource, using the provided OdataV4IdRef
func (t *VolumeV1100Links_CacheVolumeSource) MergeOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100LinksCacheVolumeSource1 returns the union data inside the VolumeV1100Links_CacheVolumeSource as a VolumeV1100LinksCacheVolumeSource1
func (t VolumeV1100Links_CacheVolumeSource) AsVolumeV1100LinksCacheVolumeSource1() (VolumeV1100LinksCacheVolumeSource1, error) {
	var body VolumeV1100LinksCacheVolumeSource1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100LinksCacheVolumeSource1 overwrites any union data inside the VolumeV1100Links_CacheVolumeSource as the provided VolumeV1100LinksCacheVolumeSource1
func (t *VolumeV1100Links_CacheVolumeSource) FromVolumeV1100LinksCacheVolumeSource1(v VolumeV1100LinksCacheVolumeSource1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100LinksCacheVolumeSource1 performs a merge with any union data inside the VolumeV1100Links_CacheVolumeSource, using the provided VolumeV1100LinksCacheVolumeSource1
func (t *VolumeV1100Links_CacheVolumeSource) MergeVolumeV1100LinksCacheVolumeSource1(v VolumeV1100LinksCacheVolumeSource1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Links_CacheVolumeSource) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Links_CacheVolumeSource) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOdataV4IdRef returns the union data inside the VolumeV1100Links_JournalingMedia as a OdataV4IdRef
func (t VolumeV1100Links_JournalingMedia) AsOdataV4IdRef() (OdataV4IdRef, error) {
	var body OdataV4IdRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOdataV4IdRef overwrites any union data inside the VolumeV1100Links_JournalingMedia as the provided OdataV4IdRef
func (t *VolumeV1100Links_JournalingMedia) FromOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOdataV4IdRef performs a merge with any union data inside the VolumeV1100Links_JournalingMedia, using the provided OdataV4IdRef
func (t *VolumeV1100Links_JournalingMedia) MergeOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100LinksJournalingMedia1 returns the union data inside the VolumeV1100Links_JournalingMedia as a VolumeV1100LinksJournalingMedia1
func (t VolumeV1100Links_JournalingMedia) AsVolumeV1100LinksJournalingMedia1() (VolumeV1100LinksJournalingMedia1, error) {
	var body VolumeV1100LinksJournalingMedia1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100LinksJournalingMedia1 overwrites any union data inside the VolumeV1100Links_JournalingMedia as the provided VolumeV1100LinksJournalingMedia1
func (t *VolumeV1100Links_JournalingMedia) FromVolumeV1100LinksJournalingMedia1(v VolumeV1100LinksJournalingMedia1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100LinksJournalingMedia1 performs a merge with any union data inside the VolumeV1100Links_JournalingMedia, using the provided VolumeV1100LinksJournalingMedia1
func (t *VolumeV1100Links_JournalingMedia) MergeVolumeV1100LinksJournalingMedia1(v VolumeV1100LinksJournalingMedia1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Links_JournalingMedia) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Links_JournalingMedia) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOdataV4IdRef returns the union data inside the VolumeV1100Links_ProvidingStoragePool as a OdataV4IdRef
func (t VolumeV1100Links_ProvidingStoragePool) AsOdataV4IdRef() (OdataV4IdRef, error) {
	var body OdataV4IdRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOdataV4IdRef overwrites any union data inside the VolumeV1100Links_ProvidingStoragePool as the provided OdataV4IdRef
func (t *VolumeV1100Links_ProvidingStoragePool) FromOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOdataV4IdRef performs a merge with any union data inside the VolumeV1100Links_ProvidingStoragePool, using the provided OdataV4IdRef
func (t *VolumeV1100Links_ProvidingStoragePool) MergeOdataV4IdRef(v OdataV4IdRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100LinksProvidingStoragePool1 returns the union data inside the VolumeV1100Links_ProvidingStoragePool as a VolumeV1100LinksProvidingStoragePool1
func (t VolumeV1100Links_ProvidingStoragePool) AsVolumeV1100LinksProvidingStoragePool1() (VolumeV1100LinksProvidingStoragePool1, error) {
	var body VolumeV1100LinksProvidingStoragePool1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100LinksProvidingStoragePool1 overwrites any union data inside the VolumeV1100Links_ProvidingStoragePool as the provided VolumeV1100LinksProvidingStoragePool1
func (t *VolumeV1100Links_ProvidingStoragePool) FromVolumeV1100LinksProvidingStoragePool1(v VolumeV1100LinksProvidingStoragePool1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100LinksProvidingStoragePool1 performs a merge with any union data inside the VolumeV1100Links_ProvidingStoragePool, using the provided VolumeV1100LinksProvidingStoragePool1
func (t *VolumeV1100Links_ProvidingStoragePool) MergeVolumeV1100LinksProvidingStoragePool1(v VolumeV1100LinksProvidingStoragePool1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Links_ProvidingStoragePool) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Links_ProvidingStoragePool) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeV1100LBAFormat returns the union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormat as a VolumeV1100LBAFormat
func (t VolumeV1100NVMeNamespaceProperties_LBAFormat) AsVolumeV1100LBAFormat() (VolumeV1100LBAFormat, error) {
	var body VolumeV1100LBAFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100LBAFormat overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormat as the provided VolumeV1100LBAFormat
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormat) FromVolumeV1100LBAFormat(v VolumeV1100LBAFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100LBAFormat performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormat, using the provided VolumeV1100LBAFormat
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormat) MergeVolumeV1100LBAFormat(v VolumeV1100LBAFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100NVMeNamespacePropertiesLBAFormat1 returns the union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormat as a VolumeV1100NVMeNamespacePropertiesLBAFormat1
func (t VolumeV1100NVMeNamespaceProperties_LBAFormat) AsVolumeV1100NVMeNamespacePropertiesLBAFormat1() (VolumeV1100NVMeNamespacePropertiesLBAFormat1, error) {
	var body VolumeV1100NVMeNamespacePropertiesLBAFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NVMeNamespacePropertiesLBAFormat1 overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormat as the provided VolumeV1100NVMeNamespacePropertiesLBAFormat1
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormat) FromVolumeV1100NVMeNamespacePropertiesLBAFormat1(v VolumeV1100NVMeNamespacePropertiesLBAFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NVMeNamespacePropertiesLBAFormat1 performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormat, using the provided VolumeV1100NVMeNamespacePropertiesLBAFormat1
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormat) MergeVolumeV1100NVMeNamespacePropertiesLBAFormat1(v VolumeV1100NVMeNamespacePropertiesLBAFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100NVMeNamespaceProperties_LBAFormat) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100NVMeNamespaceProperties_LBAFormat) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeV1100LBAFormat returns the union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormats_Item as a VolumeV1100LBAFormat
func (t VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) AsVolumeV1100LBAFormat() (VolumeV1100LBAFormat, error) {
	var body VolumeV1100LBAFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100LBAFormat overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormats_Item as the provided VolumeV1100LBAFormat
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) FromVolumeV1100LBAFormat(v VolumeV1100LBAFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100LBAFormat performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormats_Item, using the provided VolumeV1100LBAFormat
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) MergeVolumeV1100LBAFormat(v VolumeV1100LBAFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100NVMeNamespacePropertiesLBAFormats1 returns the union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormats_Item as a VolumeV1100NVMeNamespacePropertiesLBAFormats1
func (t VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) AsVolumeV1100NVMeNamespacePropertiesLBAFormats1() (VolumeV1100NVMeNamespacePropertiesLBAFormats1, error) {
	var body VolumeV1100NVMeNamespacePropertiesLBAFormats1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NVMeNamespacePropertiesLBAFormats1 overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormats_Item as the provided VolumeV1100NVMeNamespacePropertiesLBAFormats1
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) FromVolumeV1100NVMeNamespacePropertiesLBAFormats1(v VolumeV1100NVMeNamespacePropertiesLBAFormats1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NVMeNamespacePropertiesLBAFormats1 performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormats_Item, using the provided VolumeV1100NVMeNamespacePropertiesLBAFormats1
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) MergeVolumeV1100NVMeNamespacePropertiesLBAFormats1(v VolumeV1100NVMeNamespacePropertiesLBAFormats1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100NVMeNamespaceProperties_LBAFormats_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeLBAFormatType returns the union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item as a VolumeLBAFormatType
func (t VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) AsVolumeLBAFormatType() (VolumeLBAFormatType, error) {
	var body VolumeLBAFormatType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeLBAFormatType overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item as the provided VolumeLBAFormatType
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) FromVolumeLBAFormatType(v VolumeLBAFormatType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeLBAFormatType performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item, using the provided VolumeLBAFormatType
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) MergeVolumeLBAFormatType(v VolumeLBAFormatType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1 returns the union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item as a VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1
func (t VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) AsVolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1() (VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1, error) {
	var body VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1 overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item as the provided VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) FromVolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1(v VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1 performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item, using the provided VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1
func (t *VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) MergeVolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1(v VolumeV1100NVMeNamespacePropertiesLBAFormatsSupported1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100NVMeNamespaceProperties_LBAFormatsSupported_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeV1100NamespaceFeatures returns the union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceFeatures as a VolumeV1100NamespaceFeatures
func (t VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) AsVolumeV1100NamespaceFeatures() (VolumeV1100NamespaceFeatures, error) {
	var body VolumeV1100NamespaceFeatures
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NamespaceFeatures overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceFeatures as the provided VolumeV1100NamespaceFeatures
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) FromVolumeV1100NamespaceFeatures(v VolumeV1100NamespaceFeatures) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NamespaceFeatures performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceFeatures, using the provided VolumeV1100NamespaceFeatures
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) MergeVolumeV1100NamespaceFeatures(v VolumeV1100NamespaceFeatures) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100NVMeNamespacePropertiesNamespaceFeatures1 returns the union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceFeatures as a VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1
func (t VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) AsVolumeV1100NVMeNamespacePropertiesNamespaceFeatures1() (VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1, error) {
	var body VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NVMeNamespacePropertiesNamespaceFeatures1 overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceFeatures as the provided VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) FromVolumeV1100NVMeNamespacePropertiesNamespaceFeatures1(v VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NVMeNamespacePropertiesNamespaceFeatures1 performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceFeatures, using the provided VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) MergeVolumeV1100NVMeNamespacePropertiesNamespaceFeatures1(v VolumeV1100NVMeNamespacePropertiesNamespaceFeatures1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100NVMeNamespaceProperties_NamespaceFeatures) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeNamespaceType returns the union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceType as a VolumeNamespaceType
func (t VolumeV1100NVMeNamespaceProperties_NamespaceType) AsVolumeNamespaceType() (VolumeNamespaceType, error) {
	var body VolumeNamespaceType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeNamespaceType overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceType as the provided VolumeNamespaceType
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceType) FromVolumeNamespaceType(v VolumeNamespaceType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeNamespaceType performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceType, using the provided VolumeNamespaceType
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceType) MergeVolumeNamespaceType(v VolumeNamespaceType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100NVMeNamespacePropertiesNamespaceType1 returns the union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceType as a VolumeV1100NVMeNamespacePropertiesNamespaceType1
func (t VolumeV1100NVMeNamespaceProperties_NamespaceType) AsVolumeV1100NVMeNamespacePropertiesNamespaceType1() (VolumeV1100NVMeNamespacePropertiesNamespaceType1, error) {
	var body VolumeV1100NVMeNamespacePropertiesNamespaceType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NVMeNamespacePropertiesNamespaceType1 overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceType as the provided VolumeV1100NVMeNamespacePropertiesNamespaceType1
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceType) FromVolumeV1100NVMeNamespacePropertiesNamespaceType1(v VolumeV1100NVMeNamespacePropertiesNamespaceType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NVMeNamespacePropertiesNamespaceType1 performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_NamespaceType, using the provided VolumeV1100NVMeNamespacePropertiesNamespaceType1
func (t *VolumeV1100NVMeNamespaceProperties_NamespaceType) MergeVolumeV1100NVMeNamespacePropertiesNamespaceType1(v VolumeV1100NVMeNamespacePropertiesNamespaceType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100NVMeNamespaceProperties_NamespaceType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100NVMeNamespaceProperties_NamespaceType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeNamespaceType returns the union data inside the VolumeV1100NVMeNamespaceProperties_Type as a VolumeNamespaceType
func (t VolumeV1100NVMeNamespaceProperties_Type) AsVolumeNamespaceType() (VolumeNamespaceType, error) {
	var body VolumeNamespaceType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeNamespaceType overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_Type as the provided VolumeNamespaceType
func (t *VolumeV1100NVMeNamespaceProperties_Type) FromVolumeNamespaceType(v VolumeNamespaceType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeNamespaceType performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_Type, using the provided VolumeNamespaceType
func (t *VolumeV1100NVMeNamespaceProperties_Type) MergeVolumeNamespaceType(v VolumeNamespaceType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100NVMeNamespacePropertiesType1 returns the union data inside the VolumeV1100NVMeNamespaceProperties_Type as a VolumeV1100NVMeNamespacePropertiesType1
func (t VolumeV1100NVMeNamespaceProperties_Type) AsVolumeV1100NVMeNamespacePropertiesType1() (VolumeV1100NVMeNamespacePropertiesType1, error) {
	var body VolumeV1100NVMeNamespacePropertiesType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NVMeNamespacePropertiesType1 overwrites any union data inside the VolumeV1100NVMeNamespaceProperties_Type as the provided VolumeV1100NVMeNamespacePropertiesType1
func (t *VolumeV1100NVMeNamespaceProperties_Type) FromVolumeV1100NVMeNamespacePropertiesType1(v VolumeV1100NVMeNamespacePropertiesType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NVMeNamespacePropertiesType1 performs a merge with any union data inside the VolumeV1100NVMeNamespaceProperties_Type, using the provided VolumeV1100NVMeNamespacePropertiesType1
func (t *VolumeV1100NVMeNamespaceProperties_Type) MergeVolumeV1100NVMeNamespacePropertiesType1(v VolumeV1100NVMeNamespacePropertiesType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100NVMeNamespaceProperties_Type) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100NVMeNamespaceProperties_Type) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeOperationType returns the union data inside the VolumeV1100Operation_Operation as a VolumeOperationType
func (t VolumeV1100Operation_Operation) AsVolumeOperationType() (VolumeOperationType, error) {
	var body VolumeOperationType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeOperationType overwrites any union data inside the VolumeV1100Operation_Operation as the provided VolumeOperationType
func (t *VolumeV1100Operation_Operation) FromVolumeOperationType(v VolumeOperationType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeOperationType performs a merge with any union data inside the VolumeV1100Operation_Operation, using the provided VolumeOperationType
func (t *VolumeV1100Operation_Operation) MergeVolumeOperationType(v VolumeOperationType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100OperationOperation1 returns the union data inside the VolumeV1100Operation_Operation as a VolumeV1100OperationOperation1
func (t VolumeV1100Operation_Operation) AsVolumeV1100OperationOperation1() (VolumeV1100OperationOperation1, error) {
	var body VolumeV1100OperationOperation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100OperationOperation1 overwrites any union data inside the VolumeV1100Operation_Operation as the provided VolumeV1100OperationOperation1
func (t *VolumeV1100Operation_Operation) FromVolumeV1100OperationOperation1(v VolumeV1100OperationOperation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100OperationOperation1 performs a merge with any union data inside the VolumeV1100Operation_Operation, using the provided VolumeV1100OperationOperation1
func (t *VolumeV1100Operation_Operation) MergeVolumeV1100OperationOperation1(v VolumeV1100OperationOperation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Operation_Operation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Operation_Operation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeV1100ALUA returns the union data inside the VolumeV1100Volume_ALUA as a VolumeV1100ALUA
func (t VolumeV1100Volume_ALUA) AsVolumeV1100ALUA() (VolumeV1100ALUA, error) {
	var body VolumeV1100ALUA
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100ALUA overwrites any union data inside the VolumeV1100Volume_ALUA as the provided VolumeV1100ALUA
func (t *VolumeV1100Volume_ALUA) FromVolumeV1100ALUA(v VolumeV1100ALUA) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100ALUA performs a merge with any union data inside the VolumeV1100Volume_ALUA, using the provided VolumeV1100ALUA
func (t *VolumeV1100Volume_ALUA) MergeVolumeV1100ALUA(v VolumeV1100ALUA) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeALUA1 returns the union data inside the VolumeV1100Volume_ALUA as a VolumeV1100VolumeALUA1
func (t VolumeV1100Volume_ALUA) AsVolumeV1100VolumeALUA1() (VolumeV1100VolumeALUA1, error) {
	var body VolumeV1100VolumeALUA1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeALUA1 overwrites any union data inside the VolumeV1100Volume_ALUA as the provided VolumeV1100VolumeALUA1
func (t *VolumeV1100Volume_ALUA) FromVolumeV1100VolumeALUA1(v VolumeV1100VolumeALUA1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeALUA1 performs a merge with any union data inside the VolumeV1100Volume_ALUA, using the provided VolumeV1100VolumeALUA1
func (t *VolumeV1100Volume_ALUA) MergeVolumeV1100VolumeALUA1(v VolumeV1100VolumeALUA1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_ALUA) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_ALUA) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataStorageLoSCapabilitiesStorageAccessCapability returns the union data inside the VolumeV1100Volume_AccessCapabilities_Item as a DataStorageLoSCapabilitiesStorageAccessCapability
func (t VolumeV1100Volume_AccessCapabilities_Item) AsDataStorageLoSCapabilitiesStorageAccessCapability() (DataStorageLoSCapabilitiesStorageAccessCapability, error) {
	var body DataStorageLoSCapabilitiesStorageAccessCapability
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataStorageLoSCapabilitiesStorageAccessCapability overwrites any union data inside the VolumeV1100Volume_AccessCapabilities_Item as the provided DataStorageLoSCapabilitiesStorageAccessCapability
func (t *VolumeV1100Volume_AccessCapabilities_Item) FromDataStorageLoSCapabilitiesStorageAccessCapability(v DataStorageLoSCapabilitiesStorageAccessCapability) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataStorageLoSCapabilitiesStorageAccessCapability performs a merge with any union data inside the VolumeV1100Volume_AccessCapabilities_Item, using the provided DataStorageLoSCapabilitiesStorageAccessCapability
func (t *VolumeV1100Volume_AccessCapabilities_Item) MergeDataStorageLoSCapabilitiesStorageAccessCapability(v DataStorageLoSCapabilitiesStorageAccessCapability) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeAccessCapabilities1 returns the union data inside the VolumeV1100Volume_AccessCapabilities_Item as a VolumeV1100VolumeAccessCapabilities1
func (t VolumeV1100Volume_AccessCapabilities_Item) AsVolumeV1100VolumeAccessCapabilities1() (VolumeV1100VolumeAccessCapabilities1, error) {
	var body VolumeV1100VolumeAccessCapabilities1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeAccessCapabilities1 overwrites any union data inside the VolumeV1100Volume_AccessCapabilities_Item as the provided VolumeV1100VolumeAccessCapabilities1
func (t *VolumeV1100Volume_AccessCapabilities_Item) FromVolumeV1100VolumeAccessCapabilities1(v VolumeV1100VolumeAccessCapabilities1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeAccessCapabilities1 performs a merge with any union data inside the VolumeV1100Volume_AccessCapabilities_Item, using the provided VolumeV1100VolumeAccessCapabilities1
func (t *VolumeV1100Volume_AccessCapabilities_Item) MergeVolumeV1100VolumeAccessCapabilities1(v VolumeV1100VolumeAccessCapabilities1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_AccessCapabilities_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_AccessCapabilities_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the VolumeV1100Volume_Description as a ResourceDescription
func (t VolumeV1100Volume_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the VolumeV1100Volume_Description as the provided ResourceDescription
func (t *VolumeV1100Volume_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the VolumeV1100Volume_Description, using the provided ResourceDescription
func (t *VolumeV1100Volume_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeDescription1 returns the union data inside the VolumeV1100Volume_Description as a VolumeV1100VolumeDescription1
func (t VolumeV1100Volume_Description) AsVolumeV1100VolumeDescription1() (VolumeV1100VolumeDescription1, error) {
	var body VolumeV1100VolumeDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeDescription1 overwrites any union data inside the VolumeV1100Volume_Description as the provided VolumeV1100VolumeDescription1
func (t *VolumeV1100Volume_Description) FromVolumeV1100VolumeDescription1(v VolumeV1100VolumeDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeDescription1 performs a merge with any union data inside the VolumeV1100Volume_Description, using the provided VolumeV1100VolumeDescription1
func (t *VolumeV1100Volume_Description) MergeVolumeV1100VolumeDescription1(v VolumeV1100VolumeDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeInitializeMethod returns the union data inside the VolumeV1100Volume_InitializeMethod as a VolumeInitializeMethod
func (t VolumeV1100Volume_InitializeMethod) AsVolumeInitializeMethod() (VolumeInitializeMethod, error) {
	var body VolumeInitializeMethod
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeInitializeMethod overwrites any union data inside the VolumeV1100Volume_InitializeMethod as the provided VolumeInitializeMethod
func (t *VolumeV1100Volume_InitializeMethod) FromVolumeInitializeMethod(v VolumeInitializeMethod) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeInitializeMethod performs a merge with any union data inside the VolumeV1100Volume_InitializeMethod, using the provided VolumeInitializeMethod
func (t *VolumeV1100Volume_InitializeMethod) MergeVolumeInitializeMethod(v VolumeInitializeMethod) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeInitializeMethod1 returns the union data inside the VolumeV1100Volume_InitializeMethod as a VolumeV1100VolumeInitializeMethod1
func (t VolumeV1100Volume_InitializeMethod) AsVolumeV1100VolumeInitializeMethod1() (VolumeV1100VolumeInitializeMethod1, error) {
	var body VolumeV1100VolumeInitializeMethod1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeInitializeMethod1 overwrites any union data inside the VolumeV1100Volume_InitializeMethod as the provided VolumeV1100VolumeInitializeMethod1
func (t *VolumeV1100Volume_InitializeMethod) FromVolumeV1100VolumeInitializeMethod1(v VolumeV1100VolumeInitializeMethod1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeInitializeMethod1 performs a merge with any union data inside the VolumeV1100Volume_InitializeMethod, using the provided VolumeV1100VolumeInitializeMethod1
func (t *VolumeV1100Volume_InitializeMethod) MergeVolumeV1100VolumeInitializeMethod1(v VolumeV1100VolumeInitializeMethod1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_InitializeMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_InitializeMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeV1100NVMeNamespaceProperties returns the union data inside the VolumeV1100Volume_NVMeNamespaceProperties as a VolumeV1100NVMeNamespaceProperties
func (t VolumeV1100Volume_NVMeNamespaceProperties) AsVolumeV1100NVMeNamespaceProperties() (VolumeV1100NVMeNamespaceProperties, error) {
	var body VolumeV1100NVMeNamespaceProperties
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100NVMeNamespaceProperties overwrites any union data inside the VolumeV1100Volume_NVMeNamespaceProperties as the provided VolumeV1100NVMeNamespaceProperties
func (t *VolumeV1100Volume_NVMeNamespaceProperties) FromVolumeV1100NVMeNamespaceProperties(v VolumeV1100NVMeNamespaceProperties) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100NVMeNamespaceProperties performs a merge with any union data inside the VolumeV1100Volume_NVMeNamespaceProperties, using the provided VolumeV1100NVMeNamespaceProperties
func (t *VolumeV1100Volume_NVMeNamespaceProperties) MergeVolumeV1100NVMeNamespaceProperties(v VolumeV1100NVMeNamespaceProperties) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeNVMeNamespaceProperties1 returns the union data inside the VolumeV1100Volume_NVMeNamespaceProperties as a VolumeV1100VolumeNVMeNamespaceProperties1
func (t VolumeV1100Volume_NVMeNamespaceProperties) AsVolumeV1100VolumeNVMeNamespaceProperties1() (VolumeV1100VolumeNVMeNamespaceProperties1, error) {
	var body VolumeV1100VolumeNVMeNamespaceProperties1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeNVMeNamespaceProperties1 overwrites any union data inside the VolumeV1100Volume_NVMeNamespaceProperties as the provided VolumeV1100VolumeNVMeNamespaceProperties1
func (t *VolumeV1100Volume_NVMeNamespaceProperties) FromVolumeV1100VolumeNVMeNamespaceProperties1(v VolumeV1100VolumeNVMeNamespaceProperties1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeNVMeNamespaceProperties1 performs a merge with any union data inside the VolumeV1100Volume_NVMeNamespaceProperties, using the provided VolumeV1100VolumeNVMeNamespaceProperties1
func (t *VolumeV1100Volume_NVMeNamespaceProperties) MergeVolumeV1100VolumeNVMeNamespaceProperties1(v VolumeV1100VolumeNVMeNamespaceProperties1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_NVMeNamespaceProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_NVMeNamespaceProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataStorageLoSCapabilitiesProvisioningPolicy returns the union data inside the VolumeV1100Volume_ProvisioningPolicy as a DataStorageLoSCapabilitiesProvisioningPolicy
func (t VolumeV1100Volume_ProvisioningPolicy) AsDataStorageLoSCapabilitiesProvisioningPolicy() (DataStorageLoSCapabilitiesProvisioningPolicy, error) {
	var body DataStorageLoSCapabilitiesProvisioningPolicy
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataStorageLoSCapabilitiesProvisioningPolicy overwrites any union data inside the VolumeV1100Volume_ProvisioningPolicy as the provided DataStorageLoSCapabilitiesProvisioningPolicy
func (t *VolumeV1100Volume_ProvisioningPolicy) FromDataStorageLoSCapabilitiesProvisioningPolicy(v DataStorageLoSCapabilitiesProvisioningPolicy) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataStorageLoSCapabilitiesProvisioningPolicy performs a merge with any union data inside the VolumeV1100Volume_ProvisioningPolicy, using the provided DataStorageLoSCapabilitiesProvisioningPolicy
func (t *VolumeV1100Volume_ProvisioningPolicy) MergeDataStorageLoSCapabilitiesProvisioningPolicy(v DataStorageLoSCapabilitiesProvisioningPolicy) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeProvisioningPolicy1 returns the union data inside the VolumeV1100Volume_ProvisioningPolicy as a VolumeV1100VolumeProvisioningPolicy1
func (t VolumeV1100Volume_ProvisioningPolicy) AsVolumeV1100VolumeProvisioningPolicy1() (VolumeV1100VolumeProvisioningPolicy1, error) {
	var body VolumeV1100VolumeProvisioningPolicy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeProvisioningPolicy1 overwrites any union data inside the VolumeV1100Volume_ProvisioningPolicy as the provided VolumeV1100VolumeProvisioningPolicy1
func (t *VolumeV1100Volume_ProvisioningPolicy) FromVolumeV1100VolumeProvisioningPolicy1(v VolumeV1100VolumeProvisioningPolicy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeProvisioningPolicy1 performs a merge with any union data inside the VolumeV1100Volume_ProvisioningPolicy, using the provided VolumeV1100VolumeProvisioningPolicy1
func (t *VolumeV1100Volume_ProvisioningPolicy) MergeVolumeV1100VolumeProvisioningPolicy1(v VolumeV1100VolumeProvisioningPolicy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_ProvisioningPolicy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_ProvisioningPolicy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeRAIDType returns the union data inside the VolumeV1100Volume_RAIDType as a VolumeRAIDType
func (t VolumeV1100Volume_RAIDType) AsVolumeRAIDType() (VolumeRAIDType, error) {
	var body VolumeRAIDType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeRAIDType overwrites any union data inside the VolumeV1100Volume_RAIDType as the provided VolumeRAIDType
func (t *VolumeV1100Volume_RAIDType) FromVolumeRAIDType(v VolumeRAIDType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeRAIDType performs a merge with any union data inside the VolumeV1100Volume_RAIDType, using the provided VolumeRAIDType
func (t *VolumeV1100Volume_RAIDType) MergeVolumeRAIDType(v VolumeRAIDType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeRAIDType1 returns the union data inside the VolumeV1100Volume_RAIDType as a VolumeV1100VolumeRAIDType1
func (t VolumeV1100Volume_RAIDType) AsVolumeV1100VolumeRAIDType1() (VolumeV1100VolumeRAIDType1, error) {
	var body VolumeV1100VolumeRAIDType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeRAIDType1 overwrites any union data inside the VolumeV1100Volume_RAIDType as the provided VolumeV1100VolumeRAIDType1
func (t *VolumeV1100Volume_RAIDType) FromVolumeV1100VolumeRAIDType1(v VolumeV1100VolumeRAIDType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeRAIDType1 performs a merge with any union data inside the VolumeV1100Volume_RAIDType, using the provided VolumeV1100VolumeRAIDType1
func (t *VolumeV1100Volume_RAIDType) MergeVolumeV1100VolumeRAIDType1(v VolumeV1100VolumeRAIDType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_RAIDType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_RAIDType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeReadCachePolicyType returns the union data inside the VolumeV1100Volume_ReadCachePolicy as a VolumeReadCachePolicyType
func (t VolumeV1100Volume_ReadCachePolicy) AsVolumeReadCachePolicyType() (VolumeReadCachePolicyType, error) {
	var body VolumeReadCachePolicyType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeReadCachePolicyType overwrites any union data inside the VolumeV1100Volume_ReadCachePolicy as the provided VolumeReadCachePolicyType
func (t *VolumeV1100Volume_ReadCachePolicy) FromVolumeReadCachePolicyType(v VolumeReadCachePolicyType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeReadCachePolicyType performs a merge with any union data inside the VolumeV1100Volume_ReadCachePolicy, using the provided VolumeReadCachePolicyType
func (t *VolumeV1100Volume_ReadCachePolicy) MergeVolumeReadCachePolicyType(v VolumeReadCachePolicyType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeReadCachePolicy1 returns the union data inside the VolumeV1100Volume_ReadCachePolicy as a VolumeV1100VolumeReadCachePolicy1
func (t VolumeV1100Volume_ReadCachePolicy) AsVolumeV1100VolumeReadCachePolicy1() (VolumeV1100VolumeReadCachePolicy1, error) {
	var body VolumeV1100VolumeReadCachePolicy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeReadCachePolicy1 overwrites any union data inside the VolumeV1100Volume_ReadCachePolicy as the provided VolumeV1100VolumeReadCachePolicy1
func (t *VolumeV1100Volume_ReadCachePolicy) FromVolumeV1100VolumeReadCachePolicy1(v VolumeV1100VolumeReadCachePolicy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeReadCachePolicy1 performs a merge with any union data inside the VolumeV1100Volume_ReadCachePolicy, using the provided VolumeV1100VolumeReadCachePolicy1
func (t *VolumeV1100Volume_ReadCachePolicy) MergeVolumeV1100VolumeReadCachePolicy1(v VolumeV1100VolumeReadCachePolicy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_ReadCachePolicy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_ReadCachePolicy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeVolumeType returns the union data inside the VolumeV1100Volume_VolumeType as a VolumeVolumeType
func (t VolumeV1100Volume_VolumeType) AsVolumeVolumeType() (VolumeVolumeType, error) {
	var body VolumeVolumeType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeVolumeType overwrites any union data inside the VolumeV1100Volume_VolumeType as the provided VolumeVolumeType
func (t *VolumeV1100Volume_VolumeType) FromVolumeVolumeType(v VolumeVolumeType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeVolumeType performs a merge with any union data inside the VolumeV1100Volume_VolumeType, using the provided VolumeVolumeType
func (t *VolumeV1100Volume_VolumeType) MergeVolumeVolumeType(v VolumeVolumeType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeVolumeType1 returns the union data inside the VolumeV1100Volume_VolumeType as a VolumeV1100VolumeVolumeType1
func (t VolumeV1100Volume_VolumeType) AsVolumeV1100VolumeVolumeType1() (VolumeV1100VolumeVolumeType1, error) {
	var body VolumeV1100VolumeVolumeType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeVolumeType1 overwrites any union data inside the VolumeV1100Volume_VolumeType as the provided VolumeV1100VolumeVolumeType1
func (t *VolumeV1100Volume_VolumeType) FromVolumeV1100VolumeVolumeType1(v VolumeV1100VolumeVolumeType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeVolumeType1 performs a merge with any union data inside the VolumeV1100Volume_VolumeType, using the provided VolumeV1100VolumeVolumeType1
func (t *VolumeV1100Volume_VolumeType) MergeVolumeV1100VolumeVolumeType1(v VolumeV1100VolumeVolumeType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_VolumeType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_VolumeType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeVolumeUsageType returns the union data inside the VolumeV1100Volume_VolumeUsage as a VolumeVolumeUsageType
func (t VolumeV1100Volume_VolumeUsage) AsVolumeVolumeUsageType() (VolumeVolumeUsageType, error) {
	var body VolumeVolumeUsageType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeVolumeUsageType overwrites any union data inside the VolumeV1100Volume_VolumeUsage as the provided VolumeVolumeUsageType
func (t *VolumeV1100Volume_VolumeUsage) FromVolumeVolumeUsageType(v VolumeVolumeUsageType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeVolumeUsageType performs a merge with any union data inside the VolumeV1100Volume_VolumeUsage, using the provided VolumeVolumeUsageType
func (t *VolumeV1100Volume_VolumeUsage) MergeVolumeVolumeUsageType(v VolumeVolumeUsageType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeVolumeUsage1 returns the union data inside the VolumeV1100Volume_VolumeUsage as a VolumeV1100VolumeVolumeUsage1
func (t VolumeV1100Volume_VolumeUsage) AsVolumeV1100VolumeVolumeUsage1() (VolumeV1100VolumeVolumeUsage1, error) {
	var body VolumeV1100VolumeVolumeUsage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeVolumeUsage1 overwrites any union data inside the VolumeV1100Volume_VolumeUsage as the provided VolumeV1100VolumeVolumeUsage1
func (t *VolumeV1100Volume_VolumeUsage) FromVolumeV1100VolumeVolumeUsage1(v VolumeV1100VolumeVolumeUsage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeVolumeUsage1 performs a merge with any union data inside the VolumeV1100Volume_VolumeUsage, using the provided VolumeV1100VolumeVolumeUsage1
func (t *VolumeV1100Volume_VolumeUsage) MergeVolumeV1100VolumeVolumeUsage1(v VolumeV1100VolumeVolumeUsage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_VolumeUsage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_VolumeUsage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeWriteCachePolicyType returns the union data inside the VolumeV1100Volume_WriteCachePolicy as a VolumeWriteCachePolicyType
func (t VolumeV1100Volume_WriteCachePolicy) AsVolumeWriteCachePolicyType() (VolumeWriteCachePolicyType, error) {
	var body VolumeWriteCachePolicyType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeWriteCachePolicyType overwrites any union data inside the VolumeV1100Volume_WriteCachePolicy as the provided VolumeWriteCachePolicyType
func (t *VolumeV1100Volume_WriteCachePolicy) FromVolumeWriteCachePolicyType(v VolumeWriteCachePolicyType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeWriteCachePolicyType performs a merge with any union data inside the VolumeV1100Volume_WriteCachePolicy, using the provided VolumeWriteCachePolicyType
func (t *VolumeV1100Volume_WriteCachePolicy) MergeVolumeWriteCachePolicyType(v VolumeWriteCachePolicyType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeWriteCachePolicy1 returns the union data inside the VolumeV1100Volume_WriteCachePolicy as a VolumeV1100VolumeWriteCachePolicy1
func (t VolumeV1100Volume_WriteCachePolicy) AsVolumeV1100VolumeWriteCachePolicy1() (VolumeV1100VolumeWriteCachePolicy1, error) {
	var body VolumeV1100VolumeWriteCachePolicy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeWriteCachePolicy1 overwrites any union data inside the VolumeV1100Volume_WriteCachePolicy as the provided VolumeV1100VolumeWriteCachePolicy1
func (t *VolumeV1100Volume_WriteCachePolicy) FromVolumeV1100VolumeWriteCachePolicy1(v VolumeV1100VolumeWriteCachePolicy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeWriteCachePolicy1 performs a merge with any union data inside the VolumeV1100Volume_WriteCachePolicy, using the provided VolumeV1100VolumeWriteCachePolicy1
func (t *VolumeV1100Volume_WriteCachePolicy) MergeVolumeV1100VolumeWriteCachePolicy1(v VolumeV1100VolumeWriteCachePolicy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_WriteCachePolicy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_WriteCachePolicy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVolumeWriteCacheStateType returns the union data inside the VolumeV1100Volume_WriteCacheState as a VolumeWriteCacheStateType
func (t VolumeV1100Volume_WriteCacheState) AsVolumeWriteCacheStateType() (VolumeWriteCacheStateType, error) {
	var body VolumeWriteCacheStateType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeWriteCacheStateType overwrites any union data inside the VolumeV1100Volume_WriteCacheState as the provided VolumeWriteCacheStateType
func (t *VolumeV1100Volume_WriteCacheState) FromVolumeWriteCacheStateType(v VolumeWriteCacheStateType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeWriteCacheStateType performs a merge with any union data inside the VolumeV1100Volume_WriteCacheState, using the provided VolumeWriteCacheStateType
func (t *VolumeV1100Volume_WriteCacheState) MergeVolumeWriteCacheStateType(v VolumeWriteCacheStateType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumeV1100VolumeWriteCacheState1 returns the union data inside the VolumeV1100Volume_WriteCacheState as a VolumeV1100VolumeWriteCacheState1
func (t VolumeV1100Volume_WriteCacheState) AsVolumeV1100VolumeWriteCacheState1() (VolumeV1100VolumeWriteCacheState1, error) {
	var body VolumeV1100VolumeWriteCacheState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumeV1100VolumeWriteCacheState1 overwrites any union data inside the VolumeV1100Volume_WriteCacheState as the provided VolumeV1100VolumeWriteCacheState1
func (t *VolumeV1100Volume_WriteCacheState) FromVolumeV1100VolumeWriteCacheState1(v VolumeV1100VolumeWriteCacheState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumeV1100VolumeWriteCacheState1 performs a merge with any union data inside the VolumeV1100Volume_WriteCacheState, using the provided VolumeV1100VolumeWriteCacheState1
func (t *VolumeV1100Volume_WriteCacheState) MergeVolumeV1100VolumeWriteCacheState1(v VolumeV1100VolumeWriteCacheState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VolumeV1100Volume_WriteCacheState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VolumeV1100Volume_WriteCacheState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
