// Package domain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package domain

import (
	"time"
)

// Defines values for ActionInfoV141ParameterTypes.
const (
	Boolean     ActionInfoV141ParameterTypes = "Boolean"
	Number      ActionInfoV141ParameterTypes = "Number"
	NumberArray ActionInfoV141ParameterTypes = "NumberArray"
	Object      ActionInfoV141ParameterTypes = "Object"
	ObjectArray ActionInfoV141ParameterTypes = "ObjectArray"
	String      ActionInfoV141ParameterTypes = "String"
	StringArray ActionInfoV141ParameterTypes = "StringArray"
)

// Defines values for ChassisV1250ChassisType.
const (
	Blade            ChassisV1250ChassisType = "Blade"
	Card             ChassisV1250ChassisType = "Card"
	Cartridge        ChassisV1250ChassisType = "Cartridge"
	Component        ChassisV1250ChassisType = "Component"
	Drawer           ChassisV1250ChassisType = "Drawer"
	Enclosure        ChassisV1250ChassisType = "Enclosure"
	Expansion        ChassisV1250ChassisType = "Expansion"
	HeatExchanger    ChassisV1250ChassisType = "HeatExchanger"
	IPBasedDrive     ChassisV1250ChassisType = "IPBasedDrive"
	ImmersionTank    ChassisV1250ChassisType = "ImmersionTank"
	Module           ChassisV1250ChassisType = "Module"
	Other            ChassisV1250ChassisType = "Other"
	Pod              ChassisV1250ChassisType = "Pod"
	PowerStrip       ChassisV1250ChassisType = "PowerStrip"
	Rack             ChassisV1250ChassisType = "Rack"
	RackGroup        ChassisV1250ChassisType = "RackGroup"
	RackMount        ChassisV1250ChassisType = "RackMount"
	Row              ChassisV1250ChassisType = "Row"
	Shelf            ChassisV1250ChassisType = "Shelf"
	Sidecar          ChassisV1250ChassisType = "Sidecar"
	Sled             ChassisV1250ChassisType = "Sled"
	StandAlone       ChassisV1250ChassisType = "StandAlone"
	StorageEnclosure ChassisV1250ChassisType = "StorageEnclosure"
	Zone             ChassisV1250ChassisType = "Zone"
)

// Defines values for ChassisV1250DoorState.
const (
	Closed        ChassisV1250DoorState = "Closed"
	Locked        ChassisV1250DoorState = "Locked"
	LockedAndOpen ChassisV1250DoorState = "LockedAndOpen"
	Open          ChassisV1250DoorState = "Open"
)

// Defines values for ChassisV1250EnvironmentalClass.
const (
	A1 ChassisV1250EnvironmentalClass = "A1"
	A2 ChassisV1250EnvironmentalClass = "A2"
	A3 ChassisV1250EnvironmentalClass = "A3"
	A4 ChassisV1250EnvironmentalClass = "A4"
)

// Defines values for ChassisV1250IndicatorLED.
const (
	ChassisV1250IndicatorLEDBlinking ChassisV1250IndicatorLED = "Blinking"
	ChassisV1250IndicatorLEDLit      ChassisV1250IndicatorLED = "Lit"
	ChassisV1250IndicatorLEDOff      ChassisV1250IndicatorLED = "Off"
	ChassisV1250IndicatorLEDUnknown  ChassisV1250IndicatorLED = "Unknown"
)

// Defines values for ChassisV1250IntrusionSensor.
const (
	HardwareIntrusion ChassisV1250IntrusionSensor = "HardwareIntrusion"
	Normal            ChassisV1250IntrusionSensor = "Normal"
	TamperingDetected ChassisV1250IntrusionSensor = "TamperingDetected"
)

// Defines values for ChassisV1250IntrusionSensorReArm.
const (
	Automatic ChassisV1250IntrusionSensorReArm = "Automatic"
	Manual    ChassisV1250IntrusionSensorReArm = "Manual"
)

// Defines values for ChassisV1250ThermalDirection.
const (
	ChassisV1250ThermalDirectionBackToFront ChassisV1250ThermalDirection = "BackToFront"
	ChassisV1250ThermalDirectionFrontToBack ChassisV1250ThermalDirection = "FrontToBack"
	ChassisV1250ThermalDirectionSealed      ChassisV1250ThermalDirection = "Sealed"
	ChassisV1250ThermalDirectionTopExhaust  ChassisV1250ThermalDirection = "TopExhaust"
)

// Defines values for ResolutionStepV100ResolutionType.
const (
	CollectDiagnosticData ResolutionStepV100ResolutionType = "CollectDiagnosticData"
	ContactVendor         ResolutionStepV100ResolutionType = "ContactVendor"
	FirmwareUpdate        ResolutionStepV100ResolutionType = "FirmwareUpdate"
	OEM                   ResolutionStepV100ResolutionType = "OEM"
	PowerCycle            ResolutionStepV100ResolutionType = "PowerCycle"
	ReplaceComponent      ResolutionStepV100ResolutionType = "ReplaceComponent"
	Reset                 ResolutionStepV100ResolutionType = "Reset"
	ResetToDefaults       ResolutionStepV100ResolutionType = "ResetToDefaults"
)

// Defines values for ResourceHealth.
const (
	Critical ResourceHealth = "Critical"
	OK       ResourceHealth = "OK"
	Warning  ResourceHealth = "Warning"
)

// Defines values for ResourcePowerState.
const (
	ResourcePowerStateOff         ResourcePowerState = "Off"
	ResourcePowerStateOn          ResourcePowerState = "On"
	ResourcePowerStatePaused      ResourcePowerState = "Paused"
	ResourcePowerStatePoweringOff ResourcePowerState = "PoweringOff"
	ResourcePowerStatePoweringOn  ResourcePowerState = "PoweringOn"
)

// Defines values for ResourceState.
const (
	Absent             ResourceState = "Absent"
	Deferring          ResourceState = "Deferring"
	Disabled           ResourceState = "Disabled"
	Enabled            ResourceState = "Enabled"
	InTest             ResourceState = "InTest"
	Qualified          ResourceState = "Qualified"
	Quiesced           ResourceState = "Quiesced"
	StandbyOffline     ResourceState = "StandbyOffline"
	StandbySpare       ResourceState = "StandbySpare"
	Starting           ResourceState = "Starting"
	UnavailableOffline ResourceState = "UnavailableOffline"
	Updating           ResourceState = "Updating"
)

// Defines values for ResourceV1180LocationType.
const (
	Backplane ResourceV1180LocationType = "Backplane"
	Bay       ResourceV1180LocationType = "Bay"
	Connector ResourceV1180LocationType = "Connector"
	Embedded  ResourceV1180LocationType = "Embedded"
	Slot      ResourceV1180LocationType = "Slot"
	Socket    ResourceV1180LocationType = "Socket"
)

// Defines values for ResourceV1180Orientation.
const (
	ResourceV1180OrientationBackToFront ResourceV1180Orientation = "BackToFront"
	ResourceV1180OrientationBottomToTop ResourceV1180Orientation = "BottomToTop"
	ResourceV1180OrientationFrontToBack ResourceV1180Orientation = "FrontToBack"
	ResourceV1180OrientationLeftToRight ResourceV1180Orientation = "LeftToRight"
	ResourceV1180OrientationRightToLeft ResourceV1180Orientation = "RightToLeft"
	ResourceV1180OrientationTopToBottom ResourceV1180Orientation = "TopToBottom"
)

// Defines values for ResourceV1180RackUnits.
const (
	EIA310 ResourceV1180RackUnits = "EIA_310"
	OpenU  ResourceV1180RackUnits = "OpenU"
)

// Defines values for ResourceV1180Reference.
const (
	Bottom ResourceV1180Reference = "Bottom"
	Front  ResourceV1180Reference = "Front"
	Left   ResourceV1180Reference = "Left"
	Middle ResourceV1180Reference = "Middle"
	Rear   ResourceV1180Reference = "Rear"
	Right  ResourceV1180Reference = "Right"
	Top    ResourceV1180Reference = "Top"
)

// ActionInfoV141ParameterTypes defines model for ActionInfo_v1_4_1_ParameterTypes.
type ActionInfoV141ParameterTypes string

// ActionInfoV141Parameters The information about a parameter included in a Redfish action for this resource.
type ActionInfoV141Parameters struct {
	// AllowableNumbers The allowable numeric values or duration values, inclusive ranges of values, and incremental step values for this parameter as applied to this action target.
	AllowableNumbers *[]string `json:"AllowableNumbers,omitempty"`

	// AllowablePattern The allowable pattern for this parameter as applied to this action target.
	AllowablePattern *string `json:"AllowablePattern"`

	// AllowableValueDescriptions Descriptions of allowable values for this parameter.
	AllowableValueDescriptions *[]string `json:"AllowableValueDescriptions,omitempty"`

	// AllowableValues The allowable values for this parameter as applied to this action target.
	AllowableValues *[]string `json:"AllowableValues,omitempty"`

	// ArraySizeMaximum The maximum number of array elements allowed for this parameter.
	ArraySizeMaximum *int64 `json:"ArraySizeMaximum"`

	// ArraySizeMinimum The minimum number of array elements required for this parameter.
	ArraySizeMinimum *int64                        `json:"ArraySizeMinimum"`
	DataType         *ActionInfoV141ParameterTypes `json:"DataType,omitempty"`

	// MaximumValue The maximum supported value for this parameter.
	MaximumValue *float32 `json:"MaximumValue"`

	// MinimumValue The minimum supported value for this parameter.
	MinimumValue *float32 `json:"MinimumValue"`

	// Name The name of the parameter for this action.
	Name *string `json:"Name,omitempty"`

	// ObjectDataType The data type of an object-based parameter.
	ObjectDataType *string `json:"ObjectDataType"`

	// Required An indication of whether the parameter is required to complete this action.
	Required *bool `json:"Required,omitempty"`
}

// Chassis The Chassis schema represents the physical components of a system.  This resource represents the sheet-metal confined spaces and logical zones such as racks, enclosures, chassis and all other containers.  Subsystems, such as sensors, that operate outside of a system's data plane are linked either directly or indirectly through this resource.  A subsystem that operates outside of a system's data plane are not accessible to software that runs on the system.  It also describes the location, such as a slot, socket, or bay, where a unit can be installed, by populating a resource instance with an absent state if a unit is not present.
type Chassis = ChassisV1250Chassis

// ChassisV1250Actions The available actions for this resource.
type ChassisV1250Actions struct {
	// HashChassisReset This action resets the chassis.  Additionally, it could reset systems or other contained resources depending on the ResetType used to invoke this action.
	HashChassisReset *ChassisV1250Reset `json:"#Chassis.Reset,omitempty"`

	// Oem The available OEM-specific actions for this resource.
	Oem *ChassisV1250OemActions `json:"Oem,omitempty"`
}

// ChassisV1250Chassis The Chassis schema represents the physical components of a system.  This resource represents the sheet-metal confined spaces and logical zones such as racks, enclosures, chassis and all other containers.  Subsystems, such as sensors, that operate outside of a system's data plane are linked either directly or indirectly through this resource.  A subsystem that operates outside of a system's data plane are not accessible to software that runs on the system.  It also describes the location, such as a slot, socket, or bay, where a unit can be installed, by populating a resource instance with an absent state if a unit is not present.
type ChassisV1250Chassis struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Actions The available actions for this resource.
	Actions *ChassisV1250Actions `json:"Actions,omitempty"`

	// Assembly A reference to a resource.
	Assembly *OdataV4IdRef `json:"Assembly,omitempty"`

	// AssetTag The user-assigned asset tag of this chassis.
	AssetTag *string `json:"AssetTag"`

	// Certificates A reference to a resource.
	Certificates *OdataV4IdRef           `json:"Certificates,omitempty"`
	ChassisType  ChassisV1250ChassisType `json:"ChassisType"`

	// Controls A reference to a resource.
	Controls *OdataV4IdRef `json:"Controls,omitempty"`

	// DepthMm The depth of the chassis.
	DepthMm *float32 `json:"DepthMm"`

	// Description The description of this resource.  Used for commonality in the schema definitions.
	Description *ResourceDescription `json:"Description,omitempty"`

	// Doors The doors or access panels of the chassis.
	Doors *ChassisV1250Doors `json:"Doors,omitempty"`

	// Drives A reference to a resource.
	Drives *OdataV4IdRef `json:"Drives,omitempty"`

	// ElectricalSourceManagerURIs The URIs of the management interfaces for the external electrical source connections for this chassis.
	ElectricalSourceManagerURIs *[]string `json:"ElectricalSourceManagerURIs,omitempty"`

	// ElectricalSourceNames The names of the external electrical sources, such as circuits or outlets, connected to this chassis.
	ElectricalSourceNames *[]string `json:"ElectricalSourceNames,omitempty"`

	// EnvironmentMetrics A reference to a resource.
	EnvironmentMetrics *OdataV4IdRef                   `json:"EnvironmentMetrics,omitempty"`
	EnvironmentalClass *ChassisV1250EnvironmentalClass `json:"EnvironmentalClass,omitempty"`

	// FabricAdapters A reference to a resource.
	FabricAdapters *OdataV4IdRef `json:"FabricAdapters,omitempty"`

	// HeatingCoolingEquipmentNames The names of the external heating or cooling equipment, such as coolant distribution units, connected to this chassis.
	HeatingCoolingEquipmentNames *[]string `json:"HeatingCoolingEquipmentNames,omitempty"`

	// HeatingCoolingManagerURIs The URIs of the management interfaces for the external heating or cooling equipment for this chassis.
	HeatingCoolingManagerURIs *[]string `json:"HeatingCoolingManagerURIs,omitempty"`

	// HeightMm The height of the chassis.
	HeightMm *float32 `json:"HeightMm"`

	// HotPluggable An indication of whether this component can be inserted or removed while the equipment is in operation.
	HotPluggable *bool `json:"HotPluggable"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id           ResourceId                `json:"Id"`
	IndicatorLED *ChassisV1250IndicatorLED `json:"IndicatorLED,omitempty"`

	// Links The links to other resources that are related to this resource.
	Links *ChassisV1250Links `json:"Links,omitempty"`

	// Location The location of a resource.
	Location *ResourceV1180Location `json:"Location,omitempty"`

	// LocationIndicatorActive An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive"`

	// LogServices A reference to a resource.
	LogServices *OdataV4IdRef `json:"LogServices,omitempty"`

	// Manufacturer The manufacturer of this chassis.
	Manufacturer *string `json:"Manufacturer"`

	// MaxPowerWatts The upper bound of the total power consumed by the chassis.
	MaxPowerWatts *float32 `json:"MaxPowerWatts"`

	// Measurements An array of DSP0274-defined measurement blocks.
	// Deprecated:
	Measurements *[]SoftwareInventoryV1101MeasurementBlock `json:"Measurements,omitempty"`

	// MediaControllers A reference to a resource.
	MediaControllers *OdataV4IdRef `json:"MediaControllers,omitempty"`

	// Memory A reference to a resource.
	Memory *OdataV4IdRef `json:"Memory,omitempty"`

	// MemoryDomains A reference to a resource.
	MemoryDomains *OdataV4IdRef `json:"MemoryDomains,omitempty"`

	// MinPowerWatts The lower bound of the total power consumed by the chassis.
	MinPowerWatts *float32 `json:"MinPowerWatts"`

	// Model The model number of the chassis.
	Model *string `json:"Model"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// NetworkAdapters A reference to a resource.
	NetworkAdapters *OdataV4IdRef `json:"NetworkAdapters,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PCIeDevices A reference to a resource.
	PCIeDevices *OdataV4IdRef `json:"PCIeDevices,omitempty"`

	// PCIeSlots A reference to a resource.
	PCIeSlots *OdataV4IdRef `json:"PCIeSlots,omitempty"`

	// PartNumber The part number of the chassis.
	PartNumber *string `json:"PartNumber"`

	// PhysicalSecurity The physical security state of the chassis.
	PhysicalSecurity *ChassisV1250PhysicalSecurity `json:"PhysicalSecurity,omitempty"`

	// Power A reference to a resource.
	Power      *OdataV4IdRef       `json:"Power,omitempty"`
	PowerState *ResourcePowerState `json:"PowerState,omitempty"`

	// PowerSubsystem A reference to a resource.
	PowerSubsystem *OdataV4IdRef `json:"PowerSubsystem,omitempty"`

	// PoweredByParent Indicates that the chassis receives power from the containing chassis.
	PoweredByParent *bool `json:"PoweredByParent"`

	// Processors A reference to a resource.
	Processors *OdataV4IdRef `json:"Processors,omitempty"`

	// Replaceable An indication of whether this component can be independently replaced as allowed by the vendor's replacement policy.
	Replaceable *bool `json:"Replaceable"`

	// SKU The SKU of the chassis.
	SKU *string `json:"SKU"`

	// Sensors A reference to a resource.
	Sensors *OdataV4IdRef `json:"Sensors,omitempty"`

	// SerialNumber The serial number of the chassis.
	SerialNumber *string `json:"SerialNumber"`

	// SparePartNumber The spare part number of the chassis.
	SparePartNumber *string `json:"SparePartNumber"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`

	// Thermal A reference to a resource.
	Thermal          *OdataV4IdRef                 `json:"Thermal,omitempty"`
	ThermalDirection *ChassisV1250ThermalDirection `json:"ThermalDirection,omitempty"`

	// ThermalManagedByParent Indicates that the chassis is thermally managed by the parent chassis.
	ThermalManagedByParent *bool `json:"ThermalManagedByParent"`

	// ThermalSubsystem A reference to a resource.
	ThermalSubsystem *OdataV4IdRef `json:"ThermalSubsystem,omitempty"`

	// TrustedComponents A reference to a resource.
	TrustedComponents *OdataV4IdRef `json:"TrustedComponents,omitempty"`
	UUID              *ResourceUUID `json:"UUID,omitempty"`

	// Version The hardware version of this chassis.
	Version *string `json:"Version"`

	// WeightKg The weight of the chassis.
	WeightKg *float32 `json:"WeightKg"`

	// WidthMm The width of the chassis.
	WidthMm *float32 `json:"WidthMm"`
}

// ChassisV1250ChassisType defines model for Chassis_v1_25_0_ChassisType.
type ChassisV1250ChassisType string

// ChassisV1250Door A door or access panel on the chassis.
type ChassisV1250Door struct {
	DoorState *ChassisV1250DoorState `json:"DoorState,omitempty"`

	// Locked Indicates if the door is locked.
	Locked *bool `json:"Locked"`

	// UserLabel A user-assigned label.
	UserLabel *string `json:"UserLabel,omitempty"`
}

// ChassisV1250DoorState defines model for Chassis_v1_25_0_DoorState.
type ChassisV1250DoorState string

// ChassisV1250Doors The doors or access panels of the chassis.
type ChassisV1250Doors struct {
	// Front A door or access panel on the chassis.
	Front *ChassisV1250Door `json:"Front,omitempty"`

	// Rear A door or access panel on the chassis.
	Rear *ChassisV1250Door `json:"Rear,omitempty"`
}

// ChassisV1250EnvironmentalClass defines model for Chassis_v1_25_0_EnvironmentalClass.
type ChassisV1250EnvironmentalClass string

// ChassisV1250IndicatorLED defines model for Chassis_v1_25_0_IndicatorLED.
type ChassisV1250IndicatorLED string

// ChassisV1250IntrusionSensor defines model for Chassis_v1_25_0_IntrusionSensor.
type ChassisV1250IntrusionSensor string

// ChassisV1250IntrusionSensorReArm defines model for Chassis_v1_25_0_IntrusionSensorReArm.
type ChassisV1250IntrusionSensorReArm string

// ChassisV1250Links The links to other resources that are related to this resource.
type ChassisV1250Links struct {
	// Cables An array of links to the cables connected to this chassis.
	Cables *[]OdataV4IdRef `json:"Cables,omitempty"`

	// CablesOdataCount The number of items in a collection.
	CablesOdataCount *OdataV4Count `json:"Cables@odata.count,omitempty"`

	// ComputerSystems An array of links to the computer systems that this chassis directly and wholly contains.
	ComputerSystems *[]OdataV4IdRef `json:"ComputerSystems,omitempty"`

	// ComputerSystemsOdataCount The number of items in a collection.
	ComputerSystemsOdataCount *OdataV4Count `json:"ComputerSystems@odata.count,omitempty"`

	// ConnectedCoolingLoops An array of links to cooling loops connected to this chassis.
	ConnectedCoolingLoops *[]OdataV4IdRef `json:"ConnectedCoolingLoops,omitempty"`

	// ConnectedCoolingLoopsOdataCount The number of items in a collection.
	ConnectedCoolingLoopsOdataCount *OdataV4Count `json:"ConnectedCoolingLoops@odata.count,omitempty"`

	// ContainedBy A reference to a resource.
	ContainedBy *OdataV4IdRef `json:"ContainedBy,omitempty"`

	// Contains An array of links to any other chassis that this chassis has in it.
	Contains *[]OdataV4IdRef `json:"Contains,omitempty"`

	// ContainsOdataCount The number of items in a collection.
	ContainsOdataCount *OdataV4Count `json:"Contains@odata.count,omitempty"`

	// CooledBy An array of links to resources or objects that cool this chassis.  Normally, the link is for either a chassis or a specific set of fans.
	// Deprecated:
	CooledBy *[]OdataV4IdRef `json:"CooledBy,omitempty"`

	// CooledByOdataCount The number of items in a collection.
	CooledByOdataCount *OdataV4Count `json:"CooledBy@odata.count,omitempty"`

	// CoolingUnits An array of links to cooling unit functionality contained in this chassis.
	CoolingUnits *[]OdataV4IdRef `json:"CoolingUnits,omitempty"`

	// CoolingUnitsOdataCount The number of items in a collection.
	CoolingUnitsOdataCount *OdataV4Count `json:"CoolingUnits@odata.count,omitempty"`

	// Drives An array of links to the drives located in this chassis.
	Drives *[]OdataV4IdRef `json:"Drives,omitempty"`

	// DrivesOdataCount The number of items in a collection.
	DrivesOdataCount *OdataV4Count `json:"Drives@odata.count,omitempty"`

	// Facility A reference to a resource.
	Facility *OdataV4IdRef `json:"Facility,omitempty"`

	// Fans An array of links to the fans that cool this chassis.
	Fans *[]OdataV4IdRef `json:"Fans,omitempty"`

	// FansOdataCount The number of items in a collection.
	FansOdataCount *OdataV4Count `json:"Fans@odata.count,omitempty"`

	// ManagedBy An array of links to the managers responsible for managing this chassis.
	ManagedBy *[]OdataV4IdRef `json:"ManagedBy,omitempty"`

	// ManagedByOdataCount The number of items in a collection.
	ManagedByOdataCount *OdataV4Count `json:"ManagedBy@odata.count,omitempty"`

	// ManagersInChassis An array of links to the managers located in this chassis.
	ManagersInChassis *[]OdataV4IdRef `json:"ManagersInChassis,omitempty"`

	// ManagersInChassisOdataCount The number of items in a collection.
	ManagersInChassisOdataCount *OdataV4Count `json:"ManagersInChassis@odata.count,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PCIeDevices An array of links to the PCIe devices located in this chassis.
	// Deprecated:
	PCIeDevices *[]OdataV4IdRef `json:"PCIeDevices,omitempty"`

	// PCIeDevicesOdataCount The number of items in a collection.
	PCIeDevicesOdataCount *OdataV4Count `json:"PCIeDevices@odata.count,omitempty"`

	// PowerDistribution A reference to a resource.
	PowerDistribution *OdataV4IdRef `json:"PowerDistribution,omitempty"`

	// PowerOutlets An array of links to the outlets that provide power to this chassis.
	PowerOutlets *[]OdataV4IdRef `json:"PowerOutlets,omitempty"`

	// PowerOutletsOdataCount The number of items in a collection.
	PowerOutletsOdataCount *OdataV4Count `json:"PowerOutlets@odata.count,omitempty"`

	// PowerSupplies An array of links to the power supplies that provide power to this chassis.
	PowerSupplies *[]OdataV4IdRef `json:"PowerSupplies,omitempty"`

	// PowerSuppliesOdataCount The number of items in a collection.
	PowerSuppliesOdataCount *OdataV4Count `json:"PowerSupplies@odata.count,omitempty"`

	// PoweredBy An array of links to resources or objects that power this chassis.  Normally, the link is for either a chassis or a specific set of power supplies.
	// Deprecated:
	PoweredBy *[]OdataV4IdRef `json:"PoweredBy,omitempty"`

	// PoweredByOdataCount The number of items in a collection.
	PoweredByOdataCount *OdataV4Count `json:"PoweredBy@odata.count,omitempty"`

	// Processors An array of links to the processors located in this chassis.
	Processors *[]OdataV4IdRef `json:"Processors,omitempty"`

	// ProcessorsOdataCount The number of items in a collection.
	ProcessorsOdataCount *OdataV4Count `json:"Processors@odata.count,omitempty"`

	// ResourceBlocks An array of links to the resource blocks located in this chassis.
	ResourceBlocks *[]OdataV4IdRef `json:"ResourceBlocks,omitempty"`

	// ResourceBlocksOdataCount The number of items in a collection.
	ResourceBlocksOdataCount *OdataV4Count `json:"ResourceBlocks@odata.count,omitempty"`

	// Storage An array of links to the storage subsystems connected to or inside this chassis.
	Storage *[]OdataV4IdRef `json:"Storage,omitempty"`

	// StorageOdataCount The number of items in a collection.
	StorageOdataCount *OdataV4Count `json:"Storage@odata.count,omitempty"`

	// Switches An array of links to the switches located in this chassis.
	Switches *[]OdataV4IdRef `json:"Switches,omitempty"`

	// SwitchesOdataCount The number of items in a collection.
	SwitchesOdataCount *OdataV4Count `json:"Switches@odata.count,omitempty"`
}

// ChassisV1250OemActions The available OEM-specific actions for this resource.
type ChassisV1250OemActions map[string]interface{}

// ChassisV1250PhysicalSecurity The physical security state of the chassis.
type ChassisV1250PhysicalSecurity struct {
	IntrusionSensor *ChassisV1250IntrusionSensor `json:"IntrusionSensor,omitempty"`

	// IntrusionSensorNumber A numerical identifier to represent the physical security sensor.
	// Deprecated:
	IntrusionSensorNumber *int64                            `json:"IntrusionSensorNumber"`
	IntrusionSensorReArm  *ChassisV1250IntrusionSensorReArm `json:"IntrusionSensorReArm,omitempty"`
}

// ChassisV1250Reset This action resets the chassis.  Additionally, it could reset systems or other contained resources depending on the ResetType used to invoke this action.
type ChassisV1250Reset struct {
	// Target Link to invoke action
	Target *string `json:"target,omitempty"`

	// Title Friendly action name
	Title *string `json:"title,omitempty"`
}

// ChassisV1250ThermalDirection defines model for Chassis_v1_25_0_ThermalDirection.
type ChassisV1250ThermalDirection string

// ResolutionStepV100ResolutionStep This type describes a recommended step of the service-defined resolution.
type ResolutionStepV100ResolutionStep struct {
	// ActionParameters The parameters of the action URI for a resolution step.
	ActionParameters *[]ActionInfoV141Parameters `json:"ActionParameters,omitempty"`

	// ActionURI The action URI for a resolution step.
	ActionURI *string `json:"ActionURI,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Priority The priority in the set of resolution steps.
	Priority       *int64                           `json:"Priority"`
	ResolutionType ResolutionStepV100ResolutionType `json:"ResolutionType"`

	// RetryCount The number of retries for a resolution step.
	RetryCount *int64 `json:"RetryCount"`

	// RetryIntervalSeconds The interval between retries for a resolution step.
	RetryIntervalSeconds *int64 `json:"RetryIntervalSeconds"`

	// TargetComponentURI The target URI of the component for a resolution step.
	TargetComponentURI *string `json:"TargetComponentURI"`
}

// ResolutionStepV100ResolutionType defines model for ResolutionStep_v1_0_0_ResolutionType.
type ResolutionStepV100ResolutionType string

// ResourceCondition A condition that requires attention.
type ResourceCondition struct {
	// LogEntry A reference to a resource.
	LogEntry *OdataV4IdRef `json:"LogEntry,omitempty"`

	// Message The human-readable message for this condition.
	Message *string `json:"Message,omitempty"`

	// MessageArgs An array of message arguments that are substituted for the arguments in the message when looked up in the message registry.
	MessageArgs *[]string `json:"MessageArgs,omitempty"`

	// MessageId The identifier for the message.
	MessageId *string `json:"MessageId,omitempty"`

	// OriginOfCondition A reference to a resource.
	OriginOfCondition *OdataV4IdRef `json:"OriginOfCondition,omitempty"`

	// Resolution Suggestions on how to resolve the condition.
	Resolution *string `json:"Resolution,omitempty"`

	// ResolutionSteps The list of recommended steps to resolve the condition.
	ResolutionSteps *[]ResolutionStepV100ResolutionStep `json:"ResolutionSteps,omitempty"`
	Severity        *ResourceHealth                     `json:"Severity,omitempty"`

	// Timestamp The time the condition occurred.
	Timestamp *time.Time `json:"Timestamp,omitempty"`
}

// ResourceDescription The description of this resource.  Used for commonality in the schema definitions.
type ResourceDescription = string

// ResourceHealth defines model for Resource_Health.
type ResourceHealth string

// ResourceId The unique identifier for this resource within the collection of similar resources.
type ResourceId = string

// ResourceName The name of the resource or array member.
type ResourceName = string

// ResourceOem The OEM extension.
type ResourceOem map[string]interface{}

// ResourcePowerState defines model for Resource_PowerState.
type ResourcePowerState string

// ResourceState defines model for Resource_State.
type ResourceState string

// ResourceStatus The status and health of a resource and its children.
type ResourceStatus struct {
	// Conditions Conditions in this resource that require attention.
	Conditions   *[]ResourceCondition `json:"Conditions,omitempty"`
	Health       *ResourceHealth      `json:"Health,omitempty"`
	HealthRollup *ResourceHealth      `json:"HealthRollup,omitempty"`

	// Oem The OEM extension.
	Oem   *ResourceOem   `json:"Oem,omitempty"`
	State *ResourceState `json:"State,omitempty"`
}

// ResourceUUID defines model for Resource_UUID.
type ResourceUUID = string

// ResourceV1180ContactInfo Contact information for this resource.
type ResourceV1180ContactInfo struct {
	// ContactName Name of this contact.
	ContactName *string `json:"ContactName"`

	// EmailAddress Email address for this contact.
	EmailAddress *string `json:"EmailAddress"`

	// PhoneNumber Phone number for this contact.
	PhoneNumber *string `json:"PhoneNumber"`
}

// ResourceV1180Location The location of a resource.
type ResourceV1180Location struct {
	// AltitudeMeters The altitude of the resource in meters.
	AltitudeMeters *float32 `json:"AltitudeMeters"`

	// Contacts An array of contact information.
	Contacts *[]ResourceV1180ContactInfo `json:"Contacts,omitempty"`

	// Info The location of the resource.
	// Deprecated:
	Info *string `json:"Info"`

	// InfoFormat The format of the Info property.
	// Deprecated:
	InfoFormat *string `json:"InfoFormat"`

	// Latitude The latitude of the resource.
	Latitude *float32 `json:"Latitude"`

	// Longitude The longitude of the resource in degree units.
	Longitude *float32 `json:"Longitude"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PartLocation The part location for a resource within an enclosure.
	PartLocation *ResourceV1180PartLocation `json:"PartLocation,omitempty"`

	// PartLocationContext Human-readable string to enable differentiation between PartLocation values for parts in the same enclosure, which might include hierarchical information of containing PartLocation values for the part.
	PartLocationContext *string `json:"PartLocationContext"`

	// PhysicalAddress The physical address for a resource.
	PhysicalAddress *ResourceV1180PhysicalAddress `json:"PhysicalAddress,omitempty"`

	// Placement The placement within the addressed location.
	Placement *ResourceV1180Placement `json:"Placement,omitempty"`

	// PostalAddress The postal address for a resource.
	// Deprecated:
	PostalAddress *ResourceV1180PostalAddress `json:"PostalAddress,omitempty"`
}

// ResourceV1180LocationType The types of locations for a part within an enclosure.
type ResourceV1180LocationType string

// ResourceV1180Orientation The orientations for the ordering of the part location ordinal value.
type ResourceV1180Orientation string

// ResourceV1180PartLocation The part location for a resource within an enclosure.
type ResourceV1180PartLocation struct {
	// LocationOrdinalValue The number that represents the location of the part.  For example, if LocationType is `Slot` and this unit is in slot 2, the LocationOrdinalValue is `2`.
	LocationOrdinalValue *int64 `json:"LocationOrdinalValue"`

	// LocationType The types of locations for a part within an enclosure.
	LocationType *ResourceV1180LocationType `json:"LocationType,omitempty"`

	// Orientation The orientations for the ordering of the part location ordinal value.
	Orientation *ResourceV1180Orientation `json:"Orientation,omitempty"`

	// Reference The reference areas for the location of the part within an enclosure.
	Reference *ResourceV1180Reference `json:"Reference,omitempty"`

	// ServiceLabel The label of the part location, such as a silk-screened name or a printed label.
	ServiceLabel *string `json:"ServiceLabel"`
}

// ResourceV1180PhysicalAddress The physical address for a resource.
type ResourceV1180PhysicalAddress struct {
	// City City, township, or shi (JP).
	City *string `json:"City"`

	// Country The country.
	Country *string `json:"Country"`

	// ISOCountryCode The ISO 3166-1 country code.
	ISOCountryCode *string `json:"ISOCountryCode"`

	// ISOSubdivisionCode ISO 3166-2 subdivision code.
	ISOSubdivisionCode *string `json:"ISOSubdivisionCode"`

	// PostalCode The postal code.
	PostalCode *string `json:"PostalCode"`

	// StateOrProvince State or province.
	StateOrProvince *string `json:"StateOrProvince"`

	// StreetAddress The street-level address, including building, room, or other identifiers.
	StreetAddress *string `json:"StreetAddress"`
}

// ResourceV1180Placement The placement within the addressed location.
type ResourceV1180Placement struct {
	// AdditionalInfo Area designation or other additional info.
	AdditionalInfo *string `json:"AdditionalInfo"`

	// Rack The name of a rack location within a row.
	Rack *string `json:"Rack"`

	// RackOffset The vertical location of the item, in terms of RackOffsetUnits.
	RackOffset *int64 `json:"RackOffset"`

	// RackOffsetUnits The type of rack unit in use.
	RackOffsetUnits *ResourceV1180RackUnits `json:"RackOffsetUnits,omitempty"`

	// Row The name of the row.
	Row *string `json:"Row"`
}

// ResourceV1180PostalAddress The postal address for a resource.
type ResourceV1180PostalAddress struct {
	// AdditionalCode The additional code.
	AdditionalCode *string `json:"AdditionalCode"`

	// AdditionalInfo The room designation or other additional information.
	AdditionalInfo *string `json:"AdditionalInfo"`

	// Building The name of the building.
	Building *string `json:"Building"`

	// City City, township, or shi (JP).
	City *string `json:"City"`

	// Community The postal community name.
	Community *string `json:"Community"`

	// Country The country.
	Country *string `json:"Country"`

	// District A county, parish, gun (JP), or district (IN).
	District *string `json:"District"`

	// Division City division, borough, city district, ward, or chou (JP).
	Division *string `json:"Division"`

	// Floor The floor.
	Floor *string `json:"Floor"`

	// GPSCoords The GPS coordinates of the part.
	// Deprecated:
	GPSCoords *string `json:"GPSCoords"`

	// HouseNumber The numeric portion of house number.
	HouseNumber *int64 `json:"HouseNumber"`

	// HouseNumberSuffix The house number suffix.
	HouseNumberSuffix *string `json:"HouseNumberSuffix"`

	// Landmark The landmark.
	Landmark *string `json:"Landmark"`

	// LeadingStreetDirection A leading street direction.
	LeadingStreetDirection *string `json:"LeadingStreetDirection"`

	// Location The room designation or other additional information.
	// Deprecated:
	Location *string `json:"Location"`

	// Name The name.
	Name *string `json:"Name"`

	// Neighborhood Neighborhood or block.
	Neighborhood *string `json:"Neighborhood"`

	// POBox The post office box (PO box).
	POBox *string `json:"POBox"`

	// PlaceType The description of the type of place that is addressed.
	PlaceType *string `json:"PlaceType"`

	// PostalCode The postal code or zip code.
	PostalCode *string `json:"PostalCode"`

	// Road The primary road or street.
	Road *string `json:"Road"`

	// RoadBranch The road branch.
	RoadBranch *string `json:"RoadBranch"`

	// RoadPostModifier The road post-modifier.
	RoadPostModifier *string `json:"RoadPostModifier"`

	// RoadPreModifier The road pre-modifier.
	RoadPreModifier *string `json:"RoadPreModifier"`

	// RoadSection The road section.
	RoadSection *string `json:"RoadSection"`

	// RoadSubBranch The road sub branch.
	RoadSubBranch *string `json:"RoadSubBranch"`

	// Room The name or number of the room.
	Room *string `json:"Room"`

	// Seat The seat, such as the desk, cubicle, or workstation.
	Seat *string `json:"Seat"`

	// Street Street name.
	Street *string `json:"Street"`

	// StreetSuffix Avenue, Platz, Street, Circle.
	StreetSuffix *string `json:"StreetSuffix"`

	// Territory A top-level subdivision within a country.
	Territory *string `json:"Territory"`

	// TrailingStreetSuffix A trailing street suffix.
	TrailingStreetSuffix *string `json:"TrailingStreetSuffix"`

	// Unit The name or number of the apartment unit or suite.
	Unit *string `json:"Unit"`
}

// ResourceV1180RackUnits The type of rack unit in use.
type ResourceV1180RackUnits string

// ResourceV1180Reference The reference areas for the location of the part within an enclosure.
type ResourceV1180Reference string

// ServiceRoot The ServiceRoot schema describes the root of the Redfish service, located at the '/redfish/v1' URI.  All other resources accessible through the Redfish interface on this device are linked directly or indirectly from the service root.
type ServiceRoot = ServiceRootV1161ServiceRoot

// ServiceRootV1161DeepOperations The information about deep operations that the service supports.
type ServiceRootV1161DeepOperations struct {
	// DeepPATCH An indication of whether the service supports the deep PATCH operation.
	DeepPATCH *bool `json:"DeepPATCH,omitempty"`

	// DeepPOST An indication of whether the service supports the deep POST operation.
	DeepPOST *bool `json:"DeepPOST,omitempty"`

	// MaxLevels The maximum levels of resources allowed in deep operations.
	MaxLevels *int64 `json:"MaxLevels,omitempty"`
}

// ServiceRootV1161Expand The information about the use of `$expand` in the service.
type ServiceRootV1161Expand struct {
	// ExpandAll An indication of whether the service supports the asterisk (`*`) option of the `$expand` query parameter.
	ExpandAll *bool `json:"ExpandAll,omitempty"`

	// Levels An indication of whether the service supports the `$levels` option of the `$expand` query parameter.
	Levels *bool `json:"Levels,omitempty"`

	// Links An indication of whether this service supports the tilde (`~`) option of the `$expand` query parameter.
	Links *bool `json:"Links,omitempty"`

	// MaxLevels The maximum `$levels` option value in the `$expand` query parameter.
	MaxLevels *int64 `json:"MaxLevels,omitempty"`

	// NoLinks An indication of whether the service supports the period (`.`) option of the `$expand` query parameter.
	NoLinks *bool `json:"NoLinks,omitempty"`
}

// ServiceRootV1161Links The links to other resources that are related to this resource.
type ServiceRootV1161Links struct {
	// ManagerProvidingService A reference to a resource.
	ManagerProvidingService *OdataV4IdRef `json:"ManagerProvidingService,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Sessions A reference to a resource.
	Sessions OdataV4IdRef `json:"Sessions"`
}

// ServiceRootV1161ProtocolFeaturesSupported The information about protocol features that the service supports.
type ServiceRootV1161ProtocolFeaturesSupported struct {
	// DeepOperations The information about deep operations that the service supports.
	DeepOperations *ServiceRootV1161DeepOperations `json:"DeepOperations,omitempty"`

	// ExcerptQuery An indication of whether the service supports the `excerpt` query parameter.
	ExcerptQuery *bool `json:"ExcerptQuery,omitempty"`

	// ExpandQuery The information about the use of `$expand` in the service.
	ExpandQuery *ServiceRootV1161Expand `json:"ExpandQuery,omitempty"`

	// FilterQuery An indication of whether the service supports the `$filter` query parameter.
	FilterQuery *bool `json:"FilterQuery,omitempty"`

	// MultipleHTTPRequests An indication of whether the service supports multiple outstanding HTTP requests.
	MultipleHTTPRequests *bool `json:"MultipleHTTPRequests,omitempty"`

	// OnlyMemberQuery An indication of whether the service supports the `only` query parameter.
	OnlyMemberQuery *bool `json:"OnlyMemberQuery,omitempty"`

	// SelectQuery An indication of whether the service supports the `$select` query parameter.
	SelectQuery *bool `json:"SelectQuery,omitempty"`
}

// ServiceRootV1161ServiceRoot The ServiceRoot schema describes the root of the Redfish service, located at the '/redfish/v1' URI.  All other resources accessible through the Redfish interface on this device are linked directly or indirectly from the service root.
type ServiceRootV1161ServiceRoot struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// AccountService A reference to a resource.
	AccountService *OdataV4IdRef `json:"AccountService,omitempty"`

	// AggregationService A reference to a resource.
	AggregationService *OdataV4IdRef `json:"AggregationService,omitempty"`

	// Cables A reference to a resource.
	Cables *OdataV4IdRef `json:"Cables,omitempty"`

	// CertificateService A reference to a resource.
	CertificateService *OdataV4IdRef `json:"CertificateService,omitempty"`

	// Chassis A reference to a resource.
	Chassis *OdataV4IdRef `json:"Chassis,omitempty"`

	// ComponentIntegrity A reference to a resource.
	ComponentIntegrity *OdataV4IdRef `json:"ComponentIntegrity,omitempty"`

	// CompositionService A reference to a resource.
	CompositionService *OdataV4IdRef `json:"CompositionService,omitempty"`

	// Description The description of this resource.  Used for commonality in the schema definitions.
	Description *ResourceDescription `json:"Description,omitempty"`

	// EventService A reference to a resource.
	EventService *OdataV4IdRef `json:"EventService,omitempty"`

	// Fabrics A reference to a resource.
	Fabrics *OdataV4IdRef `json:"Fabrics,omitempty"`

	// Facilities A reference to a resource.
	Facilities *OdataV4IdRef `json:"Facilities,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// JobService A reference to a resource.
	JobService *OdataV4IdRef `json:"JobService,omitempty"`

	// JsonSchemas A reference to a resource.
	JsonSchemas *OdataV4IdRef `json:"JsonSchemas,omitempty"`

	// KeyService A reference to a resource.
	KeyService *OdataV4IdRef `json:"KeyService,omitempty"`

	// LicenseService A reference to a resource.
	LicenseService *OdataV4IdRef `json:"LicenseService,omitempty"`

	// Links The links to other resources that are related to this resource.
	Links ServiceRootV1161Links `json:"Links"`

	// Managers A reference to a resource.
	Managers *OdataV4IdRef `json:"Managers,omitempty"`

	// NVMeDomains A reference to a resource.
	NVMeDomains *OdataV4IdRef `json:"NVMeDomains,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// PowerEquipment A reference to a resource.
	PowerEquipment *OdataV4IdRef `json:"PowerEquipment,omitempty"`

	// Product The product associated with this Redfish service.
	Product *string `json:"Product"`

	// ProtocolFeaturesSupported The information about protocol features that the service supports.
	ProtocolFeaturesSupported *ServiceRootV1161ProtocolFeaturesSupported `json:"ProtocolFeaturesSupported,omitempty"`

	// RedfishVersion The version of the Redfish service.
	RedfishVersion *string `json:"RedfishVersion,omitempty"`

	// RegisteredClients A reference to a resource.
	RegisteredClients *OdataV4IdRef `json:"RegisteredClients,omitempty"`

	// Registries A reference to a resource.
	Registries *OdataV4IdRef `json:"Registries,omitempty"`

	// ResourceBlocks A reference to a resource.
	ResourceBlocks *OdataV4IdRef `json:"ResourceBlocks,omitempty"`

	// ServiceConditions A reference to a resource.
	ServiceConditions *OdataV4IdRef `json:"ServiceConditions,omitempty"`

	// ServiceIdentification The vendor or user-provided product and service identifier.
	ServiceIdentification *string `json:"ServiceIdentification,omitempty"`

	// SessionService A reference to a resource.
	SessionService *OdataV4IdRef `json:"SessionService,omitempty"`

	// Storage A reference to a resource.
	Storage *OdataV4IdRef `json:"Storage,omitempty"`

	// StorageServices A reference to a resource.
	StorageServices *OdataV4IdRef `json:"StorageServices,omitempty"`

	// StorageSystems A reference to a resource.
	StorageSystems *OdataV4IdRef `json:"StorageSystems,omitempty"`

	// Systems A reference to a resource.
	Systems *OdataV4IdRef `json:"Systems,omitempty"`

	// Tasks A reference to a resource.
	Tasks *OdataV4IdRef `json:"Tasks,omitempty"`

	// TelemetryService A reference to a resource.
	TelemetryService *OdataV4IdRef `json:"TelemetryService,omitempty"`

	// ThermalEquipment A reference to a resource.
	ThermalEquipment *OdataV4IdRef `json:"ThermalEquipment,omitempty"`

	// UUID Unique identifier for a service instance.  When SSDP is used, this value contains the same UUID returned in an HTTP `200 OK` response from an SSDP `M-SEARCH` request during discovery.
	UUID *string `json:"UUID"`

	// UpdateService A reference to a resource.
	UpdateService *OdataV4IdRef `json:"UpdateService,omitempty"`

	// Vendor The vendor or manufacturer associated with this Redfish service.
	Vendor *string `json:"Vendor"`
}

// SoftwareInventoryV1101MeasurementBlock The DSP0274-defined measurement block information.
type SoftwareInventoryV1101MeasurementBlock struct {
	// Measurement The hexadecimal string representation of the numeric value of the DSP0274-defined Measurement field of the measurement block.
	Measurement *string `json:"Measurement"`

	// MeasurementIndex The DSP0274-defined Index field of the measurement block.
	MeasurementIndex *int64 `json:"MeasurementIndex"`

	// MeasurementSize The DSP0274-defined MeasurementSize field of the measurement block.
	MeasurementSize *int64 `json:"MeasurementSize"`

	// MeasurementSpecification The DSP0274-defined MeasurementSpecification field of the measurement block.
	MeasurementSpecification *int64 `json:"MeasurementSpecification"`
}

// OdataV4Context The OData description of a payload.
type OdataV4Context = string

// OdataV4Count The number of items in a collection.
type OdataV4Count = int64

// OdataV4Etag The current ETag of the resource.
type OdataV4Etag = string

// OdataV4Id The unique identifier for a resource.
type OdataV4Id = string

// OdataV4IdRef A reference to a resource.
type OdataV4IdRef struct {
	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`
}

// OdataV4Type The type of a resource.
type OdataV4Type = string
